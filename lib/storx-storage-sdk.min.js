!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("storx-storage-sdk",[],e):"object"==typeof exports?exports["storx-storage-sdk"]=e():t["storx-storage-sdk"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=151)}([function(t,e,n){var r=n(2),o=n(23),i=n(16),u=n(17),s=n(24),a=function(t,e,n){var c,f,l,p,h=t&a.F,d=t&a.G,v=t&a.S,g=t&a.P,y=t&a.B,m=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?o:o[e]||(o[e]={}),x=b.prototype||(b.prototype={});for(c in d&&(n=e),n)l=((f=!h&&m&&void 0!==m[c])?m:n)[c],p=y&&f?s(l,r):g&&"function"==typeof l?s(Function.call,l):l,m&&u(m,c,l,t&a.U),b[c]!=l&&i(b,c,p),g&&x[c]!=l&&(x[c]=l)};r.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(53)("wks"),o=n(39),i=n(2).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(26),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){t.exports=!n(3)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(1),o=n(103),i=n(28),u=Object.defineProperty;e.f=n(7)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(29);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){t.exports=n(356)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.baseUrl=void 0;e.baseUrl="http://109.169.55.25:3000/api"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validateApiKeys=function(t,e){if(!t||""===t)throw new Error("No apiKey provided! Please provide your api key as an argument when you start this script");if(!e||""===e)throw new Error("No secretApiKey provided! Please provide your secret api key as an argument when you start this script")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.handleError=void 0;e.handleError=function(t){return t&&t.response&&t.response&&t.response.data&&t.response.data.error?t.response.data.error:t.data&&t.data.error?t.data.error:t.response&&t.response.error?t.response.error:t}},function(t,e,n){"use strict";var r=n(139),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function u(t){return void 0===t}function s(t){return null!==t&&"object"==typeof t}function a(t){if("[object Object]"!==o.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function c(t){return"[object Function]"===o.call(t)}function f(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!u(t)&&null!==t.constructor&&!u(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isPlainObject:a,isUndefined:u,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:c,isStream:function(t){return s(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:f,merge:function t(){var e={};function n(n,r){a(e[r])&&a(n)?e[r]=t(e[r],n):a(n)?e[r]=t({},n):i(n)?e[r]=n.slice():e[r]=n}for(var r=0,o=arguments.length;r<o;r++)f(arguments[r],n);return e},extend:function(t,e,n){return f(e,(function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},function(t,e,n){var r=n(8),o=n(38);t.exports=n(7)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(2),o=n(16),i=n(19),u=n(39)("src"),s=n(155),a=(""+s).split("toString");n(23).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(c&&(i(n,u)||o(n,u,t[e]?""+t[e]:a.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||s.call(this)}))},function(t,e,n){var r=n(0),o=n(3),i=n(29),u=/"/g,s=function(t,e,n,r){var o=String(i(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),s+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*o((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",n)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(54),o=n(29);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(55),o=n(38),i=n(20),u=n(28),s=n(19),a=n(103),c=Object.getOwnPropertyDescriptor;e.f=n(7)?c:function(t,e){if(t=i(t),e=u(e,!0),a)try{return c(t,e)}catch(t){}if(s(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(19),o=n(9),i=n(74)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e){var n=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(10);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(0),o=n(23),i=n(3);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i((function(){n(1)})),"Object",u)}},function(t,e,n){var r=n(24),o=n(54),i=n(9),u=n(6),s=n(90);t.exports=function(t,e){var n=1==t,a=2==t,c=3==t,f=4==t,l=6==t,p=5==t||l,h=e||s;return function(e,s,d){for(var v,g,y=i(e),m=o(y),b=r(s,d,3),x=u(m.length),w=0,_=n?h(e,x):a?h(e,0):void 0;x>w;w++)if((p||w in m)&&(g=b(v=m[w],w,y),t))if(n)_[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:_.push(v)}else if(f)return!1;return l?-1:c||f?f:_}}},function(t,e,n){"use strict";if(n(7)){var r=n(34),o=n(2),i=n(3),u=n(0),s=n(68),a=n(98),c=n(24),f=n(45),l=n(38),p=n(16),h=n(47),d=n(26),v=n(6),g=n(131),y=n(41),m=n(28),b=n(19),x=n(50),w=n(4),_=n(9),S=n(87),E=n(42),O=n(22),F=n(43).f,C=n(89),j=n(39),A=n(5),M=n(31),R=n(58),k=n(57),P=n(92),I=n(52),N=n(63),T=n(44),L=n(91),U=n(120),B=n(8),D=n(21),q=B.f,W=D.f,G=o.RangeError,V=o.TypeError,z=o.Uint8Array,K=Array.prototype,$=a.ArrayBuffer,H=a.DataView,J=M(0),Y=M(2),X=M(3),Z=M(4),Q=M(5),tt=M(6),et=R(!0),nt=R(!1),rt=P.values,ot=P.keys,it=P.entries,ut=K.lastIndexOf,st=K.reduce,at=K.reduceRight,ct=K.join,ft=K.sort,lt=K.slice,pt=K.toString,ht=K.toLocaleString,dt=A("iterator"),vt=A("toStringTag"),gt=j("typed_constructor"),yt=j("def_constructor"),mt=s.CONSTR,bt=s.TYPED,xt=s.VIEW,wt=M(1,(function(t,e){return Ft(k(t,t[yt]),e)})),_t=i((function(){return 1===new z(new Uint16Array([1]).buffer)[0]})),St=!!z&&!!z.prototype.set&&i((function(){new z(1).set({})})),Et=function(t,e){var n=d(t);if(n<0||n%e)throw G("Wrong offset!");return n},Ot=function(t){if(w(t)&&bt in t)return t;throw V(t+" is not a typed array!")},Ft=function(t,e){if(!w(t)||!(gt in t))throw V("It is not a typed array constructor!");return new t(e)},Ct=function(t,e){return jt(k(t,t[yt]),e)},jt=function(t,e){for(var n=0,r=e.length,o=Ft(t,r);r>n;)o[n]=e[n++];return o},At=function(t,e,n){q(t,e,{get:function(){return this._d[n]}})},Mt=function(t){var e,n,r,o,i,u,s=_(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,p=C(s);if(null!=p&&!S(p)){for(u=p.call(s),r=[],e=0;!(i=u.next()).done;e++)r.push(i.value);s=r}for(l&&a>2&&(f=c(f,arguments[2],2)),e=0,n=v(s.length),o=Ft(this,n);n>e;e++)o[e]=l?f(s[e],e):s[e];return o},Rt=function(){for(var t=0,e=arguments.length,n=Ft(this,e);e>t;)n[t]=arguments[t++];return n},kt=!!z&&i((function(){ht.call(new z(1))})),Pt=function(){return ht.apply(kt?lt.call(Ot(this)):Ot(this),arguments)},It={copyWithin:function(t,e){return U.call(Ot(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Ot(this),arguments)},filter:function(t){return Ct(this,Y(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return wt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,e=Ot(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,e){var n=Ot(this),r=n.length,o=y(t,r);return new(k(n,n[yt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:y(e,r))-o))}},Nt=function(t,e){return Ct(this,lt.call(Ot(this),t,e))},Tt=function(t){Ot(this);var e=Et(arguments[1],1),n=this.length,r=_(t),o=v(r.length),i=0;if(o+e>n)throw G("Wrong length!");for(;i<o;)this[e+i]=r[i++]},Lt={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Ut=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Bt=function(t,e){return Ut(t,e=m(e,!0))?l(2,t[e]):W(t,e)},Dt=function(t,e,n){return!(Ut(t,e=m(e,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?q(t,e,n):(t[e]=n.value,t)};mt||(D.f=Bt,B.f=Dt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:Dt}),i((function(){pt.call({})}))&&(pt=ht=function(){return ct.call(this)});var qt=h({},It);h(qt,Lt),p(qt,dt,Lt.values),h(qt,{slice:Nt,set:Tt,constructor:function(){},toString:pt,toLocaleString:Pt}),At(qt,"buffer","b"),At(qt,"byteOffset","o"),At(qt,"byteLength","l"),At(qt,"length","e"),q(qt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,n,a){var c=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,h="set"+t,d=o[c],y=d||{},m=d&&O(d),b=!d||!s.ABV,_={},S=d&&d.prototype,C=function(t,n){q(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[l](n*e+r.o,_t)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[h](n*e+o.o,r,_t)}(this,n,t)},enumerable:!0})};b?(d=n((function(t,n,r,o){f(t,d,c,"_d");var i,u,s,a,l=0,h=0;if(w(n)){if(!(n instanceof $||"ArrayBuffer"==(a=x(n))||"SharedArrayBuffer"==a))return bt in n?jt(d,n):Mt.call(d,n);i=n,h=Et(r,e);var y=n.byteLength;if(void 0===o){if(y%e)throw G("Wrong length!");if((u=y-h)<0)throw G("Wrong length!")}else if((u=v(o)*e)+h>y)throw G("Wrong length!");s=u/e}else s=g(n),i=new $(u=s*e);for(p(t,"_d",{b:i,o:h,l:u,e:s,v:new H(i)});l<s;)C(t,l++)})),S=d.prototype=E(qt),p(S,"constructor",d)):i((function(){d(1)}))&&i((function(){new d(-1)}))&&N((function(t){new d,new d(null),new d(1.5),new d(t)}),!0)||(d=n((function(t,n,r,o){var i;return f(t,d,c),w(n)?n instanceof $||"ArrayBuffer"==(i=x(n))||"SharedArrayBuffer"==i?void 0!==o?new y(n,Et(r,e),o):void 0!==r?new y(n,Et(r,e)):new y(n):bt in n?jt(d,n):Mt.call(d,n):new y(g(n))})),J(m!==Function.prototype?F(y).concat(F(m)):F(y),(function(t){t in d||p(d,t,y[t])})),d.prototype=S,r||(S.constructor=d));var j=S[dt],A=!!j&&("values"==j.name||null==j.name),M=Lt.values;p(d,gt,!0),p(S,bt,c),p(S,xt,!0),p(S,yt,d),(a?new d(1)[vt]==c:vt in S)||q(S,vt,{get:function(){return c}}),_[c]=d,u(u.G+u.W+u.F*(d!=y),_),u(u.S,c,{BYTES_PER_ELEMENT:e}),u(u.S+u.F*i((function(){y.of.call(d,1)})),c,{from:Mt,of:Rt}),"BYTES_PER_ELEMENT"in S||p(S,"BYTES_PER_ELEMENT",e),u(u.P,c,It),T(c),u(u.P+u.F*St,c,{set:Tt}),u(u.P+u.F*!A,c,Lt),r||S.toString==pt||(S.toString=pt),u(u.P+u.F*i((function(){new d(1).slice()})),c,{slice:Nt}),u(u.P+u.F*(i((function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()}))||!i((function(){S.toLocaleString.call([1,2])}))),c,{toLocaleString:Pt}),I[c]=A?j:M,r||A||p(S,dt,M)}}else t.exports=function(){}},function(t,e,n){var r=n(126),o=n(0),i=n(53)("metadata"),u=i.store||(i.store=new(n(129))),s=function(t,e,n){var o=u.get(t);if(!o){if(!n)return;u.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:u,map:s,has:function(t,e,n){var r=s(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=s(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){s(n,r,!0).set(t,e)},keys:function(t,e){var n=s(t,e,!1),r=[];return n&&n.forEach((function(t,e){r.push(e)})),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,n){var r=n(39)("meta"),o=n(4),i=n(19),u=n(8).f,s=0,a=Object.isExtensible||function(){return!0},c=!n(3)((function(){return a(Object.preventExtensions({}))})),f=function(t){u(t,r,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!a(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!a(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return c&&l.NEED&&a(t)&&!i(t,r)&&f(t),t}}},function(t,e,n){var r=n(5)("unscopables"),o=Array.prototype;null==o[r]&&n(16)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e,n){"use strict";const r=n(388),o=n(389),i=n(390),u=n(391),s=Symbol("encodeFragmentIdentifier");function a(t){if("string"!=typeof t||1!==t.length)throw new TypeError("arrayFormatSeparator must be single character string")}function c(t,e){return e.encode?e.strict?r(t):encodeURIComponent(t):t}function f(t,e){return e.decode?o(t):t}function l(t){const e=t.indexOf("#");return-1!==e&&(t=t.slice(0,e)),t}function p(t){const e=(t=l(t)).indexOf("?");return-1===e?"":t.slice(e+1)}function h(t,e){return e.parseNumbers&&!Number.isNaN(Number(t))&&"string"==typeof t&&""!==t.trim()?t=Number(t):!e.parseBooleans||null===t||"true"!==t.toLowerCase()&&"false"!==t.toLowerCase()||(t="true"===t.toLowerCase()),t}function d(t,e){a((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const n=function(t){let e;switch(t.arrayFormat){case"index":return(t,n,r)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===r[t]&&(r[t]={}),r[t][e[1]]=n):r[t]=n};case"bracket":return(t,n,r)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==r[t]?r[t]=[].concat(r[t],n):r[t]=[n]:r[t]=n};case"colon-list-separator":return(t,n,r)=>{e=/(:list)$/.exec(t),t=t.replace(/:list$/,""),e?void 0!==r[t]?r[t]=[].concat(r[t],n):r[t]=[n]:r[t]=n};case"comma":case"separator":return(e,n,r)=>{const o="string"==typeof n&&n.includes(t.arrayFormatSeparator),i="string"==typeof n&&!o&&f(n,t).includes(t.arrayFormatSeparator);n=i?f(n,t):n;const u=o||i?n.split(t.arrayFormatSeparator).map(e=>f(e,t)):null===n?n:f(n,t);r[e]=u};case"bracket-separator":return(e,n,r)=>{const o=/(\[\])$/.test(e);if(e=e.replace(/\[\]$/,""),!o)return void(r[e]=n?f(n,t):n);const i=null===n?[]:n.split(t.arrayFormatSeparator).map(e=>f(e,t));void 0!==r[e]?r[e]=[].concat(r[e],i):r[e]=i};default:return(t,e,n)=>{void 0!==n[t]?n[t]=[].concat(n[t],e):n[t]=e}}}(e),r=Object.create(null);if("string"!=typeof t)return r;if(!(t=t.trim().replace(/^[?#&]/,"")))return r;for(const o of t.split("&")){if(""===o)continue;let[t,u]=i(e.decode?o.replace(/\+/g," "):o,"=");u=void 0===u?null:["comma","separator","bracket-separator"].includes(e.arrayFormat)?u:f(u,e),n(f(t,e),u,r)}for(const t of Object.keys(r)){const n=r[t];if("object"==typeof n&&null!==n)for(const t of Object.keys(n))n[t]=h(n[t],e);else r[t]=h(n,e)}return!1===e.sort?r:(!0===e.sort?Object.keys(r).sort():Object.keys(r).sort(e.sort)).reduce((t,e)=>{const n=r[e];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?t[e]=function t(e){return Array.isArray(e)?e.sort():"object"==typeof e?t(Object.keys(e)).sort((t,e)=>Number(t)-Number(e)).map(t=>e[t]):e}(n):t[e]=n,t},Object.create(null))}e.extract=p,e.parse=d,e.stringify=(t,e)=>{if(!t)return"";a((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const n=n=>e.skipNull&&null==t[n]||e.skipEmptyString&&""===t[n],r=function(t){switch(t.arrayFormat){case"index":return e=>(n,r)=>{const o=n.length;return void 0===r||t.skipNull&&null===r||t.skipEmptyString&&""===r?n:null===r?[...n,[c(e,t),"[",o,"]"].join("")]:[...n,[c(e,t),"[",c(o,t),"]=",c(r,t)].join("")]};case"bracket":return e=>(n,r)=>void 0===r||t.skipNull&&null===r||t.skipEmptyString&&""===r?n:null===r?[...n,[c(e,t),"[]"].join("")]:[...n,[c(e,t),"[]=",c(r,t)].join("")];case"colon-list-separator":return e=>(n,r)=>void 0===r||t.skipNull&&null===r||t.skipEmptyString&&""===r?n:null===r?[...n,[c(e,t),":list="].join("")]:[...n,[c(e,t),":list=",c(r,t)].join("")];case"comma":case"separator":case"bracket-separator":{const e="bracket-separator"===t.arrayFormat?"[]=":"=";return n=>(r,o)=>void 0===o||t.skipNull&&null===o||t.skipEmptyString&&""===o?r:(o=null===o?"":o,0===r.length?[[c(n,t),e,c(o,t)].join("")]:[[r,c(o,t)].join(t.arrayFormatSeparator)])}default:return e=>(n,r)=>void 0===r||t.skipNull&&null===r||t.skipEmptyString&&""===r?n:null===r?[...n,c(e,t)]:[...n,[c(e,t),"=",c(r,t)].join("")]}}(e),o={};for(const e of Object.keys(t))n(e)||(o[e]=t[e]);const i=Object.keys(o);return!1!==e.sort&&i.sort(e.sort),i.map(n=>{const o=t[n];return void 0===o?"":null===o?c(n,e):Array.isArray(o)?0===o.length&&"bracket-separator"===e.arrayFormat?c(n,e)+"[]":o.reduce(r(n),[]).join("&"):c(n,e)+"="+c(o,e)}).filter(t=>t.length>0).join("&")},e.parseUrl=(t,e)=>{e=Object.assign({decode:!0},e);const[n,r]=i(t,"#");return Object.assign({url:n.split("?")[0]||"",query:d(p(t),e)},e&&e.parseFragmentIdentifier&&r?{fragmentIdentifier:f(r,e)}:{})},e.stringifyUrl=(t,n)=>{n=Object.assign({encode:!0,strict:!0,[s]:!0},n);const r=l(t.url).split("?")[0]||"",o=e.extract(t.url),i=e.parse(o,{sort:!1}),u=Object.assign(i,t.query);let a=e.stringify(u,n);a&&(a="?"+a);let f=function(t){let e="";const n=t.indexOf("#");return-1!==n&&(e=t.slice(n)),e}(t.url);return t.fragmentIdentifier&&(f="#"+(n[s]?c(t.fragmentIdentifier,n):t.fragmentIdentifier)),`${r}${a}${f}`},e.pick=(t,n,r)=>{r=Object.assign({parseFragmentIdentifier:!0,[s]:!1},r);const{url:o,query:i,fragmentIdentifier:a}=e.parseUrl(t,r);return e.stringifyUrl({url:o,query:u(i,n),fragmentIdentifier:a},r)},e.exclude=(t,n,r)=>{const o=Array.isArray(n)?t=>!n.includes(t):(t,e)=>!n(t,e);return e.pick(t,o,r)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(105),o=n(75);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(26),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(1),o=n(106),i=n(75),u=n(74)("IE_PROTO"),s=function(){},a=function(){var t,e=n(72)("iframe"),r=i.length;for(e.style.display="none",n(76).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[i[r]];return a()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[u]=t):n=a(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(105),o=n(75).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(2),o=n(8),i=n(7),u=n(5)("species");t.exports=function(t){var e=r[t];i&&e&&!e[u]&&o.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(24),o=n(118),i=n(87),u=n(1),s=n(6),a=n(89),c={},f={};(e=t.exports=function(t,e,n,l,p){var h,d,v,g,y=p?function(){return t}:a(t),m=r(n,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(h=s(t.length);h>b;b++)if((g=e?m(u(d=t[b])[0],d[1]):m(t[b]))===c||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=o(v,m,d.value,e))===c||g===f)return g}).BREAK=c,e.RETURN=f},function(t,e,n){var r=n(17);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(8).f,o=n(19),i=n(5)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(25),o=n(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){var r=n(0),o=n(29),i=n(3),u=n(78),s="["+u+"]",a=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),f=function(t,e,n){var o={},s=i((function(){return!!u[t]()||"​"!="​"[t]()})),a=o[t]=s?e(l):u[t];n&&(o[n]=a),r(r.P+r.F*s,"String",o)},l=f.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(a,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},function(t,e){t.exports={}},function(t,e,n){var r=n(23),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(34)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(25);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(1),o=n(10),i=n(5)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||null==(n=r(u)[i])?e:o(n)}},function(t,e,n){var r=n(20),o=n(6),i=n(41);t.exports=function(t){return function(e,n,u){var s,a=r(e),c=o(a.length),f=i(u,c);if(t&&n!=n){for(;c>f;)if((s=a[f++])!=s)return!0}else for(;c>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(25);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(26),o=n(29);t.exports=function(t){return function(e,n){var i,u,s=String(o(e)),a=r(n),c=s.length;return a<0||a>=c?t?"":void 0:(i=s.charCodeAt(a))<55296||i>56319||a+1===c||(u=s.charCodeAt(a+1))<56320||u>57343?t?s.charAt(a):i:t?s.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,e,n){var r=n(4),o=n(25),i=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(50),o=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){"use strict";n(122);var r=n(17),o=n(16),i=n(3),u=n(29),s=n(5),a=n(93),c=s("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var p=s(t),h=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),d=h?!i((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[p](""),!e})):void 0;if(!h||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[p],g=n(u,p,""[t],(function(t,e,n,r,o){return e.exec===a?h&&!o?{done:!0,value:v.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),y=g[0],m=g[1];r(String.prototype,t,y),o(RegExp.prototype,p,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),o=n(0),i=n(17),u=n(47),s=n(35),a=n(46),c=n(45),f=n(4),l=n(3),p=n(63),h=n(49),d=n(79);t.exports=function(t,e,n,v,g,y){var m=r[t],b=m,x=g?"set":"add",w=b&&b.prototype,_={},S=function(t){var e=w[t];i(w,t,"delete"==t||"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(y||w.forEach&&!l((function(){(new b).entries().next()})))){var E=new b,O=E[x](y?{}:-0,1)!=E,F=l((function(){E.has(1)})),C=p((function(t){new b(t)})),j=!y&&l((function(){for(var t=new b,e=5;e--;)t[x](e,e);return!t.has(-0)}));C||((b=e((function(e,n){c(e,b,t);var r=d(new m,e,b);return null!=n&&a(n,g,r[x],r),r}))).prototype=w,w.constructor=b),(F||j)&&(S("delete"),S("has"),g&&S("get")),(j||O)&&S(x),y&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,g,x),u(b.prototype,n),s.NEED=!0;return h(b,t),_[t]=b,o(o.G+o.W+o.F*(b!=m),_),y||v.setStrong(b,t,g),b}},function(t,e,n){for(var r,o=n(2),i=n(16),u=n(39),s=u("typed_array"),a=u("view"),c=!(!o.ArrayBuffer||!o.DataView),f=c,l=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[p[l++]])?(i(r.prototype,s,!0),i(r.prototype,a,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:s,VIEW:a}},function(t,e,n){"use strict";t.exports=n(34)||!n(3)((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete n(2)[t]}))},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(24),u=n(46);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,s,a=arguments[1];return o(this),(e=void 0!==a)&&o(a),null==t?new this:(n=[],e?(r=0,s=i(a,arguments[2],2),u(t,!1,(function(t){n.push(s(t,r++))}))):u(t,!1,n.push,n),new this(n))}})}},function(t,e,n){var r=n(4),o=n(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(2),o=n(23),i=n(34),u=n(104),s=n(8).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:u.f(t)})}},function(t,e,n){var r=n(53)("keys"),o=n(39);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(4),o=n(1),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(24)(Function.call,n(21).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),o=n(77).set;t.exports=function(t,e,n){var i,u=e.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e,n){"use strict";var r=n(26),o=n(29);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){"use strict";var r=n(34),o=n(0),i=n(17),u=n(16),s=n(52),a=n(84),c=n(49),f=n(22),l=n(5)("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,n,d,v,g,y){a(n,e,d);var m,b,x,w=function(t){if(!p&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},_=e+" Iterator",S="values"==v,E=!1,O=t.prototype,F=O[l]||O["@@iterator"]||v&&O[v],C=F||w(v),j=v?S?w("entries"):C:void 0,A="Array"==e&&O.entries||F;if(A&&(x=f(A.call(new t)))!==Object.prototype&&x.next&&(c(x,_,!0),r||"function"==typeof x[l]||u(x,l,h)),S&&F&&"values"!==F.name&&(E=!0,C=function(){return F.call(this)}),r&&!y||!p&&!E&&O[l]||u(O,l,C),s[e]=C,s[_]=h,v)if(m={values:S?C:w("values"),keys:g?C:w("keys"),entries:j},y)for(b in m)b in O||i(O,b,m[b]);else o(o.P+o.F*(p||E),e,m);return m}},function(t,e,n){"use strict";var r=n(42),o=n(38),i=n(49),u={};n(16)(u,n(5)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(62),o=n(29);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(52),o=n(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){"use strict";var r=n(8),o=n(38);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(50),o=n(5)("iterator"),i=n(52);t.exports=n(23).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(244);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){"use strict";var r=n(9),o=n(41),i=n(6);t.exports=function(t){for(var e=r(this),n=i(e.length),u=arguments.length,s=o(u>1?arguments[1]:void 0,n),a=u>2?arguments[2]:void 0,c=void 0===a?n:o(a,n);c>s;)e[s++]=t;return e}},function(t,e,n){"use strict";var r=n(36),o=n(121),i=n(52),u=n(20);t.exports=n(83)(Array,"Array",(function(t,e){this._t=u(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,o,i=n(56),u=RegExp.prototype.exec,s=String.prototype.replace,a=u,c=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(a=function(t){var e,n,r,o,a=this;return f&&(n=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),c&&(e=a.lastIndex),r=u.call(a,t),c&&r&&(a.lastIndex=a.global?r.index+r[0].length:e),f&&r&&r.length>1&&s.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=a},function(t,e,n){"use strict";var r=n(61)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r,o,i,u=n(24),s=n(111),a=n(76),c=n(72),f=n(2),l=f.process,p=f.setImmediate,h=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};p&&h||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++g]=function(){s("function"==typeof t?t:Function(t),e)},r(g),g},h=function(t){delete y[t]},"process"==n(25)(l)?r=function(t){l.nextTick(u(m,t,1))}:v&&v.now?r=function(t){v.now(u(m,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(t){a.appendChild(c("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:p,clear:h}},function(t,e,n){var r=n(2),o=n(95).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,s=r.Promise,a="process"==n(25)(u);t.exports=function(){var t,e,n,c=function(){var r,o;for(a&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(a)n=function(){u.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);n=function(){f.then(c)}}else n=function(){o.call(r,c)};else{var l=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=l=!l}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){"use strict";var r=n(10);function o(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new o(t)}},function(t,e,n){"use strict";var r=n(2),o=n(7),i=n(34),u=n(68),s=n(16),a=n(47),c=n(3),f=n(45),l=n(26),p=n(6),h=n(131),d=n(43).f,v=n(8).f,g=n(91),y=n(49),m=r.ArrayBuffer,b=r.DataView,x=r.Math,w=r.RangeError,_=r.Infinity,S=m,E=x.abs,O=x.pow,F=x.floor,C=x.log,j=x.LN2,A=o?"_b":"buffer",M=o?"_l":"byteLength",R=o?"_o":"byteOffset";function k(t,e,n){var r,o,i,u=new Array(n),s=8*n-e-1,a=(1<<s)-1,c=a>>1,f=23===e?O(2,-24)-O(2,-77):0,l=0,p=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===_?(o=t!=t?1:0,r=a):(r=F(C(t)/j),t*(i=O(2,-r))<1&&(r--,i*=2),(t+=r+c>=1?f/i:f*O(2,1-c))*i>=2&&(r++,i/=2),r+c>=a?(o=0,r=a):r+c>=1?(o=(t*i-1)*O(2,e),r+=c):(o=t*O(2,c-1)*O(2,e),r=0));e>=8;u[l++]=255&o,o/=256,e-=8);for(r=r<<e|o,s+=e;s>0;u[l++]=255&r,r/=256,s-=8);return u[--l]|=128*p,u}function P(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,u=i>>1,s=o-7,a=n-1,c=t[a--],f=127&c;for(c>>=7;s>0;f=256*f+t[a],a--,s-=8);for(r=f&(1<<-s)-1,f>>=-s,s+=e;s>0;r=256*r+t[a],a--,s-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:c?-_:_;r+=O(2,e),f-=u}return(c?-1:1)*r*O(2,f-e)}function I(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function T(t){return[255&t,t>>8&255]}function L(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function U(t){return k(t,52,8)}function B(t){return k(t,23,4)}function D(t,e,n){v(t.prototype,e,{get:function(){return this[n]}})}function q(t,e,n,r){var o=h(+n);if(o+e>t[M])throw w("Wrong index!");var i=t[A]._b,u=o+t[R],s=i.slice(u,u+e);return r?s:s.reverse()}function W(t,e,n,r,o,i){var u=h(+n);if(u+e>t[M])throw w("Wrong index!");for(var s=t[A]._b,a=u+t[R],c=r(+o),f=0;f<e;f++)s[a+f]=c[i?f:e-f-1]}if(u.ABV){if(!c((function(){m(1)}))||!c((function(){new m(-1)}))||c((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var G,V=(m=function(t){return f(this,m),new S(h(t))}).prototype=S.prototype,z=d(S),K=0;z.length>K;)(G=z[K++])in m||s(m,G,S[G]);i||(V.constructor=m)}var $=new b(new m(2)),H=b.prototype.setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||a(b.prototype,{setInt8:function(t,e){H.call(this,t,e<<24>>24)},setUint8:function(t,e){H.call(this,t,e<<24>>24)}},!0)}else m=function(t){f(this,m,"ArrayBuffer");var e=h(t);this._b=g.call(new Array(e),0),this[M]=e},b=function(t,e,n){f(this,b,"DataView"),f(t,m,"DataView");var r=t[M],o=l(e);if(o<0||o>r)throw w("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw w("Wrong length!");this[A]=t,this[R]=o,this[M]=n},o&&(D(m,"byteLength","_l"),D(b,"buffer","_b"),D(b,"byteLength","_l"),D(b,"byteOffset","_o")),a(b.prototype,{getInt8:function(t){return q(this,1,t)[0]<<24>>24},getUint8:function(t){return q(this,1,t)[0]},getInt16:function(t){var e=q(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=q(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return I(q(this,4,t,arguments[1]))},getUint32:function(t){return I(q(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return P(q(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return P(q(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){W(this,1,t,N,e)},setUint8:function(t,e){W(this,1,t,N,e)},setInt16:function(t,e){W(this,2,t,T,e,arguments[2])},setUint16:function(t,e){W(this,2,t,T,e,arguments[2])},setInt32:function(t,e){W(this,4,t,L,e,arguments[2])},setUint32:function(t,e){W(this,4,t,L,e,arguments[2])},setFloat32:function(t,e){W(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){W(this,8,t,U,e,arguments[2])}});y(m,"ArrayBuffer"),y(b,"DataView"),s(b.prototype,u.VIEW,!0),e.ArrayBuffer=m,e.DataView=b},function(t,e,n){"use strict";var r=n(15);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var u=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(o(e)+"="+o(t))})))})),i=u.join("&")}if(i){var s=t.indexOf("#");-1!==s&&(t=t.slice(0,s)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},function(t,e,n){"use strict";var r=n(15),o=n(361),i=n(101),u={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,c={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:("undefined"!=typeof XMLHttpRequest?a=n(362):"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process)&&(a=n(368)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)||e&&"application/json"===e["Content-Type"]?(s(e,"application/json"),function(t,e,n){if(r.isString(t))try{return(e||JSON.parse)(t),r.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(n||JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){var e=this.transitional,n=e&&e.silentJSONParsing,o=e&&e.forcedJSONParsing,u=!n&&"json"===this.responseType;if(u||o&&r.isString(t)&&t.length)try{return JSON.parse(t)}catch(t){if(u){if("SyntaxError"===t.name)throw i(t,this,"E_JSON_PARSE");throw t}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(u)})),t.exports=c},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,n){"use strict";var r=n(101);t.exports=function(t,e,n,o,i){var u=new Error(t);return r(u,e,n,o,i)}},function(t,e,n){t.exports=!n(7)&&!n(3)((function(){return 7!=Object.defineProperty(n(72)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(19),o=n(20),i=n(58)(!1),u=n(74)("IE_PROTO");t.exports=function(t,e){var n,s=o(t),a=0,c=[];for(n in s)n!=u&&r(s,n)&&c.push(n);for(;e.length>a;)r(s,n=e[a++])&&(~i(c,n)||c.push(n));return c}},function(t,e,n){var r=n(8),o=n(1),i=n(40);t.exports=n(7)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),s=u.length,a=0;s>a;)r.f(t,n=u[a++],e[n]);return t}},function(t,e,n){var r=n(20),o=n(43).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(7),o=n(40),i=n(59),u=n(55),s=n(9),a=n(54),c=Object.assign;t.exports=!c||n(3)((function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach((function(t){e[t]=t})),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r}))?function(t,e){for(var n=s(t),c=arguments.length,f=1,l=i.f,p=u.f;c>f;)for(var h,d=a(arguments[f++]),v=l?o(d).concat(l(d)):o(d),g=v.length,y=0;g>y;)h=v[y++],r&&!p.call(d,h)||(n[h]=d[h]);return n}:c},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(10),o=n(4),i=n(111),u=[].slice,s={},a=function(t,e,n){if(!(e in s)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=u.call(arguments,1),s=function(){var r=n.concat(u.call(arguments));return this instanceof s?a(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(2).parseInt,o=n(51).trim,i=n(78),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(u.test(n)?16:10))}:r},function(t,e,n){var r=n(2).parseFloat,o=n(51).trim;t.exports=1/r(n(78)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(25);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(81),o=Math.pow,i=o(2,-52),u=o(2,-23),s=o(2,127)*(2-u),a=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),c=r(t);return o<a?c*(o/a/u+1/i-1/i)*a*u:(n=(e=(1+u/i)*o)-(e-o))>s||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(1);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(10),o=n(9),i=n(54),u=n(6);t.exports=function(t,e,n,s,a){r(e);var c=o(t),f=i(c),l=u(c.length),p=a?l-1:0,h=a?-1:1;if(n<2)for(;;){if(p in f){s=f[p],p+=h;break}if(p+=h,a?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;a?p>=0:l>p;p+=h)p in f&&(s=e(s,f[p],p,c));return s}},function(t,e,n){"use strict";var r=n(9),o=n(41),i=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),u=i(n.length),s=o(t,u),a=o(e,u),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?u:o(c,u))-a,u-s),l=1;for(a<s&&s<a+f&&(l=-1,a+=f-1,s+=f-1);f-- >0;)a in n?n[s]=n[a]:delete n[s],s+=l,a+=l;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(93);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){n(7)&&"g"!=/./g.flags&&n(8).f(RegExp.prototype,"flags",{configurable:!0,get:n(56)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(1),o=n(4),i=n(97);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(127),o=n(48);t.exports=n(67)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(8).f,o=n(42),i=n(47),u=n(24),s=n(45),a=n(46),c=n(83),f=n(121),l=n(44),p=n(7),h=n(35).fastKey,d=n(48),v=p?"_s":"size",g=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var f=t((function(t,r){s(t,f,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&a(r,n,t[c],t)}));return i(f.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=g(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(d(this,e),t)}}),p&&r(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,n){var r,o,i=g(t,e);return i?i.v=n:(t._l=i={i:o=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,e,n){c(t,e,(function(t,n){this._t=d(t,e),this._k=n,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))}),n?"entries":"values",!n,!0),l(e)}}},function(t,e,n){"use strict";var r=n(127),o=n(48);t.exports=n(67)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,o=n(2),i=n(31)(0),u=n(17),s=n(35),a=n(108),c=n(130),f=n(4),l=n(48),p=n(48),h=!o.ActiveXObject&&"ActiveXObject"in o,d=s.getWeak,v=Object.isExtensible,g=c.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,"WeakMap"),t,e)}},b=t.exports=n(67)("WeakMap",y,m,c,!0,!0);p&&h&&(a((r=c.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,i(["delete","has","get","set"],(function(t){var e=b.prototype,n=e[t];u(e,t,(function(e,o){if(f(e)&&!v(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)}))})))},function(t,e,n){"use strict";var r=n(47),o=n(35).getWeak,i=n(1),u=n(4),s=n(45),a=n(46),c=n(31),f=n(19),l=n(48),p=c(5),h=c(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return p(t.a,(function(t){return t[0]===e}))};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var c=t((function(t,r){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=r&&a(r,n,t[i],t)}));return r(c.prototype,{delete:function(t){if(!u(t))return!1;var n=o(t);return!0===n?v(l(this,e)).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=o(t);return!0===n?v(l(this,e)).has(t):n&&f(n,this._i)}}),c},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){var r=n(26),o=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(43),o=n(59),i=n(1),u=n(2).Reflect;t.exports=u&&u.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(60),o=n(4),i=n(6),u=n(24),s=n(5)("isConcatSpreadable");t.exports=function t(e,n,a,c,f,l,p,h){for(var d,v,g=f,y=0,m=!!p&&u(p,h,3);y<c;){if(y in a){if(d=m?m(a[y],y,n):a[y],v=!1,o(d)&&(v=void 0!==(v=d[s])?!!v:r(d)),v&&l>0)g=t(e,n,d,i(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}y++}return g}},function(t,e,n){var r=n(6),o=n(80),i=n(29);t.exports=function(t,e,n,u){var s=String(i(t)),a=s.length,c=void 0===n?" ":String(n),f=r(e);if(f<=a||""==c)return s;var l=f-a,p=o.call(c,Math.ceil(l/c.length));return p.length>l&&(p=p.slice(0,l)),u?p+s:s+p}},function(t,e,n){var r=n(7),o=n(40),i=n(20),u=n(55).f;t.exports=function(t){return function(e){for(var n,s=i(e),a=o(s),c=a.length,f=0,l=[];c>f;)n=a[f++],r&&!u.call(s,n)||l.push(t?[n,s[n]]:s[n]);return l}}},function(t,e,n){var r=n(50),o=n(137);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(46);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(102);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";var r=n(364),o=n(365);t.exports=function(t,e){return t&&!r(e)?o(t,e):e}},function(t,e){t.exports=require("http")},function(t,e){t.exports=require("https")},function(t,e,n){var r=n(145),o=r.URL,i=n(142),u=n(143),s=n(369).Writable,a=n(370),c=n(371),f=["abort","aborted","connect","error","socket","timeout"],l=Object.create(null);f.forEach((function(t){l[t]=function(e,n,r){this._redirectable.emit(t,e,n,r)}}));var p=w("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),h=w("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),d=w("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),v=w("ERR_STREAM_WRITE_AFTER_END","write after end");function g(t,e){s.call(this),this._sanitizeOptions(t),this._options=t,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],e&&this.on("response",e);var n=this;this._onNativeResponse=function(t){n._processResponse(t)},this._performRequest()}function y(t){var e={maxRedirects:21,maxBodyLength:10485760},n={};return Object.keys(t).forEach((function(i){var u=i+":",s=n[u]=t[i],f=e[i]=Object.create(s);Object.defineProperties(f,{request:{value:function(t,i,s){if("string"==typeof t){var f=t;try{t=b(new o(f))}catch(e){t=r.parse(f)}}else o&&t instanceof o?t=b(t):(s=i,i=t,t={protocol:u});return"function"==typeof i&&(s=i,i=null),(i=Object.assign({maxRedirects:e.maxRedirects,maxBodyLength:e.maxBodyLength},t,i)).nativeProtocols=n,a.equal(i.protocol,u,"protocol mismatch"),c("options",i),new g(i,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(t,e,n){var r=f.request(t,e,n);return r.end(),r},configurable:!0,enumerable:!0,writable:!0}})})),e}function m(){}function b(t){var e={protocol:t.protocol,hostname:t.hostname.startsWith("[")?t.hostname.slice(1,-1):t.hostname,hash:t.hash,search:t.search,pathname:t.pathname,path:t.pathname+t.search,href:t.href};return""!==t.port&&(e.port=Number(t.port)),e}function x(t,e){var n;for(var r in e)t.test(r)&&(n=e[r],delete e[r]);return null==n?void 0:String(n).trim()}function w(t,e){function n(t){Error.captureStackTrace(this,this.constructor),t?(this.message=e+": "+t.message,this.cause=t):this.message=e}return n.prototype=new Error,n.prototype.constructor=n,n.prototype.name="Error ["+t+"]",n.prototype.code=t,n}function _(t){for(var e=0;e<f.length;e++)t.removeListener(f[e],l[f[e]]);t.on("error",m),t.abort()}g.prototype=Object.create(s.prototype),g.prototype.abort=function(){_(this._currentRequest),this.emit("abort")},g.prototype.write=function(t,e,n){if(this._ending)throw new v;if(!("string"==typeof t||"object"==typeof t&&"length"in t))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof e&&(n=e,e=null),0!==t.length?this._requestBodyLength+t.length<=this._options.maxBodyLength?(this._requestBodyLength+=t.length,this._requestBodyBuffers.push({data:t,encoding:e}),this._currentRequest.write(t,e,n)):(this.emit("error",new d),this.abort()):n&&n()},g.prototype.end=function(t,e,n){if("function"==typeof t?(n=t,t=e=null):"function"==typeof e&&(n=e,e=null),t){var r=this,o=this._currentRequest;this.write(t,e,(function(){r._ended=!0,o.end(null,null,n)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,n)},g.prototype.setHeader=function(t,e){this._options.headers[t]=e,this._currentRequest.setHeader(t,e)},g.prototype.removeHeader=function(t){delete this._options.headers[t],this._currentRequest.removeHeader(t)},g.prototype.setTimeout=function(t,e){var n=this;function r(e){e.setTimeout(t),e.removeListener("timeout",e.destroy),e.addListener("timeout",e.destroy)}function o(e){n._timeout&&clearTimeout(n._timeout),n._timeout=setTimeout((function(){n.emit("timeout"),i()}),t),r(e)}function i(){n._timeout&&(clearTimeout(n._timeout),n._timeout=null),n.removeListener("abort",i),n.removeListener("error",i),n.removeListener("response",i),e&&n.removeListener("timeout",e),n.socket||n._currentRequest.removeListener("socket",o)}return e&&this.on("timeout",e),this.socket?o(this.socket):this._currentRequest.once("socket",o),this.on("socket",r),this.on("abort",i),this.on("error",i),this.on("response",i),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(t){g.prototype[t]=function(e,n){return this._currentRequest[t](e,n)}})),["aborted","connection","socket"].forEach((function(t){Object.defineProperty(g.prototype,t,{get:function(){return this._currentRequest[t]}})})),g.prototype._sanitizeOptions=function(t){if(t.headers||(t.headers={}),t.host&&(t.hostname||(t.hostname=t.host),delete t.host),!t.pathname&&t.path){var e=t.path.indexOf("?");e<0?t.pathname=t.path:(t.pathname=t.path.substring(0,e),t.search=t.path.substring(e))}},g.prototype._performRequest=function(){var t=this._options.protocol,e=this._options.nativeProtocols[t];if(e){if(this._options.agents){var n=t.substr(0,t.length-1);this._options.agent=this._options.agents[n]}var o=this._currentRequest=e.request(this._options,this._onNativeResponse);this._currentUrl=r.format(this._options),o._redirectable=this;for(var i=0;i<f.length;i++)o.on(f[i],l[f[i]]);if(this._isRedirect){var u=0,s=this,a=this._requestBodyBuffers;!function t(e){if(o===s._currentRequest)if(e)s.emit("error",e);else if(u<a.length){var n=a[u++];o.finished||o.write(n.data,n.encoding,t)}else s._ended&&o.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+t))},g.prototype._processResponse=function(t){var e=t.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:t.headers,statusCode:e});var n=t.headers.location;if(!n||!1===this._options.followRedirects||e<300||e>=400)return t.responseUrl=this._currentUrl,t.redirects=this._redirects,this.emit("response",t),void(this._requestBodyBuffers=[]);if(_(this._currentRequest),t.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new h);else{((301===e||302===e)&&"POST"===this._options.method||303===e&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],x(/^content-/i,this._options.headers));var o,i=x(/^host$/i,this._options.headers),u=r.parse(this._currentUrl),s=i||u.host,a=/^\w+:/.test(n)?this._currentUrl:r.format(Object.assign(u,{host:s}));try{o=r.resolve(a,n)}catch(t){return void this.emit("error",new p(t))}c("redirecting to",o),this._isRedirect=!0;var f=r.parse(o);if(Object.assign(this._options,f),(f.protocol!==u.protocol&&"https:"!==f.protocol||f.host!==s&&!function(t,e){const n=t.length-e.length-1;return n>0&&"."===t[n]&&t.endsWith(e)}(f.host,s))&&x(/^(?:authorization|cookie)$/i,this._options.headers),"function"==typeof this._options.beforeRedirect){var l={headers:t.headers};try{this._options.beforeRedirect.call(null,this._options,l)}catch(t){return void this.emit("error",t)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(t){this.emit("error",new p(t))}}},t.exports=y({http:i,https:u}),t.exports.wrap=y},function(t,e){t.exports=require("url")},function(t,e,n){t.exports=function(t){function e(t){let n,o,i,u=null;function s(...t){if(!s.enabled)return;const r=s,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let u=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return"%";u++;const i=e.formatters[o];if("function"==typeof i){const e=t[u];n=i.call(r,e),t.splice(u,1),u--}return n}),e.formatArgs.call(r,t);(r.log||e.log).apply(r,t)}return s.namespace=t,s.useColors=e.useColors(),s.color=e.selectColor(t),s.extend=r,s.destroy=e.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==u?u:(o!==e.namespaces&&(o=e.namespaces,i=e.enabled(t)),i),set:t=>{u=t}}),"function"==typeof e.init&&e.init(s),s}function r(t,n){const r=e(this.namespace+(void 0===n?":":n)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},e.disable=function(){const t=[...e.names.map(o),...e.skips.map(o).map(t=>"-"+t)].join(",");return e.enable(""),t},e.enable=function(t){let n;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(374),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach(n=>{e[n]=t[n]}),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let n=0;for(let e=0;e<t.length;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;return e.colors[Math.abs(n)%e.colors.length]},e.enable(e.load()),e}},function(t){t.exports=JSON.parse('{"_args":[["axios@0.21.4","/Users/iotric/Work/storx-storage-sdk-fork"]],"_from":"axios@0.21.4","_id":"axios@0.21.4","_inBundle":false,"_integrity":"sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==","_location":"/axios","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"axios@0.21.4","name":"axios","escapedName":"axios","rawSpec":"0.21.4","saveSpec":null,"fetchSpec":"0.21.4"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/axios/-/axios-0.21.4.tgz","_spec":"0.21.4","_where":"/Users/iotric/Work/storx-storage-sdk-fork","author":{"name":"Matt Zabriskie"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"bugs":{"url":"https://github.com/axios/axios/issues"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}],"dependencies":{"follow-redirects":"^1.14.0"},"description":"Promise based HTTP client for the browser and node.js","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"homepage":"https://axios-http.com","jsdelivr":"dist/axios.min.js","keywords":["xhr","http","ajax","promise","node"],"license":"MIT","main":"index.js","name":"axios","repository":{"type":"git","url":"git+https://github.com/axios/axios.git"},"scripts":{"build":"NODE_ENV=production grunt build","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","examples":"node ./examples/server.js","fix":"eslint --fix lib/**/*.js","postversion":"git push && git push --tags","preversion":"npm test","start":"node ./sandbox/server.js","test":"grunt test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"},"typings":"./index.d.ts","unpkg":"dist/axios.min.js","version":"0.21.4"}')},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){e=e||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],u=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function a(t,e){return r.isPlainObject(t)&&r.isPlainObject(e)?r.merge(t,e):r.isPlainObject(e)?r.merge({},e):r.isArray(e)?e.slice():e}function c(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=a(void 0,t[o])):n[o]=a(t[o],e[o])}r.forEach(o,(function(t){r.isUndefined(e[t])||(n[t]=a(void 0,e[t]))})),r.forEach(i,c),r.forEach(u,(function(o){r.isUndefined(e[o])?r.isUndefined(t[o])||(n[o]=a(void 0,t[o])):n[o]=a(void 0,e[o])})),r.forEach(s,(function(r){r in e?n[r]=a(t[r],e[r]):r in t&&(n[r]=a(void 0,t[r]))}));var f=o.concat(i).concat(u).concat(s),l=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===f.indexOf(t)}));return r.forEach(l,c),n}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){n(152),t.exports=n(354)},function(t,e,n){"use strict";if(n(153),n(350),n(351),global._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");global._babelPolyfill=!0;function r(t,e,n){t[e]||Object.defineProperty(t,e,{writable:!0,configurable:!0,value:n})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(t){[][t]&&r(Array,t,Function.call.bind([][t]))}))},function(t,e,n){n(154),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(234),n(235),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(92),n(258),n(122),n(259),n(123),n(260),n(261),n(262),n(263),n(264),n(126),n(128),n(129),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),t.exports=n(23)},function(t,e,n){"use strict";var r=n(2),o=n(19),i=n(7),u=n(0),s=n(17),a=n(35).KEY,c=n(3),f=n(53),l=n(49),p=n(39),h=n(5),d=n(104),v=n(73),g=n(156),y=n(60),m=n(1),b=n(4),x=n(9),w=n(20),_=n(28),S=n(38),E=n(42),O=n(107),F=n(21),C=n(59),j=n(8),A=n(40),M=F.f,R=j.f,k=O.f,P=r.Symbol,I=r.JSON,N=I&&I.stringify,T=h("_hidden"),L=h("toPrimitive"),U={}.propertyIsEnumerable,B=f("symbol-registry"),D=f("symbols"),q=f("op-symbols"),W=Object.prototype,G="function"==typeof P&&!!C.f,V=r.QObject,z=!V||!V.prototype||!V.prototype.findChild,K=i&&c((function(){return 7!=E(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=M(W,e);r&&delete W[e],R(t,e,n),r&&t!==W&&R(W,e,r)}:R,$=function(t){var e=D[t]=E(P.prototype);return e._k=t,e},H=G&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},J=function(t,e,n){return t===W&&J(q,e,n),m(t),e=_(e,!0),m(n),o(D,e)?(n.enumerable?(o(t,T)&&t[T][e]&&(t[T][e]=!1),n=E(n,{enumerable:S(0,!1)})):(o(t,T)||R(t,T,S(1,{})),t[T][e]=!0),K(t,e,n)):R(t,e,n)},Y=function(t,e){m(t);for(var n,r=g(e=w(e)),o=0,i=r.length;i>o;)J(t,n=r[o++],e[n]);return t},X=function(t){var e=U.call(this,t=_(t,!0));return!(this===W&&o(D,t)&&!o(q,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,T)&&this[T][t])||e)},Z=function(t,e){if(t=w(t),e=_(e,!0),t!==W||!o(D,e)||o(q,e)){var n=M(t,e);return!n||!o(D,e)||o(t,T)&&t[T][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=k(w(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==T||e==a||r.push(e);return r},tt=function(t){for(var e,n=t===W,r=k(n?q:w(t)),i=[],u=0;r.length>u;)!o(D,e=r[u++])||n&&!o(W,e)||i.push(D[e]);return i};G||(s((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===W&&e.call(q,n),o(this,T)&&o(this[T],t)&&(this[T][t]=!1),K(this,t,S(1,n))};return i&&z&&K(W,t,{configurable:!0,set:e}),$(t)}).prototype,"toString",(function(){return this._k})),F.f=Z,j.f=J,n(43).f=O.f=Q,n(55).f=X,C.f=tt,i&&!n(34)&&s(W,"propertyIsEnumerable",X,!0),d.f=function(t){return $(h(t))}),u(u.G+u.W+u.F*!G,{Symbol:P});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)h(et[nt++]);for(var rt=A(h.store),ot=0;rt.length>ot;)v(rt[ot++]);u(u.S+u.F*!G,"Symbol",{for:function(t){return o(B,t+="")?B[t]:B[t]=P(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in B)if(B[e]===t)return e},useSetter:function(){z=!0},useSimple:function(){z=!1}}),u(u.S+u.F*!G,"Object",{create:function(t,e){return void 0===e?E(t):Y(E(t),e)},defineProperty:J,defineProperties:Y,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=c((function(){C.f(1)}));u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return C.f(x(t))}}),I&&u(u.S+u.F*(!G||c((function(){var t=P();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,N.apply(I,r)}}),P.prototype[L]||n(16)(P.prototype,L,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(53)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(40),o=n(59),i=n(55);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,s=n(t),a=i.f,c=0;s.length>c;)a.call(t,u=s[c++])&&e.push(u);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(42)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperty:n(8).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperties:n(106)})},function(t,e,n){var r=n(20),o=n(21).f;n(30)("getOwnPropertyDescriptor",(function(){return function(t,e){return o(r(t),e)}}))},function(t,e,n){var r=n(9),o=n(22);n(30)("getPrototypeOf",(function(){return function(t){return o(r(t))}}))},function(t,e,n){var r=n(9),o=n(40);n(30)("keys",(function(){return function(t){return o(r(t))}}))},function(t,e,n){n(30)("getOwnPropertyNames",(function(){return n(107).f}))},function(t,e,n){var r=n(4),o=n(35).onFreeze;n(30)("freeze",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4),o=n(35).onFreeze;n(30)("seal",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4),o=n(35).onFreeze;n(30)("preventExtensions",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4);n(30)("isFrozen",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},function(t,e,n){var r=n(4);n(30)("isSealed",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},function(t,e,n){var r=n(4);n(30)("isExtensible",(function(t){return function(e){return!!r(e)&&(!t||t(e))}}))},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(108)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(109)})},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(77).set})},function(t,e,n){"use strict";var r=n(50),o={};o[n(5)("toStringTag")]="z",o+""!="[object z]"&&n(17)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(110)})},function(t,e,n){var r=n(8).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(7)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),o=n(22),i=n(5)("hasInstance"),u=Function.prototype;i in u||n(8).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),o=n(112);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){var r=n(0),o=n(113);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){"use strict";var r=n(2),o=n(19),i=n(25),u=n(79),s=n(28),a=n(3),c=n(43).f,f=n(21).f,l=n(8).f,p=n(51).trim,h=r.Number,d=h,v=h.prototype,g="Number"==i(n(42)(v)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=y?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var u,a=e.slice(2),c=0,f=a.length;c<f;c++)if((u=a.charCodeAt(c))<48||u>o)return NaN;return parseInt(a,r)}}return+e};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof h&&(g?a((function(){v.valueOf.call(n)})):"Number"!=i(n))?u(new d(m(e)),n,h):m(e)};for(var b,x=n(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;x.length>w;w++)o(d,b=x[w])&&!o(h,b)&&l(h,b,f(d,b));h.prototype=v,v.constructor=h,n(17)(r,"Number",h)}},function(t,e,n){"use strict";var r=n(0),o=n(26),i=n(114),u=n(80),s=1..toFixed,a=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=a(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=a(n/t),n=n%t*1e7},h=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+u.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)((function(){s.call({})}))),"Number",{toFixed:function(t){var e,n,r,s,a=i(this,f),c=o(t),v="",g="0";if(c<0||c>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(v="-",a=-a),a>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(a*d(2,69,1))-69)<0?a*d(2,-e,1):a/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(l(0,n),r=c;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),l(1,1),p(2),g=h()}else l(0,n),l(1<<-e,0),g=h()+u.call("0",c);return g=c>0?v+((s=g.length)<=c?"0."+u.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=n(114),u=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==u.call(1,void 0)}))||!o((function(){u.call({})}))),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(e):u.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(115)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),o=n(115),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),o=n(113);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0),o=n(112);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(116),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=n(81);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0),o=n(82);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(117)})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,u=0,s=arguments.length,a=0;u<s;)a<(n=o(arguments[u++]))?(i=i*(r=a/n)*r+1,a=n):i+=n>0?(r=n/a)*r:n;return a===1/0?1/0:a*Math.sqrt(i)}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(116)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(81)})},function(t,e,n){var r=n(0),o=n(82),i=Math.exp;r(r.S+r.F*n(3)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),o=n(82),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(41),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,u=0;r>u;){if(e=+arguments[u++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),o=n(20),i=n(6);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,u=[],s=0;n>s;)u.push(String(e[s++])),s<r&&u.push(String(arguments[s]));return u.join("")}})},function(t,e,n){"use strict";n(51)("trim",(function(t){return function(){return t(this,3)}}))},function(t,e,n){"use strict";var r=n(61)(!0);n(83)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},function(t,e,n){"use strict";var r=n(0),o=n(61)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(85),u="".endsWith;r(r.P+r.F*n(86)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),s=void 0===n?r:Math.min(o(n),r),a=String(t);return u?u.call(e,a,s):e.slice(s-a.length,s)===a}})},function(t,e,n){"use strict";var r=n(0),o=n(85);r(r.P+r.F*n(86)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(80)})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(85),u="".startsWith;r(r.P+r.F*n(86)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return u?u.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(18)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},function(t,e,n){"use strict";n(18)("big",(function(t){return function(){return t(this,"big","","")}}))},function(t,e,n){"use strict";n(18)("blink",(function(t){return function(){return t(this,"blink","","")}}))},function(t,e,n){"use strict";n(18)("bold",(function(t){return function(){return t(this,"b","","")}}))},function(t,e,n){"use strict";n(18)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},function(t,e,n){"use strict";n(18)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},function(t,e,n){"use strict";n(18)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},function(t,e,n){"use strict";n(18)("italics",(function(t){return function(){return t(this,"i","","")}}))},function(t,e,n){"use strict";n(18)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},function(t,e,n){"use strict";n(18)("small",(function(t){return function(){return t(this,"small","","")}}))},function(t,e,n){"use strict";n(18)("strike",(function(t){return function(){return t(this,"strike","","")}}))},function(t,e,n){"use strict";n(18)("sub",(function(t){return function(){return t(this,"sub","","")}}))},function(t,e,n){"use strict";n(18)("sup",(function(t){return function(){return t(this,"sup","","")}}))},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28);r(r.P+r.F*n(3)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),o=n(233);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:i},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(17)(r,"toString",(function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"}))},function(t,e,n){var r=n(5)("toPrimitive"),o=Date.prototype;r in o||n(16)(o,r,n(236))},function(t,e,n){"use strict";var r=n(1),o=n(28);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(60)})},function(t,e,n){"use strict";var r=n(24),o=n(0),i=n(9),u=n(118),s=n(87),a=n(6),c=n(88),f=n(89);o(o.S+o.F*!n(63)((function(t){Array.from(t)})),"Array",{from:function(t){var e,n,o,l,p=i(t),h="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(p);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==m||h==Array&&s(m))for(n=new h(e=a(p.length));e>y;y++)c(n,y,g?v(p[y],y):p[y]);else for(l=m.call(p),n=new h;!(o=l.next()).done;y++)c(n,y,g?u(l,v,[o.value,y],!0):o.value);return n.length=y,n}})},function(t,e,n){"use strict";var r=n(0),o=n(88);r(r.S+r.F*n(3)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),o=n(20),i=[].join;r(r.P+r.F*(n(54)!=Object||!n(27)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(76),i=n(25),u=n(41),s=n(6),a=[].slice;r(r.P+r.F*n(3)((function(){o&&a.call(o)})),"Array",{slice:function(t,e){var n=s(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return a.call(this,t,e);for(var o=u(t,n),c=u(e,n),f=s(c-o),l=new Array(f),p=0;p<f;p++)l[p]="String"==r?this.charAt(o+p):this[o+p];return l}})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(9),u=n(3),s=[].sort,a=[1,2,3];r(r.P+r.F*(u((function(){a.sort(void 0)}))||!u((function(){a.sort(null)}))||!n(27)(s)),"Array",{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(31)(0),i=n(27)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(4),o=n(60),i=n(5)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(31)(1);r(r.P+r.F*!n(27)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(31)(2);r(r.P+r.F*!n(27)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(31)(3);r(r.P+r.F*!n(27)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(31)(4);r(r.P+r.F*!n(27)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(119);r(r.P+r.F*!n(27)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(119);r(r.P+r.F*!n(27)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(58)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(27)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(20),i=n(26),u=n(6),s=[].lastIndexOf,a=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!n(27)(s)),"Array",{lastIndexOf:function(t){if(a)return s.apply(this,arguments)||0;var e=o(this),n=u(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(120)}),n(36)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(91)}),n(36)("fill")},function(t,e,n){"use strict";var r=n(0),o=n(31)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)("find")},function(t,e,n){"use strict";var r=n(0),o=n(31)(6),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)(i)},function(t,e,n){n(44)("Array")},function(t,e,n){var r=n(2),o=n(79),i=n(8).f,u=n(43).f,s=n(62),a=n(56),c=r.RegExp,f=c,l=c.prototype,p=/a/g,h=/a/g,d=new c(p)!==p;if(n(7)&&(!d||n(3)((function(){return h[n(5)("match")]=!1,c(p)!=p||c(h)==h||"/a/i"!=c(p,"i")})))){c=function(t,e){var n=this instanceof c,r=s(t),i=void 0===e;return!n&&r&&t.constructor===c&&i?t:o(d?new f(r&&!i?t.source:t,e):f((r=t instanceof c)?t.source:t,r&&i?a.call(t):e),n?this:l,c)};for(var v=function(t){t in c||i(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=u(f),y=0;g.length>y;)v(g[y++]);l.constructor=c,c.prototype=l,n(17)(r,"RegExp",c)}n(44)("RegExp")},function(t,e,n){"use strict";n(123);var r=n(1),o=n(56),i=n(7),u=/./.toString,s=function(t){n(17)(RegExp.prototype,"toString",t,!0)};n(3)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?s((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&s((function(){return u.call(this)}))},function(t,e,n){"use strict";var r=n(1),o=n(6),i=n(94),u=n(64);n(65)("match",1,(function(t,e,n,s){return[function(n){var r=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=s(n,t,this);if(e.done)return e.value;var a=r(t),c=String(this);if(!a.global)return u(a,c);var f=a.unicode;a.lastIndex=0;for(var l,p=[],h=0;null!==(l=u(a,c));){var d=String(l[0]);p[h]=d,""===d&&(a.lastIndex=i(c,o(a.lastIndex),f)),h++}return 0===h?null:p}]}))},function(t,e,n){"use strict";var r=n(1),o=n(9),i=n(6),u=n(26),s=n(94),a=n(64),c=Math.max,f=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;n(65)("replace",2,(function(t,e,n,d){return[function(r,o){var i=t(this),u=null==r?void 0:r[e];return void 0!==u?u.call(r,i,o):n.call(String(i),r,o)},function(t,e){var o=d(n,t,this,e);if(o.done)return o.value;var l=r(t),p=String(this),h="function"==typeof e;h||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=a(l,p);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=s(p,i(l.lastIndex),y))}for(var x,w="",_=0,S=0;S<m.length;S++){b=m[S];for(var E=String(b[0]),O=c(f(u(b.index),p.length),0),F=[],C=1;C<b.length;C++)F.push(void 0===(x=b[C])?x:String(x));var j=b.groups;if(h){var A=[E].concat(F,O,p);void 0!==j&&A.push(j);var M=String(e.apply(void 0,A))}else M=v(E,p,O,F,j,e);O>=_&&(w+=p.slice(_,O)+M,_=O+E.length)}return w+p.slice(_)}];function v(t,e,r,i,u,s){var a=r+t.length,c=i.length,f=h;return void 0!==u&&(u=o(u),f=p),n.call(s,f,(function(n,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(a);case"<":s=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return n;if(f>c){var p=l(f/10);return 0===p?n:p<=c?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):n}s=i[f-1]}return void 0===s?"":s}))}}))},function(t,e,n){"use strict";var r=n(1),o=n(109),i=n(64);n(65)("search",1,(function(t,e,n,u){return[function(n){var r=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=u(n,t,this);if(e.done)return e.value;var s=r(t),a=String(this),c=s.lastIndex;o(c,0)||(s.lastIndex=0);var f=i(s,a);return o(s.lastIndex,c)||(s.lastIndex=c),null===f?-1:f.index}]}))},function(t,e,n){"use strict";var r=n(62),o=n(1),i=n(57),u=n(94),s=n(6),a=n(64),c=n(93),f=n(3),l=Math.min,p=[].push,h="length",d=!f((function(){RegExp(4294967295,"y")}));n(65)("split",2,(function(t,e,n,f){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[h]||2!="ab".split(/(?:ab)*/)[h]||4!=".".split(/(.?)(.?)/)[h]||".".split(/()()/)[h]>1||"".split(/.?/)[h]?function(t,e){var o=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(o,t,e);for(var i,u,s,a=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,d=void 0===e?4294967295:e>>>0,v=new RegExp(t.source,f+"g");(i=c.call(v,o))&&!((u=v.lastIndex)>l&&(a.push(o.slice(l,i.index)),i[h]>1&&i.index<o[h]&&p.apply(a,i.slice(1)),s=i[0][h],l=u,a[h]>=d));)v.lastIndex===i.index&&v.lastIndex++;return l===o[h]?!s&&v.test("")||a.push(""):a.push(o.slice(l)),a[h]>d?a.slice(0,d):a}:"0".split(void 0,0)[h]?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var o=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,o,r):v.call(String(o),n,r)},function(t,e){var r=f(v,t,this,e,v!==n);if(r.done)return r.value;var c=o(t),p=String(this),h=i(c,RegExp),g=c.unicode,y=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(d?"y":"g"),m=new h(d?c:"^(?:"+c.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===p.length)return null===a(m,p)?[p]:[];for(var x=0,w=0,_=[];w<p.length;){m.lastIndex=d?w:0;var S,E=a(m,d?p:p.slice(w));if(null===E||(S=l(s(m.lastIndex+(d?0:w)),p.length))===x)w=u(p,w,g);else{if(_.push(p.slice(x,w)),_.length===b)return _;for(var O=1;O<=E.length-1;O++)if(_.push(E[O]),_.length===b)return _;w=x=S}}return _.push(p.slice(x)),_}]}))},function(t,e,n){"use strict";var r,o,i,u,s=n(34),a=n(2),c=n(24),f=n(50),l=n(0),p=n(4),h=n(10),d=n(45),v=n(46),g=n(57),y=n(95).set,m=n(96)(),b=n(97),x=n(124),w=n(66),_=n(125),S=a.TypeError,E=a.process,O=E&&E.versions,F=O&&O.v8||"",C=a.Promise,j="process"==f(E),A=function(){},M=o=b.f,R=!!function(){try{var t=C.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(A,A)};return(j||"function"==typeof PromiseRejectionEvent)&&t.then(A)instanceof e&&0!==F.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),k=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},P=function(t,e){if(!t._n){t._n=!0;var n=t._c;m((function(){for(var r=t._v,o=1==t._s,i=0,u=function(e){var n,i,u,s=o?e.ok:e.fail,a=e.resolve,c=e.reject,f=e.domain;try{s?(o||(2==t._h&&T(t),t._h=1),!0===s?n=r:(f&&f.enter(),n=s(r),f&&(f.exit(),u=!0)),n===e.promise?c(S("Promise-chain cycle")):(i=k(n))?i.call(n,a,c):a(n)):c(r)}catch(t){f&&!u&&f.exit(),c(t)}};n.length>i;)u(n[i++]);t._c=[],t._n=!1,e&&!t._h&&I(t)}))}},I=function(t){y.call(a,(function(){var e,n,r,o=t._v,i=N(t);if(i&&(e=x((function(){j?E.emit("unhandledRejection",o,t):(n=a.onunhandledrejection)?n({promise:t,reason:o}):(r=a.console)&&r.error&&r.error("Unhandled promise rejection",o)})),t._h=j||N(t)?2:1),t._a=void 0,i&&e.e)throw e.v}))},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},T=function(t){y.call(a,(function(){var e;j?E.emit("rejectionHandled",t):(e=a.onrejectionhandled)&&e({promise:t,reason:t._v})}))},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),P(e,!0))},U=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw S("Promise can't be resolved itself");(e=k(t))?m((function(){var r={_w:n,_d:!1};try{e.call(t,c(U,r,1),c(L,r,1))}catch(t){L.call(r,t)}})):(n._v=t,n._s=1,P(n,!1))}catch(t){L.call({_w:n,_d:!1},t)}}};R||(C=function(t){d(this,C,"Promise","_h"),h(t),r.call(this);try{t(c(U,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(47)(C.prototype,{then:function(t,e){var n=M(g(this,C));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=j?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&P(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=c(U,t,1),this.reject=c(L,t,1)},b.f=M=function(t){return t===C||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!R,{Promise:C}),n(49)(C,"Promise"),n(44)("Promise"),u=n(23).Promise,l(l.S+l.F*!R,"Promise",{reject:function(t){var e=M(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!R),"Promise",{resolve:function(t){return _(s&&this===u?C:this,t)}}),l(l.S+l.F*!(R&&n(63)((function(t){C.all(t).catch(A)}))),"Promise",{all:function(t){var e=this,n=M(e),r=n.resolve,o=n.reject,i=x((function(){var n=[],i=0,u=1;v(t,!1,(function(t){var s=i++,a=!1;n.push(void 0),u++,e.resolve(t).then((function(t){a||(a=!0,n[s]=t,--u||r(n))}),o)})),--u||r(n)}));return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=M(e),r=n.reject,o=x((function(){v(t,!1,(function(t){e.resolve(t).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},function(t,e,n){"use strict";var r=n(130),o=n(48);n(67)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),o=n(68),i=n(98),u=n(1),s=n(41),a=n(6),c=n(4),f=n(2).ArrayBuffer,l=n(57),p=i.ArrayBuffer,h=i.DataView,d=o.ABV&&f.isView,v=p.prototype.slice,g=o.VIEW;r(r.G+r.W+r.F*(f!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&g in t}}),r(r.P+r.U+r.F*n(3)((function(){return!new p(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(u(this),t);for(var n=u(this).byteLength,r=s(t,n),o=s(void 0===e?n:e,n),i=new(l(this,p))(a(o-r)),c=new h(this),f=new h(i),d=0;r<o;)f.setUint8(d++,c.getUint8(r++));return i}}),n(44)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(68).ABV,{DataView:n(98).DataView})},function(t,e,n){n(32)("Int8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},function(t,e,n){n(32)("Int16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Uint16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Int32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Uint32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Float32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(32)("Float64",8,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){var r=n(0),o=n(10),i=n(1),u=(n(2).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(3)((function(){u((function(){}))})),"Reflect",{apply:function(t,e,n){var r=o(t),a=i(n);return u?u(r,e,a):s.call(r,e,a)}})},function(t,e,n){var r=n(0),o=n(42),i=n(10),u=n(1),s=n(4),a=n(3),c=n(110),f=(n(2).Reflect||{}).construct,l=a((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),p=!a((function(){f((function(){}))}));r(r.S+r.F*(l||p),"Reflect",{construct:function(t,e){i(t),u(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!l)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var a=n.prototype,h=o(s(a)?a:Object.prototype),d=Function.apply.call(t,h,e);return s(d)?d:h}})},function(t,e,n){var r=n(8),o=n(0),i=n(1),u=n(28);o(o.S+o.F*n(3)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,n){i(t),e=u(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(21).f,i=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),o=n(1),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(84)(i,"Object",(function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}})),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(21),o=n(22),i=n(19),u=n(0),s=n(4),a=n(1);u(u.S,"Reflect",{get:function t(e,n){var u,c,f=arguments.length<3?e:arguments[2];return a(e)===f?e[n]:(u=r.f(e,n))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:s(c=o(e))?t(c,n,f):void 0}})},function(t,e,n){var r=n(21),o=n(0),i=n(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(0),o=n(22),i=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(132)})},function(t,e,n){var r=n(0),o=n(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(8),o=n(21),i=n(22),u=n(19),s=n(0),a=n(38),c=n(1),f=n(4);s(s.S,"Reflect",{set:function t(e,n,s){var l,p,h=arguments.length<4?e:arguments[3],d=o.f(c(e),n);if(!d){if(f(p=i(e)))return t(p,n,s,h);d=a(0)}if(u(d,"value")){if(!1===d.writable||!f(h))return!1;if(l=o.f(h,n)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,r.f(h,n,l)}else r.f(h,n,a(0,s));return!0}return void 0!==d.set&&(d.set.call(h,s),!0)}})},function(t,e,n){var r=n(0),o=n(77);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){"use strict";var r=n(0),o=n(58)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(36)("includes")},function(t,e,n){"use strict";var r=n(0),o=n(133),i=n(9),u=n(6),s=n(10),a=n(90);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return s(t),e=u(r.length),n=a(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(36)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(133),i=n(9),u=n(6),s=n(26),a=n(90);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=u(e.length),r=a(e,0);return o(r,e,e,n,0,void 0===t?1:s(t)),r}}),n(36)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(61)(!0),i=n(3)((function(){return"𠮷"!=="𠮷".at(0)}));r(r.P+r.F*i,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(134),i=n(66),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(134),i=n(66),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";n(51)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},function(t,e,n){"use strict";n(51)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},function(t,e,n){"use strict";var r=n(0),o=n(29),i=n(6),u=n(62),s=n(56),a=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};n(84)(c,"RegExp String",(function(){var t=this._r.exec(this._s);return{value:t,done:null===t}})),r(r.P,"String",{matchAll:function(t){if(o(this),!u(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in a?String(t.flags):s.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new c(r,e)}})},function(t,e,n){n(73)("asyncIterator")},function(t,e,n){n(73)("observable")},function(t,e,n){var r=n(0),o=n(132),i=n(20),u=n(21),s=n(88);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),a=u.f,c=o(r),f={},l=0;c.length>l;)void 0!==(n=a(r,e=c[l++]))&&s(f,e,n);return f}})},function(t,e,n){var r=n(0),o=n(135)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(135)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),u=n(8);n(7)&&r(r.P+n(69),"Object",{__defineGetter__:function(t,e){u.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),u=n(8);n(7)&&r(r.P+n(69),"Object",{__defineSetter__:function(t,e){u.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28),u=n(22),s=n(21).f;n(7)&&r(r.P+n(69),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=s(n,r))return e.get}while(n=u(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28),u=n(22),s=n(21).f;n(7)&&r(r.P+n(69),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=s(n,r))return e.set}while(n=u(n))}})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(136)("Map")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(136)("Set")})},function(t,e,n){n(70)("Map")},function(t,e,n){n(70)("Set")},function(t,e,n){n(70)("WeakMap")},function(t,e,n){n(70)("WeakSet")},function(t,e,n){n(71)("Map")},function(t,e,n){n(71)("Set")},function(t,e,n){n(71)("WeakMap")},function(t,e,n){n(71)("WeakSet")},function(t,e,n){var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){var r=n(0),o=n(25);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0),o=n(138),i=n(117);r(r.S,"Math",{fscale:function(t,e,n,r,u){return i(o(t,e,n,r,u))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,u=n>>16,s=r>>16,a=(u*i>>>0)+(o*i>>>16);return u*s+(a>>16)+((o*s>>>0)+(65535&a)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(138)})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,u=n>>>16,s=r>>>16,a=(u*i>>>0)+(o*i>>>16);return u*s+(a>>>16)+((o*s>>>0)+(65535&a)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){"use strict";var r=n(0),o=n(23),i=n(2),u=n(57),s=n(125);r(r.P+r.R,"Promise",{finally:function(t){var e=u(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then((function(){return n}))}:t,n?function(n){return s(e,t()).then((function(){throw n}))}:t)}})},function(t,e,n){"use strict";var r=n(0),o=n(97),i=n(124);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){var r=n(33),o=n(1),i=r.key,u=r.set;r.exp({defineMetadata:function(t,e,n,r){u(t,e,o(n),i(r))}})},function(t,e,n){var r=n(33),o=n(1),i=r.key,u=r.map,s=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=u(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var a=s.get(e);return a.delete(n),!!a.size||s.delete(e)}})},function(t,e,n){var r=n(33),o=n(1),i=n(22),u=r.has,s=r.get,a=r.key,c=function(t,e,n){if(u(t,e,n))return s(t,e,n);var r=i(e);return null!==r?c(t,r,n):void 0};r.exp({getMetadata:function(t,e){return c(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(128),o=n(137),i=n(33),u=n(1),s=n(22),a=i.keys,c=i.key,f=function(t,e){var n=a(t,e),i=s(t);if(null===i)return n;var u=f(i,e);return u.length?n.length?o(new r(n.concat(u))):u:n};i.exp({getMetadataKeys:function(t){return f(u(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,n){var r=n(33),o=n(1),i=r.get,u=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(33),o=n(1),i=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,n){var r=n(33),o=n(1),i=n(22),u=r.has,s=r.key,a=function(t,e,n){if(u(t,e,n))return!0;var r=i(e);return null!==r&&a(t,r,n)};r.exp({hasMetadata:function(t,e){return a(t,o(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,n){var r=n(33),o=n(1),i=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(33),o=n(1),i=n(10),u=r.key,s=r.set;r.exp({metadata:function(t,e){return function(n,r){s(t,e,(void 0!==r?o:i)(n),u(r))}}})},function(t,e,n){var r=n(0),o=n(96)(),i=n(2).process,u="process"==n(25)(i);r(r.G,{asap:function(t){var e=u&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(23),u=n(96)(),s=n(5)("observable"),a=n(10),c=n(1),f=n(45),l=n(47),p=n(16),h=n(46),d=h.RETURN,v=function(t){return null==t?void 0:a(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},b=function(t,e){c(t),this._c=void 0,this._o=t,t=new x(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:a(n),this._c=n)}catch(e){return void t.error(e)}y(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var x=function(t){this._s=t};x.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var w=function(t){f(this,w,"Observable","_f")._f=a(t)};l(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)((function(n,r){a(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})}))}}),l(w,{from:function(t){var e="function"==typeof this?this:w,n=v(c(t)[s]);if(n){var r=c(n.call(t));return r.constructor===e?r:new e((function(t){return r.subscribe(t)}))}return new e((function(e){var n=!1;return u((function(){if(!n){try{if(h(t,!1,(function(t){if(e.next(t),n)return d}))===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}})),function(){n=!0}}))},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)((function(t){var e=!1;return u((function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}})),function(){e=!0}}))}}),p(w.prototype,s,(function(){return this})),r(r.G,{Observable:w}),n(44)("Observable")},function(t,e,n){var r=n(2),o=n(0),i=n(66),u=[].slice,s=/MSIE .\./.test(i),a=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*s,{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},function(t,e,n){var r=n(0),o=n(95);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){for(var r=n(92),o=n(40),i=n(17),u=n(2),s=n(16),a=n(52),c=n(5),f=c("iterator"),l=c("toStringTag"),p=a.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(h),v=0;v<d.length;v++){var g,y=d[v],m=h[y],b=u[y],x=b&&b.prototype;if(x&&(x[f]||s(x,f,p),x[l]||s(x,l,y),a[y]=p,m))for(g in r)x[g]||i(x,g,r[g],!0)}},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",u=r.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function a(t,e,n,r){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),u=new S(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return O()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var s=x(u,n);if(s){if(s===f)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var a=c(t,e,n);if("normal"===a.type){if(r=n.done?"completed":"suspendedYield",a.arg===f)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r="completed",n.method="throw",n.arg=a.arg)}}}(t,n,u),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var f={};function l(){}function p(){}function h(){}var d={};s(d,o,(function(){return this}));var v=Object.getPrototypeOf,g=v&&v(v(E([])));g&&g!==e&&n.call(g,o)&&(d=g);var y=h.prototype=l.prototype=Object.create(d);function m(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){var r;this._invoke=function(o,i){function u(){return new e((function(r,u){!function r(o,i,u,s){var a=c(t[o],t,i);if("throw"!==a.type){var f=a.arg,l=f.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,u,s)}),(function(t){r("throw",t,u,s)})):e.resolve(l).then((function(t){f.value=t,u(f)}),(function(t){return r("throw",t,u,s)}))}s(a.arg)}(o,i,r,u)}))}return r=r?r.then(u,u):u()}}function x(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=c(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,f;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:O}}function O(){return{value:void 0,done:!0}}return p.prototype=h,s(y,"constructor",h),s(h,"constructor",p),p.displayName=s(h,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,s(t,u,"GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},m(b.prototype),s(b.prototype,i,(function(){return this})),t.AsyncIterator=b,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var u=new b(a(e,n,r,o),i);return t.isGeneratorFunction(n)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},m(y),s(y,u,"Generator"),s(y,o,(function(){return this})),s(y,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=E,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return u.type="throw",u.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),a=n.call(i,"finallyLoc");if(s&&a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),_(n),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:E(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=r}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){n(352),t.exports=n(23).RegExp.escape},function(t,e,n){var r=n(0),o=n(353)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"n/a",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"n/a",n={};return n.welcome=function(n){return(0,r.default)(t,e,n)},n.getFolderById=function(n){return(0,o.default)(t,e,n)},n.createFolder=function(n){return(0,i.default)(t,e,n)},n.updateFolderMetadata=function(n){return(0,u.default)(t,e,n)},n.deleteFolder=function(n){return(0,s.default)(t,e,n)},n.uploadFileToFolder=function(n){return(0,a.default)(t,e,n)},n.moveFolder=function(n){return(0,c.default)(t,e,n)},n.createFile=function(n){return(0,f.default)(t,e,n)},n.getFileById=function(n){return(0,l.default)(t,e,n)},n.updateFileMetadata=function(n){return(0,p.default)(t,e,n)},n.moveFile=function(n){return(0,h.default)(t,e,n)},n.deleteFileFromFolder=function(n){return(0,d.default)(t,e,n)},n.deleteFileFromBucket=function(n){return(0,v.default)(t,e,n)},n.generateShareToken=function(n){return(0,g.default)(t,e,n)},n.downloadEntityByToken=function(n){return(0,y.default)(t,e,n)},n};var r=m(n(355)),o=m(n(386)),i=m(n(387)),u=m(n(392)),s=m(n(393)),a=m(n(394)),c=m(n(395)),f=m(n(396)),l=m(n(397)),p=m(n(398)),h=m(n(399)),d=m(n(400)),v=m(n(401)),g=m(n(402)),y=m(n(403));function m(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,u.validateApiKeys)(t,e);var r={method:"get",url:"".concat(i.baseUrl,"/welcome"),headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,o.default)(r).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,s.handleError)(t);e(n)}))}))};var r,o=(r=n(11))&&r.__esModule?r:{default:r},i=n(12),u=n(13),s=n(14);t.exports=e.default},function(t,e,n){"use strict";var r=n(15),o=n(139),i=n(357),u=n(149);function s(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var a=s(n(100));a.Axios=i,a.create=function(t){return s(u(a.defaults,t))},a.Cancel=n(150),a.CancelToken=n(383),a.isCancel=n(148),a.all=function(t){return Promise.all(t)},a.spread=n(384),a.isAxiosError=n(385),t.exports=a,t.exports.default=a},function(t,e,n){"use strict";var r=n(15),o=n(99),i=n(358),u=n(359),s=n(149),a=n(382),c=a.validators;function f(t){this.defaults=t,this.interceptors={request:new i,response:new i}}f.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=s(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=t.transitional;void 0!==e&&a.assertOptions(e,{silentJSONParsing:c.transitional(c.boolean,"1.0.0"),forcedJSONParsing:c.transitional(c.boolean,"1.0.0"),clarifyTimeoutError:c.transitional(c.boolean,"1.0.0")},!1);var n=[],r=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(r=r&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var o,i=[];if(this.interceptors.response.forEach((function(t){i.push(t.fulfilled,t.rejected)})),!r){var f=[u,void 0];for(Array.prototype.unshift.apply(f,n),f=f.concat(i),o=Promise.resolve(t);f.length;)o=o.then(f.shift(),f.shift());return o}for(var l=t;n.length;){var p=n.shift(),h=n.shift();try{l=p(l)}catch(t){h(t);break}}try{o=u(l)}catch(t){return Promise.reject(t)}for(;i.length;)o=o.then(i.shift(),i.shift());return o},f.prototype.getUri=function(t){return t=s(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){f.prototype[t]=function(e,n){return this.request(s(n||{},{method:t,url:e,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(t){f.prototype[t]=function(e,n,r){return this.request(s(r||{},{method:t,url:e,data:n}))}})),t.exports=f},function(t,e,n){"use strict";var r=n(15);function o(){this.handlers=[]}o.prototype.use=function(t,e,n){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},function(t,e,n){"use strict";var r=n(15),o=n(360),i=n(148),u=n(100);function s(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return s(t),t.headers=t.headers||{},t.data=o.call(t,t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||u.adapter)(t).then((function(e){return s(t),e.data=o.call(t,e.data,e.headers,t.transformResponse),e}),(function(e){return i(e)||(s(t),e&&e.response&&(e.response.data=o.call(t,e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,n){"use strict";var r=n(15),o=n(100);t.exports=function(t,e,n){var i=this||o;return r.forEach(n,(function(n){t=n.call(i,t,e)})),t}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},function(t,e,n){"use strict";var r=n(15),o=n(140),i=n(363),u=n(99),s=n(141),a=n(366),c=n(367),f=n(102);t.exports=function(t){return new Promise((function(e,n){var l=t.data,p=t.headers,h=t.responseType;r.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var v=t.auth.username||"",g=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(v+":"+g)}var y=s(t.baseURL,t.url);function m(){if(d){var r="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,i={data:h&&"text"!==h&&"json"!==h?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:t,request:d};o(e,n,i),d=null}}if(d.open(t.method.toUpperCase(),u(y,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,"onloadend"in d?d.onloadend=m:d.onreadystatechange=function(){d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))&&setTimeout(m)},d.onabort=function(){d&&(n(f("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(f("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(f(e,t,t.transitional&&t.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var b=(t.withCredentials||c(y))&&t.xsrfCookieName?i.read(t.xsrfCookieName):void 0;b&&(p[t.xsrfHeaderName]=b)}"setRequestHeader"in d&&r.forEach(p,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete p[e]:d.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),h&&"json"!==h&&(d.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),n(t),d=null)})),l||(l=null),d.send(l)}))}},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,u){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===u&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(15),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,u={};return t?(r.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(u[e]&&o.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([n]):u[e]?u[e]+", "+n:n}})),u):u}},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r=n(15),o=n(140),i=n(141),u=n(99),s=n(142),a=n(143),c=n(144).http,f=n(144).https,l=n(145),p=n(381),h=n(147),d=n(102),v=n(101),g=/https:?/;t.exports=function(t){return new Promise((function(e,n){var y=function(t){e(t)},m=function(t){n(t)},b=t.data,x=t.headers;if("User-Agent"in x||"user-agent"in x?x["User-Agent"]||x["user-agent"]||(delete x["User-Agent"],delete x["user-agent"]):x["User-Agent"]="axios/"+h.version,b&&!r.isStream(b)){if(Buffer.isBuffer(b));else if(r.isArrayBuffer(b))b=Buffer.from(new Uint8Array(b));else{if(!r.isString(b))return m(d("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",t));b=Buffer.from(b,"utf-8")}x["Content-Length"]=b.length}var w=void 0;t.auth&&(w=(t.auth.username||"")+":"+(t.auth.password||""));var _=i(t.baseURL,t.url),S=l.parse(_),E=S.protocol||"http:";if(!w&&S.auth){var O=S.auth.split(":");w=(O[0]||"")+":"+(O[1]||"")}w&&delete x.Authorization;var F=g.test(E),C=F?t.httpsAgent:t.httpAgent,j={path:u(S.path,t.params,t.paramsSerializer).replace(/^\?/,""),method:t.method.toUpperCase(),headers:x,agent:C,agents:{http:t.httpAgent,https:t.httpsAgent},auth:w};t.socketPath?j.socketPath=t.socketPath:(j.hostname=S.hostname,j.port=S.port);var A,M=t.proxy;if(!M&&!1!==M){var R=E.slice(0,-1)+"_proxy",k=process.env[R]||process.env[R.toUpperCase()];if(k){var P=l.parse(k),I=process.env.no_proxy||process.env.NO_PROXY,N=!0;if(I)N=!I.split(",").map((function(t){return t.trim()})).some((function(t){return!!t&&("*"===t||("."===t[0]&&S.hostname.substr(S.hostname.length-t.length)===t||S.hostname===t))}));if(N&&(M={host:P.hostname,port:P.port,protocol:P.protocol},P.auth)){var T=P.auth.split(":");M.auth={username:T[0],password:T[1]}}}}M&&(j.headers.host=S.hostname+(S.port?":"+S.port:""),function t(e,n,r){if(e.hostname=n.host,e.host=n.host,e.port=n.port,e.path=r,n.auth){var o=Buffer.from(n.auth.username+":"+n.auth.password,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+o}e.beforeRedirect=function(e){e.headers.host=e.host,t(e,n,e.href)}}(j,M,E+"//"+S.hostname+(S.port?":"+S.port:"")+j.path));var L=F&&(!M||g.test(M.protocol));t.transport?A=t.transport:0===t.maxRedirects?A=L?a:s:(t.maxRedirects&&(j.maxRedirects=t.maxRedirects),A=L?f:c),t.maxBodyLength>-1&&(j.maxBodyLength=t.maxBodyLength);var U=A.request(j,(function(e){if(!U.aborted){var n=e,i=e.req||U;if(204!==e.statusCode&&"HEAD"!==i.method&&!1!==t.decompress)switch(e.headers["content-encoding"]){case"gzip":case"compress":case"deflate":n=n.pipe(p.createUnzip()),delete e.headers["content-encoding"]}var u={status:e.statusCode,statusText:e.statusMessage,headers:e.headers,config:t,request:i};if("stream"===t.responseType)u.data=n,o(y,m,u);else{var s=[],a=0;n.on("data",(function(e){s.push(e),a+=e.length,t.maxContentLength>-1&&a>t.maxContentLength&&(n.destroy(),m(d("maxContentLength size of "+t.maxContentLength+" exceeded",t,null,i)))})),n.on("error",(function(e){U.aborted||m(v(e,t,null,i))})),n.on("end",(function(){var e=Buffer.concat(s);"arraybuffer"!==t.responseType&&(e=e.toString(t.responseEncoding),t.responseEncoding&&"utf8"!==t.responseEncoding||(e=r.stripBOM(e))),u.data=e,o(y,m,u)}))}}}));if(U.on("error",(function(e){U.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==e.code||m(v(e,t,null,U))})),t.timeout){var B=parseInt(t.timeout,10);if(isNaN(B))return void m(d("error trying to parse `config.timeout` to int",t,"ERR_PARSE_TIMEOUT",U));U.setTimeout(B,(function(){U.abort(),m(d("timeout of "+B+"ms exceeded",t,t.transitional&&t.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",U))}))}t.cancelToken&&t.cancelToken.promise.then((function(t){U.aborted||(U.abort(),m(t))})),r.isStream(b)?b.on("error",(function(e){m(v(e,t,null,U))})).pipe(U):U.end(b)}))}},function(t,e){t.exports=require("stream")},function(t,e){t.exports=require("assert")},function(t,e,n){var r;t.exports=function(){if(!r){try{r=n(372)("follow-redirects")}catch(t){}"function"!=typeof r&&(r=function(){})}r.apply(null,arguments)}},function(t,e,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?t.exports=n(373):t.exports=n(375)},function(t,e,n){e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=n(146)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},function(t,e){var n=1e3,r=6e4,o=60*r,i=24*o;function u(t,e,n,r){var o=e>=1.5*n;return Math.round(t/n)+" "+r+(o?"s":"")}t.exports=function(t,e){e=e||{};var s=typeof t;if("string"===s&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*u;case"weeks":case"week":case"w":return 6048e5*u;case"days":case"day":case"d":return u*i;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===s&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return u(t,e,i,"day");if(e>=o)return u(t,e,o,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){const r=n(376),o=n(377);e.init=function(t){t.inspectOpts={};const n=Object.keys(e.inspectOpts);for(let r=0;r<n.length;r++)t.inspectOpts[n[r]]=e.inspectOpts[n[r]]},e.log=function(...t){return process.stderr.write(o.format(...t)+"\n")},e.formatArgs=function(n){const{namespace:r,useColors:o}=this;if(o){const e=this.color,o="[3"+(e<8?e:"8;5;"+e),i=`  ${o};1m${r} [0m`;n[0]=i+n[0].split("\n").join("\n"+i),n.push(o+"m+"+t.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(e.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},e.save=function(t){t?process.env.DEBUG=t:delete process.env.DEBUG},e.load=function(){return process.env.DEBUG},e.useColors=function(){return"colors"in e.inspectOpts?Boolean(e.inspectOpts.colors):r.isatty(process.stderr.fd)},e.destroy=o.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),e.colors=[6,2,3,4,5,1];try{const t=n(378);t&&(t.stderr||t).level>=2&&(e.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(t){}e.inspectOpts=Object.keys(process.env).filter(t=>/^debug_/i.test(t)).reduce((t,e)=>{const n=e.substring(6).toLowerCase().replace(/_([a-z])/g,(t,e)=>e.toUpperCase());let r=process.env[e];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),t[n]=r,t},{}),t.exports=n(146)(e);const{formatters:i}=t.exports;i.o=function(t){return this.inspectOpts.colors=this.useColors,o.inspect(t,this.inspectOpts).split("\n").map(t=>t.trim()).join(" ")},i.O=function(t){return this.inspectOpts.colors=this.useColors,o.inspect(t,this.inspectOpts)}},function(t,e){t.exports=require("tty")},function(t,e){t.exports=require("util")},function(t,e,n){"use strict";const r=n(379),o=n(380),i=process.env;let u;function s(t){return function(t){return 0!==t&&{level:t,hasBasic:!0,has256:t>=2,has16m:t>=3}}(function(t){if(!1===u)return 0;if(o("color=16m")||o("color=full")||o("color=truecolor"))return 3;if(o("color=256"))return 2;if(t&&!t.isTTY&&!0!==u)return 0;const e=u?1:0;if("win32"===process.platform){const t=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(t[0])>=10&&Number(t[2])>=10586?Number(t[2])>=14931?3:2:1}if("CI"in i)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(t=>t in i)||"codeship"===i.CI_NAME?1:e;if("TEAMCITY_VERSION"in i)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(i.TEAMCITY_VERSION)?1:0;if("truecolor"===i.COLORTERM)return 3;if("TERM_PROGRAM"in i){const t=parseInt((i.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(i.TERM_PROGRAM){case"iTerm.app":return t>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(i.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(i.TERM)||"COLORTERM"in i?1:(i.TERM,e)}(t))}o("no-color")||o("no-colors")||o("color=false")?u=!1:(o("color")||o("colors")||o("color=true")||o("color=always"))&&(u=!0),"FORCE_COLOR"in i&&(u=0===i.FORCE_COLOR.length||0!==parseInt(i.FORCE_COLOR,10)),t.exports={supportsColor:s,stdout:s(process.stdout),stderr:s(process.stderr)}},function(t,e){t.exports=require("os")},function(t,e,n){"use strict";t.exports=(t,e)=>{e=e||process.argv;const n=t.startsWith("-")?"":1===t.length?"-":"--",r=e.indexOf(n+t),o=e.indexOf("--");return-1!==r&&(-1===o||r<o)}},function(t,e){t.exports=require("zlib")},function(t,e,n){"use strict";var r=n(147),o={};["object","boolean","number","function","string","symbol"].forEach((function(t,e){o[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}}));var i={},u=r.version.split(".");function s(t,e){for(var n=e?e.split("."):u,r=t.split("."),o=0;o<3;o++){if(n[o]>r[o])return!0;if(n[o]<r[o])return!1}return!1}o.transitional=function(t,e,n){var o=e&&s(e);function u(t,e){return"[Axios v"+r.version+"] Transitional option '"+t+"'"+e+(n?". "+n:"")}return function(n,r,s){if(!1===t)throw new Error(u(r," has been removed in "+e));return o&&!i[r]&&(i[r]=!0,console.warn(u(r," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(n,r,s)}},t.exports={isOlderVersion:s,assertOptions:function(t,e,n){if("object"!=typeof t)throw new TypeError("options must be an object");for(var r=Object.keys(t),o=r.length;o-- >0;){var i=r[o],u=e[i];if(u){var s=t[i],a=void 0===s||u(s,i,t);if(!0!==a)throw new TypeError("option "+i+" must be "+a)}else if(!0!==n)throw Error("Unknown option "+i)}},validators:o}},function(t,e,n){"use strict";var r=n(150);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,u.validateApiKeys)(t,e);var r="".concat(i.baseUrl,"/storage/folder/").concat(n.folderId);n.teamId&&(r+="/".concat(n.teamId));var a={method:"get",url:r,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,o.default)(a).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,s.handleError)(t);e(n)}))}))};var r,o=(r=n(11))&&r.__esModule?r:{default:r},i=n(12),u=n(13),s=n(14);t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({folderName:n.folderName,parentFolderId:n.parentFolderId,teamId:n.teamId||""}),c={method:"post",url:"".concat(o.baseUrl,"/storage/folder"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){n.status>399&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";t.exports=t=>encodeURIComponent(t).replace(/[!'()*]/g,t=>"%"+t.charCodeAt(0).toString(16).toUpperCase())},function(t,e,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var n=t.slice(0,e),r=t.slice(e);return Array.prototype.concat.call([],i(n),i(r))}function u(t){try{return decodeURIComponent(t)}catch(o){for(var e=t.match(r),n=1;n<e.length;n++)e=(t=i(e,n).join("")).match(r);return t}}t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"��","%FF%FE":"��"},n=o.exec(t);n;){try{e[n[0]]=decodeURIComponent(n[0])}catch(t){var r=u(n[0]);r!==n[0]&&(e[n[0]]=r)}n=o.exec(t)}e["%C2"]="�";for(var i=Object.keys(e),s=0;s<i.length;s++){var a=i[s];t=t.replace(new RegExp(a,"g"),e[a])}return t}(t)}}},function(t,e,n){"use strict";t.exports=(t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const n=t.indexOf(e);return-1===n?[t]:[t.slice(0,n),t.slice(n+e.length)]}},function(t,e,n){"use strict";t.exports=function(t,e){for(var n={},r=Object.keys(t),o=Array.isArray(e),i=0;i<r.length;i++){var u=r[i],s=t[u];(o?-1!==e.indexOf(u):e(u,s,t))&&(n[u]=s)}return n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({metadata:n.metadata}),c={method:"post",url:"".concat(o.baseUrl,"/storage/folder/").concat(n.folderId,"/meta"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,u.validateApiKeys)(t,e);var r={method:"delete",url:"".concat(i.baseUrl,"/storage/folder/").concat(n.folderId),headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,o.default)(r).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,s.handleError)(t);e(n)}))}))};var r,o=(r=n(11))&&r.__esModule?r:{default:r},i=n(12),u=n(13),s=n(14);t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var s=n.data,a={method:"post",url:"".concat(o.baseUrl,"/storage/folder/").concat(n.folderId,"/upload"),data:s,headers:{"Content-Type":"multipart/form-data; boundary=".concat(s._boundary),"x-api-access-key":n.apiAccessKey,"storx-mnemonic":n.mnemonic}};return new Promise((function(t,e){(0,r.default)(a).then((function(n){n.status>399&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=s(n(11)),o=n(12),i=n(13),u=n(14);s(n(37));function s(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({folderId:n.folderId,destination:n.destination}),c={method:"post",url:"".concat(o.baseUrl,"/storage/moveFolder"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({file:n.file}),c={method:"post",url:"".concat(o.baseUrl,"/storage/file"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){return(0,o.validateApiKeys)(t,e),{result:{}}};(r=n(11))&&r.__esModule,n(12);var r,o=n(13);n(14);t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({metadata:n.metadata}),c={method:"post",url:"".concat(o.baseUrl,"/storage/file/").concat(n.fileId,"/meta"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({fileId:n.fileId,destination:n.destination}),c={method:"post",url:"".concat(o.baseUrl,"/storage/moveFile"),data:a,headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,u.validateApiKeys)(t,e);var r={method:"delete",url:"".concat(i.baseUrl,"/storage/folder/").concat(n.folderId,"/file/").concat(n.fileId),headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,o.default)(r).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,s.handleError)(t);e(n)}))}))};var r,o=(r=n(11))&&r.__esModule?r:{default:r},i=n(12),u=n(13),s=n(14);t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,u.validateApiKeys)(t,e);var r={method:"delete",url:"".concat(i.baseUrl,"/storage/bucket/").concat(n.bucketId,"/file/").concat(n.fileId),headers:{"x-api-access-key":n.apiAccessKey}};return new Promise((function(t,e){(0,o.default)(r).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,s.handleError)(t);e(n)}))}))};var r,o=(r=n(11))&&r.__esModule?r:{default:r},i=n(12),u=n(13),s=n(14);t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,i.validateApiKeys)(t,e);var a=s.default.stringify({isFolder:n.isFolder,views:n.views}),c={method:"post",url:"".concat(o.baseUrl,"/storage/share/file/").concat(n.itemId),data:a,headers:{"x-api-access-key":n.apiAccessKey,"storx-mnemonic":n.mnemonic}};return new Promise((function(t,e){(0,r.default)(c).then((function(n){200!==n.status&&e(new Error("unknown server response while authenticating: ".concat(n))),t({result:n.data})})).catch((function(t){var n=(0,u.handleError)(t);e(n)}))}))};var r=a(n(11)),o=n(12),i=n(13),u=n(14),s=a(n(37));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){return(0,o.validateApiKeys)(t,e),{result:{}}};(r=n(11))&&r.__esModule,n(12);var r,o=n(13);n(14);t.exports=e.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvdXRpbC92YWxpZGF0b3JzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vc3JjL3V0aWwvZXJyb3JSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrL2V4dGVybmFsIFwiaHR0cFwiIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrL2V4dGVybmFsIFwiaHR0cHNcIiIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9mb2xsb3ctcmVkaXJlY3RzL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrL2V4dGVybmFsIFwidXJsXCIiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vc3JjL2NvbW1hbmRzL3dlbGNvbWUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2h0dHAuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvZXh0ZXJuYWwgXCJzdHJlYW1cIiIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay9leHRlcm5hbCBcImFzc2VydFwiIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2ZvbGxvdy1yZWRpcmVjdHMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9ub2RlLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrL2V4dGVybmFsIFwidHR5XCIiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2hhcy1mbGFnL2luZGV4LmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrL2V4dGVybmFsIFwiemxpYlwiIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvZ2V0Rm9sZGVyQnlJZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb21tYW5kcy9jcmVhdGVGb2xkZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvc3RyaWN0LXVyaS1lbmNvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvc3BsaXQtb24tZmlyc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9ub2RlX21vZHVsZXMvZmlsdGVyLW9iai9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb21tYW5kcy91cGRhdGVGb2xkZXJNZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb21tYW5kcy9kZWxldGVGb2xkZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvdXBsb2FkRmlsZVRvRm9sZGVyLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vc3JjL2NvbW1hbmRzL21vdmVGb2xkZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvY3JlYXRlRmlsZS5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb21tYW5kcy9nZXRGaWxlQnlJZC5qcyIsIndlYnBhY2s6Ly9zdG9yeC1zdG9yYWdlLXNkay8uL3NyYy9jb21tYW5kcy91cGRhdGVGaWxlTWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvbW92ZUZpbGUuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvZGVsZXRlRmlsZUZyb21Gb2xkZXIuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvZGVsZXRlRmlsZUZyb21CdWNrZXQuanMiLCJ3ZWJwYWNrOi8vc3Rvcngtc3RvcmFnZS1zZGsvLi9zcmMvY29tbWFuZHMvZ2VuZXJhdGVTaGFyZVRva2VuLmpzIiwid2VicGFjazovL3N0b3J4LXN0b3JhZ2Utc2RrLy4vc3JjL2NvbW1hbmRzL2Rvd25sb2FkRW50aXR5QnlUb2tlbi5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwid2luZG93IiwiTWF0aCIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImFwaUtleSIsInNlY3JldEFwaUtleSIsIkVycm9yIiwiZXJyb3IiLCJyZXNwb25zZSIsImRhdGEiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc1VuZGVmaW5lZCIsImlzUGxhaW5PYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJzbGljZSIsImFyZ3VtZW50cyIsImV4dGVuZCIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiY3JlYXRlRGVzYyIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJqb2luIiwiU3RyaW5nIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsIklPYmplY3QiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwidmVyc2lvbiIsIl9fZSIsImFGdW5jdGlvbiIsInRoYXQiLCJhcHBseSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiRk9SQ0VEX1NFVCIsInNldCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIk1hcCIsInNoYXJlZCIsImdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJ0YXJnZXRLZXkiLCJ0YXJnZXRNZXRhZGF0YSIsImtleU1ldGFkYXRhIiwiTWV0YWRhdGFLZXkiLCJtZXRhZGF0YU1hcCIsIk1ldGFkYXRhVmFsdWUiLCJfIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJVTlNDT1BBQkxFUyIsInN0cmljdFVyaUVuY29kZSIsImRlY29kZUNvbXBvbmVudCIsInNwbGl0T25GaXJzdCIsImZpbHRlck9iamVjdCIsImVuY29kZUZyYWdtZW50SWRlbnRpZmllciIsInZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3IiLCJlbmNvZGUiLCJvcHRpb25zIiwic3RyaWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlIiwicmVtb3ZlSGFzaCIsImlucHV0IiwiaGFzaFN0YXJ0IiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJwYXJzZVZhbHVlIiwicGFyc2VOdW1iZXJzIiwiTnVtYmVyIiwicGFyc2VCb29sZWFucyIsInBhcnNlIiwicXVlcnkiLCJhc3NpZ24iLCJhcnJheUZvcm1hdCIsImFycmF5Rm9ybWF0U2VwYXJhdG9yIiwiZm9ybWF0dGVyIiwiYWNjdW11bGF0b3IiLCJpc0VuY29kZWRBcnJheSIsIm5ld1ZhbHVlIiwiaXRlbSIsImFycmF5VmFsdWUiLCJwYXJzZXJGb3JBcnJheUZvcm1hdCIsInJldCIsInBhcmFtIiwiayIsIkJvb2xlYW4iLCJrZXlzU29ydGVyIiwic3RyaW5naWZ5Iiwic2hvdWxkRmlsdGVyIiwic2tpcE51bGwiLCJza2lwRW1wdHlTdHJpbmciLCJrZXlWYWx1ZVNlcCIsImVuY29kZXJGb3JBcnJheUZvcm1hdCIsIm9iamVjdENvcHkiLCJ4IiwicGFyc2VVcmwiLCJ1cmwiLCJ1cmxfIiwiaGFzaCIsInBhcnNlRnJhZ21lbnRJZGVudGlmaWVyIiwiZnJhZ21lbnRJZGVudGlmaWVyIiwic3RyaW5naWZ5VXJsIiwicXVlcnlGcm9tVXJsIiwicGFyc2VkUXVlcnlGcm9tVXJsIiwicXVlcnlTdHJpbmciLCJnZXRIYXNoIiwicGljayIsImV4Y2x1ZGUiLCJleGNsdXNpb25GaWx0ZXIiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsIl90IiwiZGVmIiwic3RhdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJjb3B5cmlnaHQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiRCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQXQiLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCIkZXhwbTEiLCJleHBtMSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZGVzY3JpcHRvciIsInNlYXJjaFN0cmluZyIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwib3JpZ2luYWwiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwic3RhbmRhbG9uZSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVqZWN0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInV0aWxzIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInRvSVNPU3RyaW5nIiwiSlNPTiIsImhhc2htYXJrSW5kZXgiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiZW5oYW5jZUVycm9yIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInN0cmljdEpTT05QYXJzaW5nIiwicmVzcG9uc2VUeXBlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJtZXNzYWdlIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsIm5hbWVzIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QUyIsIiRhc3NpZ24iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwieSIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsInBhcnRBcmdzIiwiYm91bmQiLCJ1biIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwibXNnIiwiaXNGaW5pdGUiLCJsb2cxcCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibWVtbyIsImlzUmlnaHQiLCJ0byIsImluYyIsImZvcmNlZCIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwicHJldiIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJ1ZnN0b3JlIiwiJFdlYWtNYXAiLCIkaGFzIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsIlJlZmxlY3QiLCJvd25LZXlzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJjcmVhdGVFcnJvciIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJyZXF1aXJlIiwiVVJMIiwiaHR0cCIsImh0dHBzIiwiV3JpdGFibGUiLCJhc3NlcnQiLCJkZWJ1ZyIsImV2ZW50cyIsImV2ZW50SGFuZGxlcnMiLCJhcmcxIiwiYXJnMyIsIl9yZWRpcmVjdGFibGUiLCJlbWl0IiwiUmVkaXJlY3Rpb25FcnJvciIsImNyZWF0ZUVycm9yVHlwZSIsIlRvb01hbnlSZWRpcmVjdHNFcnJvciIsIk1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yIiwiV3JpdGVBZnRlckVuZEVycm9yIiwiUmVkaXJlY3RhYmxlUmVxdWVzdCIsInJlc3BvbnNlQ2FsbGJhY2siLCJfc2FuaXRpemVPcHRpb25zIiwiX29wdGlvbnMiLCJfZW5kZWQiLCJfZW5kaW5nIiwiX3JlZGlyZWN0Q291bnQiLCJfcmVkaXJlY3RzIiwiX3JlcXVlc3RCb2R5TGVuZ3RoIiwiX3JlcXVlc3RCb2R5QnVmZmVycyIsIm9uIiwiX29uTmF0aXZlUmVzcG9uc2UiLCJfcHJvY2Vzc1Jlc3BvbnNlIiwiX3BlcmZvcm1SZXF1ZXN0Iiwid3JhcCIsInByb3RvY29scyIsIm1heFJlZGlyZWN0cyIsIm5hdGl2ZVByb3RvY29scyIsInNjaGVtZSIsInByb3RvY29sIiwibmF0aXZlUHJvdG9jb2wiLCJ3cmFwcGVkUHJvdG9jb2wiLCJjYWxsYmFjayIsInVybFN0ciIsInVybFRvT3B0aW9ucyIsImVyciIsImVxdWFsIiwid3JhcHBlZFJlcXVlc3QiLCJub29wIiwidXJsT2JqZWN0IiwiaG9zdG5hbWUiLCJzdGFydHNXaXRoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJwYXRoIiwiaHJlZiIsInJlbW92ZU1hdGNoaW5nSGVhZGVycyIsInJlZ2V4IiwibGFzdFZhbHVlIiwiaGVhZGVyIiwiZGVmYXVsdE1lc3NhZ2UiLCJDdXN0b21FcnJvciIsImNhdXNlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJhYm9ydFJlcXVlc3QiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwiX2N1cnJlbnRSZXF1ZXN0IiwiZW5jb2RpbmciLCJjdXJyZW50UmVxdWVzdCIsInNldEhlYWRlciIsInJlbW92ZUhlYWRlciIsIm1zZWNzIiwiZGVzdHJveU9uVGltZW91dCIsInNvY2tldCIsImRlc3Ryb3kiLCJhZGRMaXN0ZW5lciIsInN0YXJ0VGltZXIiLCJfdGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFyVGltZXIiLCJvbmNlIiwiaG9zdCIsInNlYXJjaFBvcyIsInN1YnN0cmluZyIsImFnZW50cyIsInN1YnN0ciIsImFnZW50IiwiX2N1cnJlbnRVcmwiLCJmb3JtYXQiLCJfaXNSZWRpcmVjdCIsImJ1ZmZlcnMiLCJ3cml0ZU5leHQiLCJmaW5pc2hlZCIsInN0YXR1c0NvZGUiLCJ0cmFja1JlZGlyZWN0cyIsImxvY2F0aW9uIiwiZm9sbG93UmVkaXJlY3RzIiwicmVzcG9uc2VVcmwiLCJyZWRpcmVjdHMiLCJyZWRpcmVjdFVybCIsImN1cnJlbnRIb3N0SGVhZGVyIiwiY3VycmVudFVybFBhcnRzIiwiY3VycmVudEhvc3QiLCJjdXJyZW50VXJsIiwicmVkaXJlY3RVcmxQYXJ0cyIsInN1YmRvbWFpbiIsImRvdCIsImVuZHNXaXRoIiwiaXNTdWJkb21haW4iLCJiZWZvcmVSZWRpcmVjdCIsInJlc3BvbnNlRGV0YWlscyIsImVudiIsImNyZWF0ZURlYnVnIiwibmFtZXNwYWNlIiwicHJldlRpbWUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJlbmFibGVPdmVycmlkZSIsImVuYWJsZWQiLCJjdXJyIiwiRGF0ZSIsIm1zIiwiZGlmZiIsImNvZXJjZSIsInVuc2hpZnQiLCJmb3JtYXR0ZXJzIiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsImNvbG9yIiwic2VsZWN0Q29sb3IiLCJuYW1lc3BhY2VzIiwiaW5pdCIsImRlbGltaXRlciIsIm5ld0RlYnVnIiwidG9OYW1lc3BhY2UiLCJkZWZhdWx0IiwiZGlzYWJsZSIsInNraXBzIiwiZW5hYmxlIiwic2F2ZSIsImh1bWFuaXplIiwiY29uc29sZSIsIndhcm4iLCJjb2xvcnMiLCJsb2FkIiwiX19DQU5DRUxfXyIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIl9iYWJlbFBvbHlmaWxsIiwicGFkU3RhcnQiLCJwYWRFbmQiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic3ltYm9scyIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwic3FydCIsIiRhY29zaCIsImFjb3NoIiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsIiRzdGFydHNXaXRoIiwic2l6ZSIsImdldFRpbWUiLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJMRU5HVEgiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJxIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCIkcGFkIiwiV0VCS0lUX0JVRyIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiaXNFcnJvciIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUEkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiZnNjYWxlIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsImlzdWJoIiwiaW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwidW11bGgiLCJzaWduYml0Iiwib25GaW5hbGx5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiU2V0Iiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiYXNhcCIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiZXNjYXBlIiwiJHJlIiwicmVnRXhwIiwicGFydCIsImNsaWVudCIsIndlbGNvbWUiLCJib2R5IiwiZ2V0Rm9sZGVyQnlJZCIsImNyZWF0ZUZvbGRlciIsInVwZGF0ZUZvbGRlck1ldGFkYXRhIiwiZGVsZXRlRm9sZGVyIiwidXBsb2FkRmlsZVRvRm9sZGVyIiwibW92ZUZvbGRlciIsImNyZWF0ZUZpbGUiLCJnZXRGaWxlQnlJZCIsInVwZGF0ZUZpbGVNZXRhZGF0YSIsIm1vdmVGaWxlIiwiZGVsZXRlRmlsZUZyb21Gb2xkZXIiLCJkZWxldGVGaWxlRnJvbUJ1Y2tldCIsImdlbmVyYXRlU2hhcmVUb2tlbiIsImRvd25sb2FkRW50aXR5QnlUb2tlbiIsInZhbGlkYXRlQXBpS2V5cyIsImJhc2VVcmwiLCJhcGlBY2Nlc3NLZXkiLCJmb3JtYXR0ZWRFcnJvciIsImhhbmRsZUVycm9yIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJidWlsZFVSTCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJpbnRlcmNlcHRvcnMiLCJhc3NlcnRPcHRpb25zIiwiYm9vbGVhbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJydW5XaGVuIiwic3luY2hyb25vdXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInNoaWZ0IiwibmV3Q29uZmlnIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImNhbmNlbFRva2VuIiwidGhyb3dJZlJlcXVlc3RlZCIsIm5vcm1hbGl6ZWROYW1lIiwidG9VcHBlckNhc2UiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJzZW5kIiwiZXhwaXJlcyIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsImxpbmUiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwic2V0QXR0cmlidXRlIiwicmVxdWVzdFVSTCIsImh0dHBGb2xsb3ciLCJodHRwc0ZvbGxvdyIsInpsaWIiLCJwa2ciLCJpc0h0dHBzIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwiQnVmZmVyIiwidXJsQXV0aCIsImlzSHR0cHNSZXF1ZXN0IiwiaHR0cHNBZ2VudCIsImh0dHBBZ2VudCIsInNvY2tldFBhdGgiLCJ0cmFuc3BvcnQiLCJwcm94eUVudiIsInByb3h5VXJsIiwicGFyc2VkUHJveHlVcmwiLCJub1Byb3h5RW52Iiwibm9fcHJveHkiLCJOT19QUk9YWSIsInNob3VsZFByb3h5IiwicHJveHlFbGVtZW50IiwicHJveHlVcmxBdXRoIiwic2V0UHJveHkiLCJiYXNlNjQiLCJyZWRpcmVjdGlvbiIsImlzSHR0cHNQcm94eSIsInJlcSIsImFib3J0ZWQiLCJzdHJlYW0iLCJsYXN0UmVxdWVzdCIsImRlY29tcHJlc3MiLCJjcmVhdGVVbnppcCIsInN0YXR1c01lc3NhZ2UiLCJyZXNwb25zZUJ1ZmZlciIsInRvdGFsUmVzcG9uc2VCeXRlcyIsImNodW5rIiwicmVzcG9uc2VEYXRhIiwicmVzcG9uc2VFbmNvZGluZyIsImJyb3dzZXIiLCJfX253anMiLCJsYXN0QyIsInN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImdldEl0ZW0iLCJERUJVRyIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwidGFibGUiLCIkMSIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsIndhcm5lZCIsInBsdXJhbCIsIm1zQWJzIiwiaXNQbHVyYWwiLCJsb25nIiwiZm10TG9uZyIsImZtdFNob3J0IiwidHR5IiwidXRpbCIsImluc3BlY3RPcHRzIiwic3RkZXJyIiwiY29sb3JDb2RlIiwicHJlZml4IiwiaGlkZURhdGUiLCJnZXREYXRlIiwiaXNhdHR5IiwiZmQiLCJkZXByZWNhdGUiLCJzdXBwb3J0c0NvbG9yIiwibGV2ZWwiLCJpbnNwZWN0Iiwib3MiLCJoYXNGbGFnIiwiZm9yY2VDb2xvciIsImdldFN1cHBvcnRMZXZlbCIsImhhc0Jhc2ljIiwiaGFzMjU2IiwiaGFzMTZtIiwidHJhbnNsYXRlTGV2ZWwiLCJpc1RUWSIsInBsYXRmb3JtIiwib3NSZWxlYXNlIiwicmVsZWFzZSIsIkNJX05BTUUiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwiVEVSTV9QUk9HUkFNX1ZFUlNJT04iLCJURVJNX1BST0dSQU0iLCJURVJNIiwiRk9SQ0VfQ09MT1IiLCJzdGRvdXQiLCJmbGFnIiwiYXJndiIsInRlcm1pbmF0b3JQb3MiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsImN1cnJlbnRWZXJBcnIiLCJpc09sZGVyVmVyc2lvbiIsInRoYW5WZXJzaW9uIiwicGtnVmVyc2lvbkFyciIsImRlc3RWZXIiLCJpc0RlcHJlY2F0ZWQiLCJmb3JtYXRNZXNzYWdlIiwib3B0Iiwib3B0cyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsInRva2VuIiwicGF5bG9hZCIsImZvbGRlcklkIiwidGVhbUlkIiwicXMiLCJmb2xkZXJOYW1lIiwicGFyZW50Rm9sZGVySWQiLCJzaW5nbGVNYXRjaGVyIiwibXVsdGlNYXRjaGVyIiwiZGVjb2RlQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJyaWdodCIsInRva2VucyIsImVuY29kZWRVUkkiLCJyZXBsYWNlTWFwIiwiY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50Iiwic2VwYXJhdG9ySW5kZXgiLCJpc0FyciIsIl9ib3VuZGFyeSIsIm1uZW1vbmljIiwiZGVzdGluYXRpb24iLCJmaWxlIiwiZmlsZUlkIiwiYnVja2V0SWQiLCJpc0ZvbGRlciIsInZpZXdzIiwiaXRlbUlkIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLG9CQUFxQixHQUFJSCxHQUNOLGlCQUFaQyxRQUNkQSxRQUFRLHFCQUF1QkQsSUFFL0JELEVBQUsscUJBQXVCQyxJQVI5QixDQVNtQixvQkFBVEssS0FBdUJBLEtBQU9DLE1BQU0sV0FDOUMsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVSLFFBR25DLElBQUlDLEVBQVNLLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hWLFFBQVMsSUFVVixPQU5BVyxFQUFRSCxHQUFVSSxLQUFLWCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTTyxHQUcvRE4sRUFBT1MsR0FBSSxFQUdKVCxFQUFPRCxRQTBEZixPQXJEQU8sRUFBb0JNLEVBQUlGLEVBR3hCSixFQUFvQk8sRUFBSVIsRUFHeEJDLEVBQW9CUSxFQUFJLFNBQVNmLEVBQVNnQixFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVsQixFQUFTZ0IsSUFDbENHLE9BQU9DLGVBQWVwQixFQUFTZ0IsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVixFQUFvQmdCLEVBQUksU0FBU3ZCLEdBQ1gsb0JBQVh3QixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWVwQixFQUFTd0IsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlcEIsRUFBUyxhQUFjLENBQUUwQixPQUFPLEtBUXZEbkIsRUFBb0JvQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUW5CLEVBQW9CbUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkF4QixFQUFvQmdCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPbkIsRUFBb0JRLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ2QixFQUFvQjJCLEVBQUksU0FBU2pDLEdBQ2hDLElBQUlnQixFQUFTaEIsR0FBVUEsRUFBTzRCLFdBQzdCLFdBQXdCLE9BQU81QixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBTSxFQUFvQlEsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlYsRUFBb0JXLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHN0IsRUFBb0JnQyxFQUFJLEdBSWpCaEMsRUFBb0JBLEVBQW9CaUMsRUFBSSxLLGtCQ2xGckQsSUFBSUMsRUFBUyxFQUFRLEdBQ2pCQyxFQUFPLEVBQVEsSUFDZkMsRUFBTyxFQUFRLElBQ2ZDLEVBQVcsRUFBUSxJQUNuQkMsRUFBTSxFQUFRLElBR2RDLEVBQVUsU0FBVUMsRUFBTS9CLEVBQU1nQyxHQUNsQyxJQVFJaEIsRUFBS2lCLEVBQUtDLEVBQUtDLEVBUmZDLEVBQVlMLEVBQU9ELEVBQVFPLEVBQzNCQyxFQUFZUCxFQUFPRCxFQUFRUyxFQUMzQkMsRUFBWVQsRUFBT0QsRUFBUVcsRUFDM0JDLEVBQVdYLEVBQU9ELEVBQVFhLEVBQzFCQyxFQUFVYixFQUFPRCxFQUFRZSxFQUN6QkMsRUFBU1IsRUFBWWIsRUFBU2UsRUFBWWYsRUFBT3pCLEtBQVV5QixFQUFPekIsR0FBUSxLQUFPeUIsRUFBT3pCLElBQVMsSUFBYSxVQUM5R2hCLEVBQVVzRCxFQUFZWixFQUFPQSxFQUFLMUIsS0FBVTBCLEVBQUsxQixHQUFRLElBQ3pEK0MsRUFBVy9ELEVBQWlCLFlBQU1BLEVBQWlCLFVBQUksSUFHM0QsSUFBS2dDLEtBRERzQixJQUFXTixFQUFTaEMsR0FDWmdDLEVBSVZFLElBRkFELEdBQU9HLEdBQWFVLFFBQTBCRSxJQUFoQkYsRUFBTzlCLElBRXhCOEIsRUFBU2QsR0FBUWhCLEdBRTlCbUIsRUFBTVMsR0FBV1gsRUFBTUosRUFBSUssRUFBS1QsR0FBVWlCLEdBQTBCLG1CQUFQUixFQUFvQkwsRUFBSW9CLFNBQVNyRCxLQUFNc0MsR0FBT0EsRUFFdkdZLEdBQVFsQixFQUFTa0IsRUFBUTlCLEVBQUtrQixFQUFLSCxFQUFPRCxFQUFRb0IsR0FFbERsRSxFQUFRZ0MsSUFBUWtCLEdBQUtQLEVBQUszQyxFQUFTZ0MsRUFBS21CLEdBQ3hDTyxHQUFZSyxFQUFTL0IsSUFBUWtCLElBQUthLEVBQVMvQixHQUFPa0IsSUFHMURULEVBQU9DLEtBQU9BLEVBRWRJLEVBQVFPLEVBQUksRUFDWlAsRUFBUVMsRUFBSSxFQUNaVCxFQUFRVyxFQUFJLEVBQ1pYLEVBQVFhLEVBQUksRUFDWmIsRUFBUWUsRUFBSSxHQUNaZixFQUFRcUIsRUFBSSxHQUNackIsRUFBUW9CLEVBQUksR0FDWnBCLEVBQVFzQixFQUFJLElBQ1puRSxFQUFPRCxRQUFVOEMsRyxnQkMxQ2pCLElBQUl1QixFQUFXLEVBQVEsR0FDdkJwRSxFQUFPRCxRQUFVLFNBQVVzRSxHQUN6QixJQUFLRCxFQUFTQyxHQUFLLE1BQU1DLFVBQVVELEVBQUssc0JBQ3hDLE9BQU9BLEksY0NGVCxJQUFJN0IsRUFBU3hDLEVBQU9ELFFBQTJCLG9CQUFWd0UsUUFBeUJBLE9BQU9DLE1BQVFBLEtBQ3pFRCxPQUF3QixvQkFBUnBFLE1BQXVCQSxLQUFLcUUsTUFBUUEsS0FBT3JFLEtBRTNENkQsU0FBUyxjQUFUQSxHQUNjLGlCQUFQUyxNQUFpQkEsSUFBTWpDLEksY0NMbEN4QyxFQUFPRCxRQUFVLFNBQVUyRSxHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBT0MsR0FDUCxPQUFPLEssY0NKWDNFLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLE1BQXFCLGlCQUFQQSxFQUF5QixPQUFQQSxFQUE0QixtQkFBUEEsSSxnQkNEdkQsSUFBSU8sRUFBUSxFQUFRLEdBQVIsQ0FBcUIsT0FDN0JDLEVBQU0sRUFBUSxJQUNkdEQsRUFBUyxFQUFRLEdBQWFBLE9BQzlCdUQsRUFBOEIsbUJBQVZ2RCxHQUVUdkIsRUFBT0QsUUFBVSxTQUFVZ0IsR0FDeEMsT0FBTzZELEVBQU03RCxLQUFVNkQsRUFBTTdELEdBQzNCK0QsR0FBY3ZELEVBQU9SLEtBQVUrRCxFQUFhdkQsRUFBU3NELEdBQUssVUFBWTlELE1BR2pFNkQsTUFBUUEsRyxnQkNUakIsSUFBSUcsRUFBWSxFQUFRLElBQ3BCQyxFQUFNUixLQUFLUSxJQUNmaEYsRUFBT0QsUUFBVSxTQUFVc0UsR0FDekIsT0FBT0EsRUFBSyxFQUFJVyxFQUFJRCxFQUFVVixHQUFLLGtCQUFvQixJLGdCQ0h6RHJFLEVBQU9ELFNBQVcsRUFBUSxFQUFSLEVBQW9CLFdBQ3BDLE9BQStFLEdBQXhFbUIsT0FBT0MsZUFBZSxHQUFJLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUTRELE0sZ0JDRjVFLElBQUlDLEVBQVcsRUFBUSxHQUNuQkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBYyxFQUFRLElBQ3RCQyxFQUFLbkUsT0FBT0MsZUFFaEJwQixFQUFRdUYsRUFBSSxFQUFRLEdBQW9CcEUsT0FBT0MsZUFBaUIsU0FBd0JvRSxFQUFHN0IsRUFBRzhCLEdBSTVGLEdBSEFOLEVBQVNLLEdBQ1Q3QixFQUFJMEIsRUFBWTFCLEdBQUcsR0FDbkJ3QixFQUFTTSxHQUNMTCxFQUFnQixJQUNsQixPQUFPRSxFQUFHRSxFQUFHN0IsRUFBRzhCLEdBQ2hCLE1BQU9iLElBQ1QsR0FBSSxRQUFTYSxHQUFjLFFBQVNBLEVBQVksTUFBTWxCLFVBQVUsNEJBRWhFLE1BREksVUFBV2tCLElBQVlELEVBQUU3QixHQUFLOEIsRUFBVy9ELE9BQ3RDOEQsSSxnQkNiVCxJQUFJRSxFQUFVLEVBQVEsSUFDdEJ6RixFQUFPRCxRQUFVLFNBQVVzRSxHQUN6QixPQUFPbkQsT0FBT3VFLEVBQVFwQixNLGNDSHhCckUsRUFBT0QsUUFBVSxTQUFVc0UsR0FDekIsR0FBaUIsbUJBQU5BLEVBQWtCLE1BQU1DLFVBQVVELEVBQUssdUJBQ2xELE9BQU9BLEksZ0JDRlRyRSxFQUFPRCxRQUFVLEVBQVEsTSx5R0NBRixpQyxnR0NBaEIsU0FBeUIyRixFQUFRQyxHQUNwQyxJQUFLRCxHQUFxQixLQUFYQSxFQUNYLE1BQU0sSUFBSUUsTUFBTSw2RkFFcEIsSUFBS0QsR0FBaUMsS0FBakJBLEVBQ2pCLE1BQU0sSUFBSUMsTUFBTSw0RyxpSENMRyxTQUFDQyxHQUMxQixPQUFJQSxHQUFTQSxFQUFNQyxVQUFZRCxFQUFNQyxVQUFZRCxFQUFNQyxTQUFTQyxNQUFRRixFQUFNQyxTQUFTQyxLQUFLRixNQUNuRkEsRUFBTUMsU0FBU0MsS0FBS0YsTUFDbEJBLEVBQU1FLE1BQVFGLEVBQU1FLEtBQUtGLE1BQzNCQSxFQUFNRSxLQUFLRixNQUNUQSxFQUFNQyxVQUFZRCxFQUFNQyxTQUFTRCxNQUNuQ0EsRUFBTUMsU0FBU0QsTUFFakJBLEksNkJDTlQsSUFBSTdELEVBQU8sRUFBUSxLQUlmZ0UsRUFBVzlFLE9BQU9rQixVQUFVNEQsU0FRaEMsU0FBU0MsRUFBUUMsR0FDZixNQUE4QixtQkFBdkJGLEVBQVNyRixLQUFLdUYsR0FTdkIsU0FBU0MsRUFBWUQsR0FDbkIsWUFBc0IsSUFBUkEsRUE0RWhCLFNBQVM5QixFQUFTOEIsR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUFTaEMsU0FBU0UsRUFBY0YsR0FDckIsR0FBMkIsb0JBQXZCRixFQUFTckYsS0FBS3VGLEdBQ2hCLE9BQU8sRUFHVCxJQUFJOUQsRUFBWWxCLE9BQU9tRixlQUFlSCxHQUN0QyxPQUFxQixPQUFkOUQsR0FBc0JBLElBQWNsQixPQUFPa0IsVUF1Q3BELFNBQVNrRSxFQUFXSixHQUNsQixNQUE4QixzQkFBdkJGLEVBQVNyRixLQUFLdUYsR0F3RXZCLFNBQVNLLEVBQVFDLEVBQUtDLEdBRXBCLEdBQUlELFFBVUosR0FMbUIsaUJBQVJBLElBRVRBLEVBQU0sQ0FBQ0EsSUFHTFAsRUFBUU8sR0FFVixJQUFLLElBQUloRyxFQUFJLEVBQUdDLEVBQUkrRixFQUFJRSxPQUFRbEcsRUFBSUMsRUFBR0QsSUFDckNpRyxFQUFHOUYsS0FBSyxLQUFNNkYsRUFBSWhHLEdBQUlBLEVBQUdnRyxRQUkzQixJQUFLLElBQUl6RSxLQUFPeUUsRUFDVnRGLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzZGLEVBQUt6RSxJQUM1QzBFLEVBQUc5RixLQUFLLEtBQU02RixFQUFJekUsR0FBTUEsRUFBS3lFLEdBMkVyQ3hHLEVBQU9ELFFBQVUsQ0FDZmtHLFFBQVNBLEVBQ1RVLGNBMVJGLFNBQXVCVCxHQUNyQixNQUE4Qix5QkFBdkJGLEVBQVNyRixLQUFLdUYsSUEwUnJCVSxTQXRTRixTQUFrQlYsR0FDaEIsT0FBZSxPQUFSQSxJQUFpQkMsRUFBWUQsSUFBNEIsT0FBcEJBLEVBQUlXLGNBQXlCVixFQUFZRCxFQUFJVyxjQUNoRCxtQkFBN0JYLEVBQUlXLFlBQVlELFVBQTJCVixFQUFJVyxZQUFZRCxTQUFTVixJQXFTaEZZLFdBbFJGLFNBQW9CWixHQUNsQixNQUE0QixvQkFBYmEsVUFBOEJiLGFBQWVhLFVBa1I1REMsa0JBelFGLFNBQTJCZCxHQU96QixNQUw0QixvQkFBaEJlLGFBQWlDQSxZQUFrQixPQUNwREEsWUFBWUMsT0FBT2hCLEdBRW5CLEdBQVVBLEVBQVUsUUFBTUEsRUFBSWlCLGtCQUFrQkYsYUFxUTNERyxTQTFQRixTQUFrQmxCLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQTBQZG1CLFNBalBGLFNBQWtCbkIsR0FDaEIsTUFBc0IsaUJBQVJBLEdBaVBkOUIsU0FBVUEsRUFDVmdDLGNBQWVBLEVBQ2ZELFlBQWFBLEVBQ2JtQixPQWxORixTQUFnQnBCLEdBQ2QsTUFBOEIsa0JBQXZCRixFQUFTckYsS0FBS3VGLElBa05yQnFCLE9Bek1GLFNBQWdCckIsR0FDZCxNQUE4QixrQkFBdkJGLEVBQVNyRixLQUFLdUYsSUF5TXJCc0IsT0FoTUYsU0FBZ0J0QixHQUNkLE1BQThCLGtCQUF2QkYsRUFBU3JGLEtBQUt1RixJQWdNckJJLFdBQVlBLEVBQ1ptQixTQTlLRixTQUFrQnZCLEdBQ2hCLE9BQU85QixFQUFTOEIsSUFBUUksRUFBV0osRUFBSXdCLE9BOEt2Q0Msa0JBcktGLFNBQTJCekIsR0FDekIsTUFBa0Msb0JBQXBCMEIsaUJBQW1DMUIsYUFBZTBCLGlCQXFLaEVDLHFCQXpJRixXQUNFLE9BQXlCLG9CQUFkQyxXQUFvRCxnQkFBdEJBLFVBQVVDLFNBQ1ksaUJBQXRCRCxVQUFVQyxTQUNZLE9BQXRCRCxVQUFVQyxXQUkvQixvQkFBWHhELFFBQ2Esb0JBQWJ5RCxXQWtJVHpCLFFBQVNBLEVBQ1QwQixNQXZFRixTQUFTQSxJQUNQLElBQUlDLEVBQVMsR0FDYixTQUFTQyxFQUFZakMsRUFBS25FLEdBQ3BCcUUsRUFBYzhCLEVBQU9uRyxLQUFTcUUsRUFBY0YsR0FDOUNnQyxFQUFPbkcsR0FBT2tHLEVBQU1DLEVBQU9uRyxHQUFNbUUsR0FDeEJFLEVBQWNGLEdBQ3ZCZ0MsRUFBT25HLEdBQU9rRyxFQUFNLEdBQUkvQixHQUNmRCxFQUFRQyxHQUNqQmdDLEVBQU9uRyxHQUFPbUUsRUFBSWtDLFFBRWxCRixFQUFPbkcsR0FBT21FLEVBSWxCLElBQUssSUFBSTFGLEVBQUksRUFBR0MsRUFBSTRILFVBQVUzQixPQUFRbEcsRUFBSUMsRUFBR0QsSUFDM0MrRixFQUFROEIsVUFBVTdILEdBQUkySCxHQUV4QixPQUFPRCxHQXVEUEksT0E1Q0YsU0FBZ0JyRCxFQUFHc0QsRUFBR0MsR0FRcEIsT0FQQWpDLEVBQVFnQyxHQUFHLFNBQXFCckMsRUFBS25FLEdBRWpDa0QsRUFBRWxELEdBREF5RyxHQUEwQixtQkFBUnRDLEVBQ1hsRSxFQUFLa0UsRUFBS3NDLEdBRVZ0QyxLQUdOakIsR0FxQ1B3RCxLQWhLRixTQUFjQyxHQUNaLE9BQU9BLEVBQUlELEtBQU9DLEVBQUlELE9BQVNDLEVBQUlDLFFBQVEsYUFBYyxLQWdLekRDLFNBN0JGLFNBQWtCQyxHQUloQixPQUg4QixRQUExQkEsRUFBUUMsV0FBVyxLQUNyQkQsRUFBVUEsRUFBUVQsTUFBTSxJQUVuQlMsSyxnQkNsVVQsSUFBSXhELEVBQUssRUFBUSxHQUNiMEQsRUFBYSxFQUFRLElBQ3pCL0ksRUFBT0QsUUFBVSxFQUFRLEdBQW9CLFNBQVVtQyxFQUFRSCxFQUFLTixHQUNsRSxPQUFPNEQsRUFBR0MsRUFBRXBELEVBQVFILEVBQUtnSCxFQUFXLEVBQUd0SCxLQUNyQyxTQUFVUyxFQUFRSCxFQUFLTixHQUV6QixPQURBUyxFQUFPSCxHQUFPTixFQUNQUyxJLGdCQ05ULElBQUlNLEVBQVMsRUFBUSxHQUNqQkUsRUFBTyxFQUFRLElBQ2ZzRyxFQUFNLEVBQVEsSUFDZEMsRUFBTSxFQUFRLEdBQVIsQ0FBa0IsT0FDeEJDLEVBQVksRUFBUSxLQUVwQkMsR0FBTyxHQUFLRCxHQUFXRSxNQURYLFlBR2hCLEVBQVEsSUFBV0MsY0FBZ0IsU0FBVWhGLEdBQzNDLE9BQU82RSxFQUFVdkksS0FBSzBELEtBR3ZCckUsRUFBT0QsUUFBVSxTQUFVd0YsRUFBR3hELEVBQUttRSxFQUFLb0QsR0FDdkMsSUFBSWhELEVBQTJCLG1CQUFQSixFQUNwQkksSUFBWTBDLEVBQUk5QyxFQUFLLFNBQVd4RCxFQUFLd0QsRUFBSyxPQUFRbkUsSUFDbER3RCxFQUFFeEQsS0FBU21FLElBQ1hJLElBQVkwQyxFQUFJOUMsRUFBSytDLElBQVF2RyxFQUFLd0QsRUFBSytDLEVBQUsxRCxFQUFFeEQsR0FBTyxHQUFLd0QsRUFBRXhELEdBQU9vSCxFQUFJSSxLQUFLQyxPQUFPekgsTUFDbkZ3RCxJQUFNL0MsRUFDUitDLEVBQUV4RCxHQUFPbUUsRUFDQ29ELEVBR0QvRCxFQUFFeEQsR0FDWHdELEVBQUV4RCxHQUFPbUUsRUFFVHhELEVBQUs2QyxFQUFHeEQsRUFBS21FLFdBTE5YLEVBQUV4RCxHQUNUVyxFQUFLNkMsRUFBR3hELEVBQUttRSxPQU9kbEMsU0FBUzVCLFVBdkJJLFlBdUJrQixXQUNoQyxNQUFzQixtQkFBUmhDLE1BQXNCQSxLQUFLNkksSUFBUUMsRUFBVXZJLEtBQUtQLFUsZ0JDN0JsRSxJQUFJeUMsRUFBVSxFQUFRLEdBQ2xCNEcsRUFBUSxFQUFRLEdBQ2hCaEUsRUFBVSxFQUFRLElBQ2xCaUUsRUFBTyxLQUVQQyxFQUFhLFNBQVVDLEVBQVFDLEVBQUtDLEVBQVdySSxHQUNqRCxJQUFJK0IsRUFBSWdHLE9BQU8vRCxFQUFRbUUsSUFDbkJHLEVBQUssSUFBTUYsRUFFZixNQURrQixLQUFkQyxJQUFrQkMsR0FBTSxJQUFNRCxFQUFZLEtBQU9OLE9BQU8vSCxHQUFPa0gsUUFBUWUsRUFBTSxVQUFZLEtBQ3RGSyxFQUFLLElBQU12RyxFQUFJLEtBQU9xRyxFQUFNLEtBRXJDN0osRUFBT0QsUUFBVSxTQUFVaUssRUFBTXRGLEdBQy9CLElBQUlhLEVBQUksR0FDUkEsRUFBRXlFLEdBQVF0RixFQUFLaUYsR0FDZjlHLEVBQVFBLEVBQVFhLEVBQUliLEVBQVFPLEVBQUlxRyxHQUFNLFdBQ3BDLElBQUlRLEVBQU8sR0FBR0QsR0FBTSxLQUNwQixPQUFPQyxJQUFTQSxFQUFLQyxlQUFpQkQsRUFBS2IsTUFBTSxLQUFLMUMsT0FBUyxLQUM3RCxTQUFVbkIsSyxjQ2pCaEIsSUFBSWxELEVBQWlCLEdBQUdBLGVBQ3hCckMsRUFBT0QsUUFBVSxTQUFVc0UsRUFBSXRDLEdBQzdCLE9BQU9NLEVBQWUxQixLQUFLMEQsRUFBSXRDLEssZ0JDRGpDLElBQUlvSSxFQUFVLEVBQVEsSUFDbEIxRSxFQUFVLEVBQVEsSUFDdEJ6RixFQUFPRCxRQUFVLFNBQVVzRSxHQUN6QixPQUFPOEYsRUFBUTFFLEVBQVFwQixNLGdCQ0p6QixJQUFJK0YsRUFBTSxFQUFRLElBQ2RyQixFQUFhLEVBQVEsSUFDckJzQixFQUFZLEVBQVEsSUFDcEJqRixFQUFjLEVBQVEsSUFDdEI0RCxFQUFNLEVBQVEsSUFDZDdELEVBQWlCLEVBQVEsS0FDekJtRixFQUFPcEosT0FBT3FKLHlCQUVsQnhLLEVBQVF1RixFQUFJLEVBQVEsR0FBb0JnRixFQUFPLFNBQWtDL0UsRUFBRzdCLEdBR2xGLEdBRkE2QixFQUFJOEUsRUFBVTlFLEdBQ2Q3QixFQUFJMEIsRUFBWTFCLEdBQUcsR0FDZnlCLEVBQWdCLElBQ2xCLE9BQU9tRixFQUFLL0UsRUFBRzdCLEdBQ2YsTUFBT2lCLElBQ1QsR0FBSXFFLEVBQUl6RCxFQUFHN0IsR0FBSSxPQUFPcUYsR0FBWXFCLEVBQUk5RSxFQUFFM0UsS0FBSzRFLEVBQUc3QixHQUFJNkIsRUFBRTdCLE0sZ0JDYnhELElBQUlzRixFQUFNLEVBQVEsSUFDZHdCLEVBQVcsRUFBUSxHQUNuQkMsRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFDcENDLEVBQWN4SixPQUFPa0IsVUFFekJwQyxFQUFPRCxRQUFVbUIsT0FBT21GLGdCQUFrQixTQUFVZCxHQUVsRCxPQURBQSxFQUFJaUYsRUFBU2pGLEdBQ1R5RCxFQUFJekQsRUFBR2tGLEdBQWtCbEYsRUFBRWtGLEdBQ0gsbUJBQWpCbEYsRUFBRXNCLGFBQTZCdEIsYUFBYUEsRUFBRXNCLFlBQ2hEdEIsRUFBRXNCLFlBQVl6RSxVQUNkbUQsYUFBYXJFLE9BQVN3SixFQUFjLE8sY0NYL0MsSUFBSWpJLEVBQU96QyxFQUFPRCxRQUFVLENBQUU0SyxRQUFTLFVBQ3JCLGlCQUFQQyxNQUFpQkEsSUFBTW5JLEksZ0JDQWxDLElBQUlvSSxFQUFZLEVBQVEsSUFDeEI3SyxFQUFPRCxRQUFVLFNBQVUwRyxFQUFJcUUsRUFBTXBFLEdBRW5DLEdBREFtRSxFQUFVcEUsUUFDRzFDLElBQVQrRyxFQUFvQixPQUFPckUsRUFDL0IsT0FBUUMsR0FDTixLQUFLLEVBQUcsT0FBTyxTQUFVekIsR0FDdkIsT0FBT3dCLEVBQUc5RixLQUFLbUssRUFBTTdGLElBRXZCLEtBQUssRUFBRyxPQUFPLFNBQVVBLEVBQUdzRCxHQUMxQixPQUFPOUIsRUFBRzlGLEtBQUttSyxFQUFNN0YsRUFBR3NELElBRTFCLEtBQUssRUFBRyxPQUFPLFNBQVV0RCxFQUFHc0QsRUFBRzFILEdBQzdCLE9BQU80RixFQUFHOUYsS0FBS21LLEVBQU03RixFQUFHc0QsRUFBRzFILElBRy9CLE9BQU8sV0FDTCxPQUFPNEYsRUFBR3NFLE1BQU1ELEVBQU16QyxjLGNDakIxQixJQUFJckMsRUFBVyxHQUFHQSxTQUVsQmhHLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLE9BQU8yQixFQUFTckYsS0FBSzBELEdBQUkrRCxNQUFNLEdBQUksSyxjQ0ZyQyxJQUFJNEMsRUFBT3hHLEtBQUt3RyxLQUNaQyxFQUFRekcsS0FBS3lHLE1BQ2pCakwsRUFBT0QsUUFBVSxTQUFVc0UsR0FDekIsT0FBTzZHLE1BQU03RyxHQUFNQSxHQUFNLEdBQUtBLEVBQUssRUFBSTRHLEVBQVFELEdBQU0zRyxLLDZCQ0h2RCxJQUFJb0YsRUFBUSxFQUFRLEdBRXBCekosRUFBT0QsUUFBVSxTQUFVb0wsRUFBUUMsR0FDakMsUUFBU0QsR0FBVTFCLEdBQU0sV0FFdkIyQixFQUFNRCxFQUFPeEssS0FBSyxNQUFNLGNBQTZCLEdBQUt3SyxFQUFPeEssS0FBSyxXLGdCQ0wxRSxJQUFJeUQsRUFBVyxFQUFRLEdBR3ZCcEUsRUFBT0QsUUFBVSxTQUFVc0UsRUFBSWIsR0FDN0IsSUFBS1ksRUFBU0MsR0FBSyxPQUFPQSxFQUMxQixJQUFJb0MsRUFBSVAsRUFDUixHQUFJMUMsR0FBa0MsbUJBQXJCaUQsRUFBS3BDLEVBQUcyQixZQUE0QjVCLEVBQVM4QixFQUFNTyxFQUFHOUYsS0FBSzBELElBQU0sT0FBTzZCLEVBQ3pGLEdBQWdDLG1CQUFwQk8sRUFBS3BDLEVBQUdnSCxXQUEyQmpILEVBQVM4QixFQUFNTyxFQUFHOUYsS0FBSzBELElBQU0sT0FBTzZCLEVBQ25GLElBQUsxQyxHQUFrQyxtQkFBckJpRCxFQUFLcEMsRUFBRzJCLFlBQTRCNUIsRUFBUzhCLEVBQU1PLEVBQUc5RixLQUFLMEQsSUFBTSxPQUFPNkIsRUFDMUYsTUFBTTVCLFVBQVUsNkMsY0NUbEJ0RSxFQUFPRCxRQUFVLFNBQVVzRSxHQUN6QixHQUFVTixNQUFOTSxFQUFpQixNQUFNQyxVQUFVLHlCQUEyQkQsR0FDaEUsT0FBT0EsSSxnQkNGVCxJQUFJeEIsRUFBVSxFQUFRLEdBQ2xCSixFQUFPLEVBQVEsSUFDZmdILEVBQVEsRUFBUSxHQUNwQnpKLEVBQU9ELFFBQVUsU0FBVXVMLEVBQUs1RyxHQUM5QixJQUFJK0IsR0FBTWhFLEVBQUt2QixRQUFVLElBQUlvSyxJQUFRcEssT0FBT29LLEdBQ3hDcEksRUFBTSxHQUNWQSxFQUFJb0ksR0FBTzVHLEVBQUsrQixHQUNoQjVELEVBQVFBLEVBQVFXLEVBQUlYLEVBQVFPLEVBQUlxRyxHQUFNLFdBQWNoRCxFQUFHLE1BQVEsU0FBVXZELEssZ0JDRDNFLElBQUlOLEVBQU0sRUFBUSxJQUNkdUgsRUFBVSxFQUFRLElBQ2xCSyxFQUFXLEVBQVEsR0FDbkJlLEVBQVcsRUFBUSxHQUNuQkMsRUFBTSxFQUFRLElBQ2xCeEwsRUFBT0QsUUFBVSxTQUFVMEwsRUFBTUMsR0FDL0IsSUFBSUMsRUFBaUIsR0FBUkYsRUFDVEcsRUFBb0IsR0FBUkgsRUFDWkksRUFBa0IsR0FBUkosRUFDVkssRUFBbUIsR0FBUkwsRUFDWE0sRUFBd0IsR0FBUk4sRUFDaEJPLEVBQW1CLEdBQVJQLEdBQWFNLEVBQ3hCakssRUFBUzRKLEdBQVdGLEVBQ3hCLE9BQU8sU0FBVVMsRUFBT0MsRUFBWXBCLEdBUWxDLElBUEEsSUFNSTVFLEVBQUtpRyxFQU5MNUcsRUFBSWlGLEVBQVN5QixHQUNiOUwsRUFBT2dLLEVBQVE1RSxHQUNmRCxFQUFJMUMsRUFBSXNKLEVBQVlwQixFQUFNLEdBQzFCcEUsRUFBUzZFLEVBQVNwTCxFQUFLdUcsUUFDdkIwRixFQUFRLEVBQ1JsRSxFQUFTeUQsRUFBUzdKLEVBQU9tSyxFQUFPdkYsR0FBVWtGLEVBQVk5SixFQUFPbUssRUFBTyxRQUFLbEksRUFFdkUyQyxFQUFTMEYsRUFBT0EsSUFBUyxJQUFJSixHQUFZSSxLQUFTak0sS0FFdERnTSxFQUFNN0csRUFETlksRUFBTS9GLEVBQUtpTSxHQUNFQSxFQUFPN0csR0FDaEJrRyxHQUNGLEdBQUlFLEVBQVF6RCxFQUFPa0UsR0FBU0QsT0FDdkIsR0FBSUEsRUFBSyxPQUFRVixHQUNwQixLQUFLLEVBQUcsT0FBTyxFQUNmLEtBQUssRUFBRyxPQUFPdkYsRUFDZixLQUFLLEVBQUcsT0FBT2tHLEVBQ2YsS0FBSyxFQUFHbEUsRUFBT21FLEtBQUtuRyxRQUNmLEdBQUk0RixFQUFVLE9BQU8sRUFHaEMsT0FBT0MsR0FBaUIsRUFBSUYsR0FBV0MsRUFBV0EsRUFBVzVELEssNkJDeENqRSxHQUFJLEVBQVEsR0FBbUIsQ0FDN0IsSUFBSW9FLEVBQVUsRUFBUSxJQUNsQjlKLEVBQVMsRUFBUSxHQUNqQmlILEVBQVEsRUFBUSxHQUNoQjVHLEVBQVUsRUFBUSxHQUNsQjBKLEVBQVMsRUFBUSxJQUNqQkMsRUFBVSxFQUFRLElBQ2xCNUosRUFBTSxFQUFRLElBQ2Q2SixFQUFhLEVBQVEsSUFDckJDLEVBQWUsRUFBUSxJQUN2QmhLLEVBQU8sRUFBUSxJQUNmaUssRUFBYyxFQUFRLElBQ3RCNUgsRUFBWSxFQUFRLElBQ3BCd0csRUFBVyxFQUFRLEdBQ25CcUIsRUFBVSxFQUFRLEtBQ2xCQyxFQUFrQixFQUFRLElBQzFCekgsRUFBYyxFQUFRLElBQ3RCNEQsRUFBTSxFQUFRLElBQ2Q4RCxFQUFVLEVBQVEsSUFDbEIxSSxFQUFXLEVBQVEsR0FDbkJvRyxFQUFXLEVBQVEsR0FDbkJ1QyxFQUFjLEVBQVEsSUFDdEJqTCxFQUFTLEVBQVEsSUFDakJ1RSxFQUFpQixFQUFRLElBQ3pCMkcsRUFBTyxFQUFRLElBQWtCMUgsRUFDakMySCxFQUFZLEVBQVEsSUFDcEJwSSxFQUFNLEVBQVEsSUFDZHFJLEVBQU0sRUFBUSxHQUNkQyxFQUFvQixFQUFRLElBQzVCQyxFQUFzQixFQUFRLElBQzlCQyxFQUFxQixFQUFRLElBQzdCQyxFQUFpQixFQUFRLElBQ3pCQyxFQUFZLEVBQVEsSUFDcEJDLEVBQWMsRUFBUSxJQUN0QkMsRUFBYSxFQUFRLElBQ3JCQyxFQUFZLEVBQVEsSUFDcEJDLEVBQWtCLEVBQVEsS0FDMUJDLEVBQU0sRUFBUSxHQUNkQyxFQUFRLEVBQVEsSUFDaEJ4SSxFQUFLdUksRUFBSXRJLEVBQ1RnRixFQUFPdUQsRUFBTXZJLEVBQ2J3SSxFQUFhdEwsRUFBT3NMLFdBQ3BCeEosRUFBWTlCLEVBQU84QixVQUNuQnlKLEVBQWF2TCxFQUFPdUwsV0FLcEJDLEVBQWFDLE1BQWUsVUFDNUJDLEVBQWUxQixFQUFRdkYsWUFDdkJrSCxFQUFZM0IsRUFBUTRCLFNBQ3BCQyxFQUFlbEIsRUFBa0IsR0FDakNtQixFQUFjbkIsRUFBa0IsR0FDaENvQixFQUFZcEIsRUFBa0IsR0FDOUJxQixFQUFhckIsRUFBa0IsR0FDL0JzQixFQUFZdEIsRUFBa0IsR0FDOUJ1QixHQUFpQnZCLEVBQWtCLEdBQ25Dd0IsR0FBZ0J2QixHQUFvQixHQUNwQ3dCLEdBQWV4QixHQUFvQixHQUNuQ3lCLEdBQWN2QixFQUFld0IsT0FDN0JDLEdBQVl6QixFQUFlMEIsS0FDM0JDLEdBQWUzQixFQUFlNEIsUUFDOUJDLEdBQW1CbkIsRUFBV29CLFlBQzlCQyxHQUFjckIsRUFBV3NCLE9BQ3pCQyxHQUFtQnZCLEVBQVd3QixZQUM5QkMsR0FBWXpCLEVBQVd6RSxLQUN2Qm1HLEdBQVkxQixFQUFXMkIsS0FDdkJDLEdBQWE1QixFQUFXNUYsTUFDeEJ5SCxHQUFnQjdCLEVBQVdoSSxTQUMzQjhKLEdBQXNCOUIsRUFBVytCLGVBQ2pDQyxHQUFXOUMsRUFBSSxZQUNmK0MsR0FBTS9DLEVBQUksZUFDVmdELEdBQW9CckwsRUFBSSxxQkFDeEJzTCxHQUFrQnRMLEVBQUksbUJBQ3RCdUwsR0FBbUI3RCxFQUFPOEQsT0FDMUJDLEdBQWMvRCxFQUFPZ0UsTUFDckJDLEdBQU9qRSxFQUFPaUUsS0FHZEMsR0FBT3RELEVBQWtCLEdBQUcsU0FBVTVILEVBQUdtQixHQUMzQyxPQUFPZ0ssR0FBU3JELEVBQW1COUgsRUFBR0EsRUFBRTRLLEtBQW1CekosTUFHekRpSyxHQUFnQmxILEdBQU0sV0FFeEIsT0FBMEQsSUFBbkQsSUFBSXNFLEVBQVcsSUFBSTZDLFlBQVksQ0FBQyxJQUFJekosUUFBUSxNQUdqRDBKLEtBQWU5QyxLQUFnQkEsRUFBb0IsVUFBRStDLEtBQU9ySCxHQUFNLFdBQ3BFLElBQUlzRSxFQUFXLEdBQUcrQyxJQUFJLE9BR3BCQyxHQUFXLFNBQVUxTSxFQUFJMk0sR0FDM0IsSUFBSUMsRUFBU2xNLEVBQVVWLEdBQ3ZCLEdBQUk0TSxFQUFTLEdBQUtBLEVBQVNELEVBQU8sTUFBTWxELEVBQVcsaUJBQ25ELE9BQU9tRCxHQUdMQyxHQUFXLFNBQVU3TSxHQUN2QixHQUFJRCxFQUFTQyxJQUFPaU0sTUFBZWpNLEVBQUksT0FBT0EsRUFDOUMsTUFBTUMsRUFBVUQsRUFBSywyQkFHbkJxTSxHQUFXLFNBQVVTLEVBQUd6SyxHQUMxQixJQUFNdEMsRUFBUytNLE1BQU1qQixNQUFxQmlCLEdBQ3hDLE1BQU03TSxFQUFVLHdDQUNoQixPQUFPLElBQUk2TSxFQUFFekssSUFHYjBLLEdBQWtCLFNBQVU3TCxFQUFHOEwsR0FDakMsT0FBT0MsR0FBU2pFLEVBQW1COUgsRUFBR0EsRUFBRTRLLEtBQW1Ca0IsSUFHekRDLEdBQVcsU0FBVUgsRUFBR0UsR0FJMUIsSUFIQSxJQUFJakYsRUFBUSxFQUNSMUYsRUFBUzJLLEVBQUszSyxPQUNkd0IsRUFBU3dJLEdBQVNTLEVBQUd6SyxHQUNsQkEsRUFBUzBGLEdBQU9sRSxFQUFPa0UsR0FBU2lGLEVBQUtqRixLQUM1QyxPQUFPbEUsR0FHTHFKLEdBQVksU0FBVWxOLEVBQUl0QyxFQUFLeVAsR0FDakNuTSxFQUFHaEIsRUFBSXRDLEVBQUssQ0FBRVYsSUFBSyxXQUFjLE9BQU9qQixLQUFLcVIsR0FBR0QsT0FHOUNFLEdBQVEsU0FBYzNPLEdBQ3hCLElBS0l2QyxFQUFHa0csRUFBUW9JLEVBQVE1RyxFQUFReUosRUFBTUMsRUFMakNyTSxFQUFJaUYsRUFBU3pILEdBQ2I4TyxFQUFPeEosVUFBVTNCLE9BQ2pCb0wsRUFBUUQsRUFBTyxFQUFJeEosVUFBVSxRQUFLdEUsRUFDbENnTyxPQUFvQmhPLElBQVYrTixFQUNWRSxFQUFTL0UsRUFBVTFILEdBRXZCLEdBQWN4QixNQUFWaU8sSUFBd0JqRixFQUFZaUYsR0FBUyxDQUMvQyxJQUFLSixFQUFXSSxFQUFPclIsS0FBSzRFLEdBQUl1SixFQUFTLEdBQUl0TyxFQUFJLElBQUttUixFQUFPQyxFQUFTSyxRQUFRQyxLQUFNMVIsSUFDbEZzTyxFQUFPekMsS0FBS3NGLEVBQUtsUSxPQUNqQjhELEVBQUl1SixFQUdSLElBRElpRCxHQUFXRixFQUFPLElBQUdDLEVBQVFsUCxFQUFJa1AsRUFBT3pKLFVBQVUsR0FBSSxJQUNyRDdILEVBQUksRUFBR2tHLEVBQVM2RSxFQUFTaEcsRUFBRW1CLFFBQVN3QixFQUFTd0ksR0FBU3RRLEtBQU1zRyxHQUFTQSxFQUFTbEcsRUFBR0EsSUFDcEYwSCxFQUFPMUgsR0FBS3VSLEVBQVVELEVBQU12TSxFQUFFL0UsR0FBSUEsR0FBSytFLEVBQUUvRSxHQUUzQyxPQUFPMEgsR0FHTGlLLEdBQU0sV0FJUixJQUhBLElBQUkvRixFQUFRLEVBQ1IxRixFQUFTMkIsVUFBVTNCLE9BQ25Cd0IsRUFBU3dJLEdBQVN0USxLQUFNc0csR0FDckJBLEVBQVMwRixHQUFPbEUsRUFBT2tFLEdBQVMvRCxVQUFVK0QsS0FDakQsT0FBT2xFLEdBSUxrSyxLQUFrQnJFLEdBQWN0RSxHQUFNLFdBQWNxRyxHQUFvQm5QLEtBQUssSUFBSW9OLEVBQVcsT0FFNUZzRSxHQUFrQixXQUNwQixPQUFPdkMsR0FBb0IvRSxNQUFNcUgsR0FBZ0J4QyxHQUFXalAsS0FBS3VRLEdBQVM5USxPQUFTOFEsR0FBUzlRLE1BQU9pSSxZQUdqR2lLLEdBQVEsQ0FDVkMsV0FBWSxTQUFvQjFPLEVBQVEyTyxHQUN0QyxPQUFPN0UsRUFBZ0JoTixLQUFLdVEsR0FBUzlRLE1BQU95RCxFQUFRMk8sRUFBT25LLFVBQVUzQixPQUFTLEVBQUkyQixVQUFVLFFBQUt0RSxJQUVuRzBPLE1BQU8sU0FBZXZHLEdBQ3BCLE9BQU9zQyxFQUFXMEMsR0FBUzlRLE1BQU84TCxFQUFZN0QsVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLElBRXRGMk8sS0FBTSxTQUFjalIsR0FDbEIsT0FBT2lNLEVBQVUzQyxNQUFNbUcsR0FBUzlRLE1BQU9pSSxZQUV6Q3NLLE9BQVEsU0FBZ0J6RyxHQUN0QixPQUFPa0YsR0FBZ0JoUixLQUFNa08sRUFBWTRDLEdBQVM5USxNQUFPOEwsRUFDdkQ3RCxVQUFVM0IsT0FBUyxFQUFJMkIsVUFBVSxRQUFLdEUsS0FFMUM2TyxLQUFNLFNBQWNDLEdBQ2xCLE9BQU9wRSxFQUFVeUMsR0FBUzlRLE1BQU95UyxFQUFXeEssVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLElBRXBGK08sVUFBVyxTQUFtQkQsR0FDNUIsT0FBT25FLEdBQWV3QyxHQUFTOVEsTUFBT3lTLEVBQVd4SyxVQUFVM0IsT0FBUyxFQUFJMkIsVUFBVSxRQUFLdEUsSUFFekZ3QyxRQUFTLFNBQWlCMkYsR0FDeEJtQyxFQUFhNkMsR0FBUzlRLE1BQU84TCxFQUFZN0QsVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLElBRWpGZ1AsUUFBUyxTQUFpQkMsR0FDeEIsT0FBT3BFLEdBQWFzQyxHQUFTOVEsTUFBTzRTLEVBQWUzSyxVQUFVM0IsT0FBUyxFQUFJMkIsVUFBVSxRQUFLdEUsSUFFM0ZrUCxTQUFVLFNBQWtCRCxHQUMxQixPQUFPckUsR0FBY3VDLEdBQVM5USxNQUFPNFMsRUFBZTNLLFVBQVUzQixPQUFTLEVBQUkyQixVQUFVLFFBQUt0RSxJQUU1RndGLEtBQU0sU0FBYzJKLEdBQ2xCLE9BQU96RCxHQUFVMUUsTUFBTW1HLEdBQVM5USxNQUFPaUksWUFFekMrRyxZQUFhLFNBQXFCNEQsR0FDaEMsT0FBTzdELEdBQWlCcEUsTUFBTW1HLEdBQVM5USxNQUFPaUksWUFFaEQ4SyxJQUFLLFNBQWFyQixHQUNoQixPQUFPckIsR0FBS1MsR0FBUzlRLE1BQU8wUixFQUFPekosVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLElBRTNFdUwsT0FBUSxTQUFnQnBELEdBQ3RCLE9BQU9tRCxHQUFZdEUsTUFBTW1HLEdBQVM5USxNQUFPaUksWUFFM0NtSCxZQUFhLFNBQXFCdEQsR0FDaEMsT0FBT3FELEdBQWlCeEUsTUFBTW1HLEdBQVM5USxNQUFPaUksWUFFaEQrSyxRQUFTLFdBTVAsSUFMQSxJQUlJM1IsRUFIQWlGLEVBQVN3SyxHQURGOVEsTUFDaUJzRyxPQUN4QjJNLEVBQVM3TyxLQUFLeUcsTUFBTXZFLEVBQVMsR0FDN0IwRixFQUFRLEVBRUxBLEVBQVFpSCxHQUNiNVIsRUFOU3JCLEtBTUlnTSxHQU5KaE0sS0FPSmdNLEtBUEloTSxPQU9jc0csR0FQZHRHLEtBUUpzRyxHQUFVakYsRUFDZixPQVRTckIsTUFXYmtULEtBQU0sU0FBY3BILEdBQ2xCLE9BQU9xQyxFQUFVMkMsR0FBUzlRLE1BQU84TCxFQUFZN0QsVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLElBRXJGNEwsS0FBTSxTQUFjNEQsR0FDbEIsT0FBTzdELEdBQVUvTyxLQUFLdVEsR0FBUzlRLE1BQU9tVCxJQUV4Q0MsU0FBVSxTQUFrQkMsRUFBT0MsR0FDakMsSUFBSW5PLEVBQUkyTCxHQUFTOVEsTUFDYnNHLEVBQVNuQixFQUFFbUIsT0FDWGlOLEVBQVM5RyxFQUFnQjRHLEVBQU8vTSxHQUNwQyxPQUFPLElBQUsyRyxFQUFtQjlILEVBQUdBLEVBQUU0SyxLQUE3QixDQUNMNUssRUFBRTRCLE9BQ0Y1QixFQUFFcU8sV0FBYUQsRUFBU3BPLEVBQUVzTyxrQkFDMUJ0SSxRQUFrQnhILElBQVIyUCxFQUFvQmhOLEVBQVNtRyxFQUFnQjZHLEVBQUtoTixJQUFXaU4sTUFLekVHLEdBQVMsU0FBZXRCLEVBQU9rQixHQUNqQyxPQUFPdEMsR0FBZ0JoUixLQUFNd1AsR0FBV2pQLEtBQUt1USxHQUFTOVEsTUFBT29TLEVBQU9rQixLQUdsRUssR0FBTyxTQUFhQyxHQUN0QjlDLEdBQVM5USxNQUNULElBQUk2USxFQUFTRixHQUFTMUksVUFBVSxHQUFJLEdBQ2hDM0IsRUFBU3RHLEtBQUtzRyxPQUNkdU4sRUFBTXpKLEVBQVN3SixHQUNmRSxFQUFNM0ksRUFBUzBJLEVBQUl2TixRQUNuQjBGLEVBQVEsRUFDWixHQUFJOEgsRUFBTWpELEVBQVN2SyxFQUFRLE1BQU1vSCxFQXZLaEIsaUJBd0tqQixLQUFPMUIsRUFBUThILEdBQUs5VCxLQUFLNlEsRUFBUzdFLEdBQVM2SCxFQUFJN0gsTUFHN0MrSCxHQUFhLENBQ2ZqRixRQUFTLFdBQ1AsT0FBT0QsR0FBYXRPLEtBQUt1USxHQUFTOVEsUUFFcEM0TyxLQUFNLFdBQ0osT0FBT0QsR0FBVXBPLEtBQUt1USxHQUFTOVEsUUFFakMwTyxPQUFRLFdBQ04sT0FBT0QsR0FBWWxPLEtBQUt1USxHQUFTOVEsU0FJakNnVSxHQUFZLFNBQVV2USxFQUFROUIsR0FDaEMsT0FBT3FDLEVBQVNQLElBQ1hBLEVBQU95TSxLQUNPLGlCQUFQdk8sR0FDUEEsS0FBTzhCLEdBQ1AyRixRQUFRekgsSUFBUXlILE9BQU96SCxJQUUxQnNTLEdBQVcsU0FBa0N4USxFQUFROUIsR0FDdkQsT0FBT3FTLEdBQVV2USxFQUFROUIsRUFBTXFELEVBQVlyRCxHQUFLLElBQzVDMkssRUFBYSxFQUFHN0ksRUFBTzlCLElBQ3ZCdUksRUFBS3pHLEVBQVE5QixJQUVmdVMsR0FBVyxTQUF3QnpRLEVBQVE5QixFQUFLd1MsR0FDbEQsUUFBSUgsR0FBVXZRLEVBQVE5QixFQUFNcUQsRUFBWXJELEdBQUssS0FDeENxQyxFQUFTbVEsSUFDVHZMLEVBQUl1TCxFQUFNLFdBQ1R2TCxFQUFJdUwsRUFBTSxRQUNWdkwsRUFBSXVMLEVBQU0sUUFFVkEsRUFBS0MsY0FDSnhMLEVBQUl1TCxFQUFNLGNBQWVBLEVBQUtFLFVBQzlCekwsRUFBSXVMLEVBQU0sZ0JBQWlCQSxFQUFLblQsV0FJOUJpRSxFQUFHeEIsRUFBUTlCLEVBQUt3UyxJQUZ2QjFRLEVBQU85QixHQUFPd1MsRUFBSzlTLE1BQ1pvQyxJQUlOdU0sS0FDSHZDLEVBQU12SSxFQUFJK08sR0FDVnpHLEVBQUl0SSxFQUFJZ1AsSUFHVnpSLEVBQVFBLEVBQVFXLEVBQUlYLEVBQVFPLEdBQUtnTixHQUFrQixTQUFVLENBQzNEN0YseUJBQTBCOEosR0FDMUJsVCxlQUFnQm1ULEtBR2Q3SyxHQUFNLFdBQWNvRyxHQUFjbFAsS0FBSyxTQUN6Q2tQLEdBQWdCQyxHQUFzQixXQUNwQyxPQUFPTCxHQUFVOU8sS0FBS1AsUUFJMUIsSUFBSXNVLEdBQXdCL0gsRUFBWSxHQUFJMkYsSUFDNUMzRixFQUFZK0gsR0FBdUJQLElBQ25DelIsRUFBS2dTLEdBQXVCMUUsR0FBVW1FLEdBQVdyRixRQUNqRG5DLEVBQVkrSCxHQUF1QixDQUNqQ3RNLE1BQU8wTCxHQUNQaEQsSUFBS2lELEdBQ0xsTixZQUFhLGFBQ2JiLFNBQVU2SixHQUNWRSxlQUFnQnNDLEtBRWxCZCxHQUFVbUQsR0FBdUIsU0FBVSxLQUMzQ25ELEdBQVVtRCxHQUF1QixhQUFjLEtBQy9DbkQsR0FBVW1ELEdBQXVCLGFBQWMsS0FDL0NuRCxHQUFVbUQsR0FBdUIsU0FBVSxLQUMzQ3JQLEVBQUdxUCxHQUF1QnpFLEdBQUssQ0FDN0I1TyxJQUFLLFdBQWMsT0FBT2pCLEtBQUtrUSxPQUlqQ3RRLEVBQU9ELFFBQVUsU0FBVXVMLEVBQUswRixFQUFPMkQsRUFBU0MsR0FFOUMsSUFBSTVLLEVBQU9zQixJQURYc0osSUFBWUEsR0FDZ0IsVUFBWSxJQUFNLFFBQzFDQyxFQUFTLE1BQVF2SixFQUNqQndKLEVBQVMsTUFBUXhKLEVBQ2pCeUosRUFBYXZTLEVBQU93SCxHQUNwQmdMLEVBQU9ELEdBQWMsR0FDckJFLEVBQU1GLEdBQWMxTyxFQUFlME8sR0FDbkNHLEdBQVVILElBQWV4SSxFQUFPNEksSUFDaEM1UCxFQUFJLEdBQ0o2UCxFQUFzQkwsR0FBY0EsRUFBb0IsVUFVeERNLEVBQWEsU0FBVXZLLEVBQU1zQixHQUMvQi9HLEVBQUd5RixFQUFNc0IsRUFBTyxDQUNkL0ssSUFBSyxXQUNILE9BWk8sU0FBVXlKLEVBQU1zQixHQUMzQixJQUFJckcsRUFBTytFLEVBQUsyRyxHQUNoQixPQUFPMUwsRUFBS3VQLEVBQUVULEdBQVF6SSxFQUFRNEUsRUFBUWpMLEVBQUs5RSxFQUFHMFAsSUFVbkMzUCxDQUFPWixLQUFNZ00sSUFFdEIwRSxJQUFLLFNBQVVyUCxHQUNiLE9BWE8sU0FBVXFKLEVBQU1zQixFQUFPM0ssR0FDbEMsSUFBSXNFLEVBQU8rRSxFQUFLMkcsR0FDWm1ELElBQVNuVCxHQUFTQSxFQUFRK0MsS0FBSytRLE1BQU05VCxJQUFVLEVBQUksRUFBSUEsRUFBUSxJQUFPLElBQWUsSUFBUkEsR0FDakZzRSxFQUFLdVAsRUFBRVIsR0FBUTFJLEVBQVE0RSxFQUFRakwsRUFBSzlFLEVBQUdRLEVBQU9rUCxJQVFuQzZFLENBQU9wVixLQUFNZ00sRUFBTzNLLElBRTdCTCxZQUFZLEtBR1o4VCxHQUNGSCxFQUFhSixHQUFRLFNBQVU3SixFQUFNL0UsRUFBTTBQLEVBQVNDLEdBQ2xEakosRUFBVzNCLEVBQU1pSyxFQUFZL0ssRUFBTSxNQUNuQyxJQUVJN0MsRUFBUXdPLEVBQVlqUCxFQUFRa1AsRUFGNUJ4SixFQUFRLEVBQ1I2RSxFQUFTLEVBRWIsR0FBSzdNLEVBQVMyQixHQUlQLE1BQUlBLGFBQWdCbUksR0FoVWQsZ0JBZ1UrQjBILEVBQVE5SSxFQUFRL0csS0EvVDlDLHFCQStUd0U2UCxHQWEvRSxPQUFJdEYsTUFBZXZLLEVBQ2pCdUwsR0FBU3lELEVBQVloUCxHQUVyQjJMLEdBQU0vUSxLQUFLb1UsRUFBWWhQLEdBZjlCb0IsRUFBU3BCLEVBQ1RrTCxFQUFTRixHQUFTMEUsRUFBU3pFLEdBQzNCLElBQUk2RSxFQUFPOVAsRUFBSzRQLFdBQ2hCLFFBQWdCNVIsSUFBWjJSLEVBQXVCLENBQ3pCLEdBQUlHLEVBQU83RSxFQUFPLE1BQU1sRCxFQXBTZixpQkFzU1QsSUFEQTZILEVBQWFFLEVBQU81RSxHQUNILEVBQUcsTUFBTW5ELEVBdFNqQixzQkF5U1QsSUFEQTZILEVBQWFwSyxFQUFTbUssR0FBVzFFLEdBQ2hCQyxFQUFTNEUsRUFBTSxNQUFNL0gsRUF6UzdCLGlCQTJTWHBILEVBQVNpUCxFQUFhM0UsT0FmdEJ0SyxFQUFTa0csRUFBUTdHLEdBRWpCb0IsRUFBUyxJQUFJK0csRUFEYnlILEVBQWFqUCxFQUFTc0ssR0EyQnhCLElBUEF0TyxFQUFLb0ksRUFBTSxLQUFNLENBQ2Z2QyxFQUFHcEIsRUFDSGxHLEVBQUdnUSxFQUNIeFEsRUFBR2tWLEVBQ0hoUixFQUFHK0IsRUFDSDRPLEVBQUcsSUFBSW5ILEVBQVVoSCxLQUVaaUYsRUFBUTFGLEdBQVEyTyxFQUFXdkssRUFBTXNCLFFBRTFDZ0osRUFBc0JMLEVBQW9CLFVBQUlqVCxFQUFPNFMsSUFDckRoUyxFQUFLMFMsRUFBcUIsY0FBZUwsSUFDL0J0TCxHQUFNLFdBQ2hCc0wsRUFBVyxPQUNOdEwsR0FBTSxXQUNYLElBQUlzTCxHQUFZLE9BQ1h2SCxHQUFZLFNBQVVzSSxHQUMzQixJQUFJZixFQUNKLElBQUlBLEVBQVcsTUFDZixJQUFJQSxFQUFXLEtBQ2YsSUFBSUEsRUFBV2UsTUFDZCxLQUNEZixFQUFhSixHQUFRLFNBQVU3SixFQUFNL0UsRUFBTTBQLEVBQVNDLEdBRWxELElBQUlFLEVBR0osT0FKQW5KLEVBQVczQixFQUFNaUssRUFBWS9LLEdBSXhCNUYsRUFBUzJCLEdBQ1ZBLGFBQWdCbUksR0E3V1AsZ0JBNld3QjBILEVBQVE5SSxFQUFRL0csS0E1V3ZDLHFCQTRXaUU2UCxPQUMxRDdSLElBQVoyUixFQUNILElBQUlWLEVBQUtqUCxFQUFNZ0wsR0FBUzBFLEVBQVN6RSxHQUFRMEUsUUFDN0IzUixJQUFaMFIsRUFDRSxJQUFJVCxFQUFLalAsRUFBTWdMLEdBQVMwRSxFQUFTekUsSUFDakMsSUFBSWdFLEVBQUtqUCxHQUVidUssTUFBZXZLLEVBQWF1TCxHQUFTeUQsRUFBWWhQLEdBQzlDMkwsR0FBTS9RLEtBQUtvVSxFQUFZaFAsR0FURixJQUFJaVAsRUFBS3BJLEVBQVE3RyxPQVcvQ3NJLEVBQWE0RyxJQUFRalIsU0FBUzVCLFVBQVk0SyxFQUFLZ0ksR0FBTWUsT0FBTy9JLEVBQUtpSSxJQUFRakksRUFBS2dJLElBQU8sU0FBVWpULEdBQ3ZGQSxLQUFPZ1QsR0FBYXJTLEVBQUtxUyxFQUFZaFQsRUFBS2lULEVBQUtqVCxPQUV2RGdULEVBQW9CLFVBQUlLLEVBQ25COUksSUFBUzhJLEVBQW9Cdk8sWUFBY2tPLElBRWxELElBQUlpQixFQUFrQlosRUFBb0JwRixJQUN0Q2lHLElBQXNCRCxJQUNJLFVBQXhCQSxFQUFnQmpWLE1BQTRDZ0QsTUFBeEJpUyxFQUFnQmpWLE1BQ3REbVYsRUFBWS9CLEdBQVdyRixPQUMzQnBNLEVBQUtxUyxFQUFZN0UsSUFBbUIsR0FDcEN4TixFQUFLMFMsRUFBcUI5RSxHQUFhdEcsR0FDdkN0SCxFQUFLMFMsRUFBcUI1RSxJQUFNLEdBQ2hDOU4sRUFBSzBTLEVBQXFCakYsR0FBaUI0RSxJQUV2Q0gsRUFBVSxJQUFJRyxFQUFXLEdBQUc5RSxLQUFRakcsRUFBU2lHLE1BQU9tRixJQUN0RC9QLEVBQUcrUCxFQUFxQm5GLEdBQUssQ0FDM0I1TyxJQUFLLFdBQWMsT0FBTzJJLEtBSTlCekUsRUFBRXlFLEdBQVErSyxFQUVWbFMsRUFBUUEsRUFBUVMsRUFBSVQsRUFBUXFCLEVBQUlyQixFQUFRTyxHQUFLMlIsR0FBY0MsR0FBT3pQLEdBRWxFMUMsRUFBUUEsRUFBUVcsRUFBR3dHLEVBQU0sQ0FDdkI2SixrQkFBbUI3QyxJQUdyQm5PLEVBQVFBLEVBQVFXLEVBQUlYLEVBQVFPLEVBQUlxRyxHQUFNLFdBQWN1TCxFQUFLbUIsR0FBR3hWLEtBQUtvVSxFQUFZLE1BQVEvSyxFQUFNLENBQ3pGb00sS0FBTTFFLEdBQ055RSxHQUFJaEUsS0FwWmdCLHNCQXVaS2lELEdBQXNCMVMsRUFBSzBTLEVBdlpoQyxvQkF1WndFcEUsR0FFOUZuTyxFQUFRQSxFQUFRYSxFQUFHc0csRUFBTXNJLElBRXpCN0UsRUFBV3pELEdBRVhuSCxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxFQUFJeU4sR0FBWTdHLEVBQU0sQ0FBRThHLElBQUtpRCxLQUV6RGxSLEVBQVFBLEVBQVFhLEVBQUliLEVBQVFPLEdBQUs2UyxFQUFtQmpNLEVBQU1tSyxJQUVyRDdILEdBQVc4SSxFQUFvQnBQLFVBQVk2SixLQUFldUYsRUFBb0JwUCxTQUFXNkosSUFFOUZoTixFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxFQUFJcUcsR0FBTSxXQUNwQyxJQUFJc0wsRUFBVyxHQUFHM00sV0FDaEI0QixFQUFNLENBQUU1QixNQUFPMEwsS0FFbkJqUixFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxHQUFLcUcsR0FBTSxXQUNyQyxNQUFPLENBQUMsRUFBRyxHQUFHc0csa0JBQW9CLElBQUlnRixFQUFXLENBQUMsRUFBRyxJQUFJaEYsc0JBQ3BEdEcsR0FBTSxXQUNYMkwsRUFBb0JyRixlQUFlcFAsS0FBSyxDQUFDLEVBQUcsUUFDekNxSixFQUFNLENBQUUrRixlQUFnQnNDLEtBRTdCOUUsRUFBVXZELEdBQVFpTSxFQUFvQkQsRUFBa0JFLEVBQ25ENUosR0FBWTJKLEdBQW1CdlQsRUFBSzBTLEVBQXFCcEYsR0FBVWtHLFNBRXJFbFcsRUFBT0QsUUFBVSxjLGdCQy9keEIsSUFBSXNXLEVBQU0sRUFBUSxLQUNkeFQsRUFBVSxFQUFRLEdBQ2xCeVQsRUFBUyxFQUFRLEdBQVIsQ0FBcUIsWUFDOUIxUixFQUFRMFIsRUFBTzFSLFFBQVUwUixFQUFPMVIsTUFBUSxJQUFLLEVBQVEsT0FFckQyUixFQUF5QixTQUFVMVMsRUFBUTJTLEVBQVcxVSxHQUN4RCxJQUFJMlUsRUFBaUI3UixFQUFNdkQsSUFBSXdDLEdBQy9CLElBQUs0UyxFQUFnQixDQUNuQixJQUFLM1UsRUFBUSxPQUNiOEMsRUFBTWtNLElBQUlqTixFQUFRNFMsRUFBaUIsSUFBSUosR0FFekMsSUFBSUssRUFBY0QsRUFBZXBWLElBQUltVixHQUNyQyxJQUFLRSxFQUFhLENBQ2hCLElBQUs1VSxFQUFRLE9BQ2IyVSxFQUFlM0YsSUFBSTBGLEVBQVdFLEVBQWMsSUFBSUwsR0FDaEQsT0FBT0ssR0EwQlgxVyxFQUFPRCxRQUFVLENBQ2Y2RSxNQUFPQSxFQUNQdU8sSUFBS29ELEVBQ0x2TixJQTNCMkIsU0FBVTJOLEVBQWFwUixFQUFHN0IsR0FDckQsSUFBSWtULEVBQWNMLEVBQXVCaFIsRUFBRzdCLEdBQUcsR0FDL0MsWUFBdUJLLElBQWhCNlMsR0FBb0NBLEVBQVk1TixJQUFJMk4sSUEwQjNEdFYsSUF4QjJCLFNBQVVzVixFQUFhcFIsRUFBRzdCLEdBQ3JELElBQUlrVCxFQUFjTCxFQUF1QmhSLEVBQUc3QixHQUFHLEdBQy9DLFlBQXVCSyxJQUFoQjZTLE9BQTRCN1MsRUFBWTZTLEVBQVl2VixJQUFJc1YsSUF1Qi9EN0YsSUFyQjhCLFNBQVU2RixFQUFhRSxFQUFldFIsRUFBRzdCLEdBQ3ZFNlMsRUFBdUJoUixFQUFHN0IsR0FBRyxHQUFNb04sSUFBSTZGLEVBQWFFLElBcUJwRDdILEtBbkI0QixTQUFVbkwsRUFBUTJTLEdBQzlDLElBQUlJLEVBQWNMLEVBQXVCMVMsRUFBUTJTLEdBQVcsR0FDeER4SCxFQUFPLEdBRVgsT0FESTRILEdBQWFBLEVBQVlyUSxTQUFRLFNBQVV1USxFQUFHL1UsR0FBT2lOLEVBQUszQyxLQUFLdEssTUFDNURpTixHQWdCUGpOLElBZGMsU0FBVXNDLEdBQ3hCLFlBQWNOLElBQVBNLEdBQWlDLGlCQUFOQSxFQUFpQkEsRUFBS21GLE9BQU9uRixJQWMvRG5CLElBWlEsU0FBVXFDLEdBQ2xCMUMsRUFBUUEsRUFBUVcsRUFBRyxVQUFXK0IsTSxjQ3RDaEN2RixFQUFPRCxTQUFVLEcsZ0JDQWpCLElBQUlnWCxFQUFPLEVBQVEsR0FBUixDQUFrQixRQUN6QjNTLEVBQVcsRUFBUSxHQUNuQjRFLEVBQU0sRUFBUSxJQUNkZ08sRUFBVSxFQUFRLEdBQWdCMVIsRUFDbEMyUixFQUFLLEVBQ0xDLEVBQWVoVyxPQUFPZ1csY0FBZ0IsV0FDeEMsT0FBTyxHQUVMQyxHQUFVLEVBQVEsRUFBUixFQUFvQixXQUNoQyxPQUFPRCxFQUFhaFcsT0FBT2tXLGtCQUFrQixRQUUzQ0MsRUFBVSxTQUFVaFQsR0FDdEIyUyxFQUFRM1MsRUFBSTBTLEVBQU0sQ0FBRXRWLE1BQU8sQ0FDekJqQixFQUFHLE9BQVF5VyxFQUNYSyxFQUFHLE9BZ0NIQyxFQUFPdlgsRUFBT0QsUUFBVSxDQUMxQnVMLElBQUt5TCxFQUNMUyxNQUFNLEVBQ05DLFFBaENZLFNBQVVwVCxFQUFJdkMsR0FFMUIsSUFBS3NDLEVBQVNDLEdBQUssTUFBb0IsaUJBQU5BLEVBQWlCQSxHQUFtQixpQkFBTkEsRUFBaUIsSUFBTSxLQUFPQSxFQUM3RixJQUFLMkUsRUFBSTNFLEVBQUkwUyxHQUFPLENBRWxCLElBQUtHLEVBQWE3UyxHQUFLLE1BQU8sSUFFOUIsSUFBS3ZDLEVBQVEsTUFBTyxJQUVwQnVWLEVBQVFoVCxHQUVSLE9BQU9BLEVBQUcwUyxHQUFNdlcsR0FzQmxCa1gsUUFwQlksU0FBVXJULEVBQUl2QyxHQUMxQixJQUFLa0gsRUFBSTNFLEVBQUkwUyxHQUFPLENBRWxCLElBQUtHLEVBQWE3UyxHQUFLLE9BQU8sRUFFOUIsSUFBS3ZDLEVBQVEsT0FBTyxFQUVwQnVWLEVBQVFoVCxHQUVSLE9BQU9BLEVBQUcwUyxHQUFNTyxHQVlsQkssU0FUYSxTQUFVdFQsR0FFdkIsT0FESThTLEdBQVVJLEVBQUtDLE1BQVFOLEVBQWE3UyxLQUFRMkUsRUFBSTNFLEVBQUkwUyxJQUFPTSxFQUFRaFQsR0FDaEVBLEssZ0JDM0NULElBQUl1VCxFQUFjLEVBQVEsRUFBUixDQUFrQixlQUNoQzVKLEVBQWFDLE1BQU03TCxVQUNRMkIsTUFBM0JpSyxFQUFXNEosSUFBMkIsRUFBUSxHQUFSLENBQW1CNUosRUFBWTRKLEVBQWEsSUFDdEY1WCxFQUFPRCxRQUFVLFNBQVVnQyxHQUN6QmlNLEVBQVc0SixHQUFhN1YsSUFBTyxJLDZCQ0pqQyxNQUFNOFYsRUFBa0IsRUFBUSxLQUMxQkMsRUFBa0IsRUFBUSxLQUMxQkMsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFlLEVBQVEsS0FJdkJDLEVBQTJCMVcsT0FBTyw0QkFnTnhDLFNBQVMyVyxFQUE2QnpXLEdBQ3JDLEdBQXFCLGlCQUFWQSxHQUF1QyxJQUFqQkEsRUFBTWlGLE9BQ3RDLE1BQU0sSUFBSXBDLFVBQVUsd0RBSXRCLFNBQVM2VCxFQUFPMVcsRUFBTzJXLEdBQ3RCLE9BQUlBLEVBQVFELE9BQ0pDLEVBQVFDLE9BQVNSLEVBQWdCcFcsR0FBUzZXLG1CQUFtQjdXLEdBRzlEQSxFQUdSLFNBQVM4VyxFQUFPOVcsRUFBTzJXLEdBQ3RCLE9BQUlBLEVBQVFHLE9BQ0pULEVBQWdCclcsR0FHakJBLEVBaUJSLFNBQVMrVyxFQUFXQyxHQUNuQixNQUFNQyxFQUFZRCxFQUFNMUYsUUFBUSxLQUtoQyxPQUptQixJQUFmMkYsSUFDSEQsRUFBUUEsRUFBTXJRLE1BQU0sRUFBR3NRLElBR2pCRCxFQWFSLFNBQVNFLEVBQVFGLEdBRWhCLE1BQU1HLEdBRE5ILEVBQVFELEVBQVdDLElBQ00xRixRQUFRLEtBQ2pDLE9BQW9CLElBQWhCNkYsRUFDSSxHQUdESCxFQUFNclEsTUFBTXdRLEVBQWEsR0FHakMsU0FBU0MsRUFBV3BYLEVBQU8yVyxHQU8xQixPQU5JQSxFQUFRVSxlQUFpQkMsT0FBTzdOLE1BQU02TixPQUFPdFgsS0FBNkIsaUJBQVZBLEdBQXVDLEtBQWpCQSxFQUFNZ0gsT0FDL0ZoSCxFQUFRc1gsT0FBT3RYLElBQ0wyVyxFQUFRWSxlQUEyQixPQUFWdlgsR0FBMkMsU0FBeEJBLEVBQU15SSxlQUFvRCxVQUF4QnpJLEVBQU15SSxnQkFDOUZ6SSxFQUFnQyxTQUF4QkEsRUFBTXlJLGVBR1J6SSxFQUdSLFNBQVN3WCxFQUFNQyxFQUFPZCxHQVVyQkYsR0FUQUUsRUFBVWxYLE9BQU9pWSxPQUFPLENBQ3ZCWixRQUFRLEVBQ1I1SSxNQUFNLEVBQ055SixZQUFhLE9BQ2JDLHFCQUFzQixJQUN0QlAsY0FBYyxFQUNkRSxlQUFlLEdBQ2JaLElBRWtDaUIsc0JBRXJDLE1BQU1DLEVBN0xQLFNBQThCbEIsR0FDN0IsSUFBSWxRLEVBRUosT0FBUWtRLEVBQVFnQixhQUNmLElBQUssUUFDSixNQUFPLENBQUNyWCxFQUFLTixFQUFPOFgsS0FDbkJyUixFQUFTLGFBQWF4RCxLQUFLM0MsR0FFM0JBLEVBQU1BLEVBQUk0RyxRQUFRLFdBQVksSUFFekJULFFBS29CbkUsSUFBckJ3VixFQUFZeFgsS0FDZndYLEVBQVl4WCxHQUFPLElBR3BCd1gsRUFBWXhYLEdBQUttRyxFQUFPLElBQU16RyxHQVI3QjhYLEVBQVl4WCxHQUFPTixHQVd0QixJQUFLLFVBQ0osTUFBTyxDQUFDTSxFQUFLTixFQUFPOFgsS0FDbkJyUixFQUFTLFVBQVV4RCxLQUFLM0MsR0FDeEJBLEVBQU1BLEVBQUk0RyxRQUFRLFFBQVMsSUFFdEJULE9BS29CbkUsSUFBckJ3VixFQUFZeFgsR0FLaEJ3WCxFQUFZeFgsR0FBTyxHQUFHZ1UsT0FBT3dELEVBQVl4WCxHQUFNTixHQUo5QzhYLEVBQVl4WCxHQUFPLENBQUNOLEdBTHBCOFgsRUFBWXhYLEdBQU9OLEdBWXRCLElBQUssdUJBQ0osTUFBTyxDQUFDTSxFQUFLTixFQUFPOFgsS0FDbkJyUixFQUFTLFdBQVd4RCxLQUFLM0MsR0FDekJBLEVBQU1BLEVBQUk0RyxRQUFRLFNBQVUsSUFFdkJULE9BS29CbkUsSUFBckJ3VixFQUFZeFgsR0FLaEJ3WCxFQUFZeFgsR0FBTyxHQUFHZ1UsT0FBT3dELEVBQVl4WCxHQUFNTixHQUo5QzhYLEVBQVl4WCxHQUFPLENBQUNOLEdBTHBCOFgsRUFBWXhYLEdBQU9OLEdBWXRCLElBQUssUUFDTCxJQUFLLFlBQ0osTUFBTyxDQUFDTSxFQUFLTixFQUFPOFgsS0FDbkIsTUFBTXRULEVBQTJCLGlCQUFWeEUsR0FBc0JBLEVBQU13UixTQUFTbUYsRUFBUWlCLHNCQUM5REcsRUFBbUMsaUJBQVYvWCxJQUF1QndFLEdBQVdzUyxFQUFPOVcsRUFBTzJXLEdBQVNuRixTQUFTbUYsRUFBUWlCLHNCQUN6RzVYLEVBQVErWCxFQUFpQmpCLEVBQU85VyxFQUFPMlcsR0FBVzNXLEVBQ2xELE1BQU1nWSxFQUFXeFQsR0FBV3VULEVBQWlCL1gsRUFBTTJILE1BQU1nUCxFQUFRaUIsc0JBQXNCbEcsSUFBSXVHLEdBQVFuQixFQUFPbUIsRUFBTXRCLElBQXNCLE9BQVYzVyxFQUFpQkEsRUFBUThXLEVBQU85VyxFQUFPMlcsR0FDbkttQixFQUFZeFgsR0FBTzBYLEdBR3JCLElBQUssb0JBQ0osTUFBTyxDQUFDMVgsRUFBS04sRUFBTzhYLEtBQ25CLE1BQU10VCxFQUFVLFVBQVVnRSxLQUFLbEksR0FHL0IsR0FGQUEsRUFBTUEsRUFBSTRHLFFBQVEsUUFBUyxLQUV0QjFDLEVBRUosWUFEQXNULEVBQVl4WCxHQUFPTixFQUFROFcsRUFBTzlXLEVBQU8yVyxHQUFXM1csR0FJckQsTUFBTWtZLEVBQXVCLE9BQVZsWSxFQUNsQixHQUNBQSxFQUFNMkgsTUFBTWdQLEVBQVFpQixzQkFBc0JsRyxJQUFJdUcsR0FBUW5CLEVBQU9tQixFQUFNdEIsU0FFM0NyVSxJQUFyQndWLEVBQVl4WCxHQUtoQndYLEVBQVl4WCxHQUFPLEdBQUdnVSxPQUFPd0QsRUFBWXhYLEdBQU00WCxHQUo5Q0osRUFBWXhYLEdBQU80WCxHQU90QixRQUNDLE1BQU8sQ0FBQzVYLEVBQUtOLEVBQU84WCxVQUNNeFYsSUFBckJ3VixFQUFZeFgsR0FLaEJ3WCxFQUFZeFgsR0FBTyxHQUFHZ1UsT0FBT3dELEVBQVl4WCxHQUFNTixHQUo5QzhYLEVBQVl4WCxHQUFPTixJQWdHTG1ZLENBQXFCeEIsR0FHakN5QixFQUFNM1ksT0FBT1ksT0FBTyxNQUUxQixHQUFxQixpQkFBVm9YLEVBQ1YsT0FBT1csRUFLUixLQUZBWCxFQUFRQSxFQUFNelEsT0FBT0UsUUFBUSxTQUFVLEtBR3RDLE9BQU9rUixFQUdSLElBQUssTUFBTUMsS0FBU1osRUFBTTlQLE1BQU0sS0FBTSxDQUNyQyxHQUFjLEtBQVYwUSxFQUNILFNBR0QsSUFBSy9YLEVBQUtOLEdBQVNzVyxFQUFhSyxFQUFRRyxPQUFTdUIsRUFBTW5SLFFBQVEsTUFBTyxLQUFPbVIsRUFBTyxLQUlwRnJZLE9BQWtCc0MsSUFBVnRDLEVBQXNCLEtBQU8sQ0FBQyxRQUFTLFlBQWEscUJBQXFCd1IsU0FBU21GLEVBQVFnQixhQUFlM1gsRUFBUThXLEVBQU85VyxFQUFPMlcsR0FDdklrQixFQUFVZixFQUFPeFcsRUFBS3FXLEdBQVUzVyxFQUFPb1ksR0FHeEMsSUFBSyxNQUFNOVgsS0FBT2IsT0FBTzhOLEtBQUs2SyxHQUFNLENBQ25DLE1BQU1wWSxFQUFRb1ksRUFBSTlYLEdBQ2xCLEdBQXFCLGlCQUFWTixHQUFnQyxPQUFWQSxFQUNoQyxJQUFLLE1BQU1zWSxLQUFLN1ksT0FBTzhOLEtBQUt2TixHQUMzQkEsRUFBTXNZLEdBQUtsQixFQUFXcFgsRUFBTXNZLEdBQUkzQixRQUdqQ3lCLEVBQUk5WCxHQUFPOFcsRUFBV3BYLEVBQU8yVyxHQUkvQixPQUFxQixJQUFqQkEsRUFBUXpJLEtBQ0prSyxJQUdpQixJQUFqQnpCLEVBQVF6SSxLQUFnQnpPLE9BQU84TixLQUFLNkssR0FBS2xLLE9BQVN6TyxPQUFPOE4sS0FBSzZLLEdBQUtsSyxLQUFLeUksRUFBUXpJLE9BQU9MLE9BQU8sQ0FBQ3BILEVBQVFuRyxLQUM5RyxNQUFNTixFQUFRb1ksRUFBSTlYLEdBUWxCLE9BUElpWSxRQUFRdlksSUFBMkIsaUJBQVZBLElBQXVCd00sTUFBTWhJLFFBQVF4RSxHQUVqRXlHLEVBQU9uRyxHQWhIVixTQUFTa1ksRUFBV3hCLEdBQ25CLE9BQUl4SyxNQUFNaEksUUFBUXdTLEdBQ1ZBLEVBQU05SSxPQUdPLGlCQUFWOEksRUFDSHdCLEVBQVcvWSxPQUFPOE4sS0FBS3lKLElBQzVCOUksS0FBSyxDQUFDMUssRUFBR3NELElBQU13USxPQUFPOVQsR0FBSzhULE9BQU94USxJQUNsQzRLLElBQUlwUixHQUFPMFcsRUFBTTFXLElBR2IwVyxFQXFHU3dCLENBQVd4WSxHQUV6QnlHLEVBQU9uRyxHQUFPTixFQUdSeUcsR0FDTGhILE9BQU9ZLE9BQU8sT0FHbEIvQixFQUFRNFksUUFBVUEsRUFDbEI1WSxFQUFRa1osTUFBUUEsRUFFaEJsWixFQUFRbWEsVUFBWSxDQUFDaFksRUFBUWtXLEtBQzVCLElBQUtsVyxFQUNKLE1BQU8sR0FVUmdXLEdBUEFFLEVBQVVsWCxPQUFPaVksT0FBTyxDQUN2QmhCLFFBQVEsRUFDUkUsUUFBUSxFQUNSZSxZQUFhLE9BQ2JDLHFCQUFzQixLQUNwQmpCLElBRWtDaUIsc0JBRXJDLE1BQU1jLEVBQWVwWSxHQUNuQnFXLEVBQVFnQyxVQW5Yd0IzWSxNQW1YTVMsRUFBT0gsSUFDN0NxVyxFQUFRaUMsaUJBQW1DLEtBQWhCblksRUFBT0gsR0FHOUJ1WCxFQW5YUCxTQUErQmxCLEdBQzlCLE9BQVFBLEVBQVFnQixhQUNmLElBQUssUUFDSixPQUFPclgsR0FBTyxDQUFDbUcsRUFBUXpHLEtBQ3RCLE1BQU0ySyxFQUFRbEUsRUFBT3hCLE9BRXJCLFlBQ1czQyxJQUFWdEMsR0FDQzJXLEVBQVFnQyxVQUFzQixPQUFWM1ksR0FDcEIyVyxFQUFRaUMsaUJBQTZCLEtBQVY1WSxFQUVyQnlHLEVBR00sT0FBVnpHLEVBQ0ksSUFBSXlHLEVBQVEsQ0FBQ2lRLEVBQU9wVyxFQUFLcVcsR0FBVSxJQUFLaE0sRUFBTyxLQUFLN0MsS0FBSyxLQUcxRCxJQUNIckIsRUFDSCxDQUFDaVEsRUFBT3BXLEVBQUtxVyxHQUFVLElBQUtELEVBQU8vTCxFQUFPZ00sR0FBVSxLQUFNRCxFQUFPMVcsRUFBTzJXLElBQVU3TyxLQUFLLE1BSTFGLElBQUssVUFDSixPQUFPeEgsR0FBTyxDQUFDbUcsRUFBUXpHLFNBRVhzQyxJQUFWdEMsR0FDQzJXLEVBQVFnQyxVQUFzQixPQUFWM1ksR0FDcEIyVyxFQUFRaUMsaUJBQTZCLEtBQVY1WSxFQUVyQnlHLEVBR00sT0FBVnpHLEVBQ0ksSUFBSXlHLEVBQVEsQ0FBQ2lRLEVBQU9wVyxFQUFLcVcsR0FBVSxNQUFNN08sS0FBSyxLQUcvQyxJQUFJckIsRUFBUSxDQUFDaVEsRUFBT3BXLEVBQUtxVyxHQUFVLE1BQU9ELEVBQU8xVyxFQUFPMlcsSUFBVTdPLEtBQUssS0FHaEYsSUFBSyx1QkFDSixPQUFPeEgsR0FBTyxDQUFDbUcsRUFBUXpHLFNBRVhzQyxJQUFWdEMsR0FDQzJXLEVBQVFnQyxVQUFzQixPQUFWM1ksR0FDcEIyVyxFQUFRaUMsaUJBQTZCLEtBQVY1WSxFQUVyQnlHLEVBR00sT0FBVnpHLEVBQ0ksSUFBSXlHLEVBQVEsQ0FBQ2lRLEVBQU9wVyxFQUFLcVcsR0FBVSxVQUFVN08sS0FBSyxLQUduRCxJQUFJckIsRUFBUSxDQUFDaVEsRUFBT3BXLEVBQUtxVyxHQUFVLFNBQVVELEVBQU8xVyxFQUFPMlcsSUFBVTdPLEtBQUssS0FHbkYsSUFBSyxRQUNMLElBQUssWUFDTCxJQUFLLG9CQUFxQixDQUN6QixNQUFNK1EsRUFBc0Msc0JBQXhCbEMsRUFBUWdCLFlBQzNCLE1BQ0EsSUFFRCxPQUFPclgsR0FBTyxDQUFDbUcsRUFBUXpHLFNBRVhzQyxJQUFWdEMsR0FDQzJXLEVBQVFnQyxVQUFzQixPQUFWM1ksR0FDcEIyVyxFQUFRaUMsaUJBQTZCLEtBQVY1WSxFQUVyQnlHLEdBSVJ6RyxFQUFrQixPQUFWQSxFQUFpQixHQUFLQSxFQUVSLElBQWxCeUcsRUFBT3hCLE9BQ0gsQ0FBQyxDQUFDeVIsRUFBT3BXLEVBQUtxVyxHQUFVa0MsRUFBYW5DLEVBQU8xVyxFQUFPMlcsSUFBVTdPLEtBQUssS0FHbkUsQ0FBQyxDQUFDckIsRUFBUWlRLEVBQU8xVyxFQUFPMlcsSUFBVTdPLEtBQUs2TyxFQUFRaUIsd0JBSXhELFFBQ0MsT0FBT3RYLEdBQU8sQ0FBQ21HLEVBQVF6RyxTQUVYc0MsSUFBVnRDLEdBQ0MyVyxFQUFRZ0MsVUFBc0IsT0FBVjNZLEdBQ3BCMlcsRUFBUWlDLGlCQUE2QixLQUFWNVksRUFFckJ5RyxFQUdNLE9BQVZ6RyxFQUNJLElBQUl5RyxFQUFRaVEsRUFBT3BXLEVBQUtxVyxJQUd6QixJQUFJbFEsRUFBUSxDQUFDaVEsRUFBT3BXLEVBQUtxVyxHQUFVLElBQUtELEVBQU8xVyxFQUFPMlcsSUFBVTdPLEtBQUssTUFnUjdEZ1IsQ0FBc0JuQyxHQUVsQ29DLEVBQWEsR0FFbkIsSUFBSyxNQUFNelksS0FBT2IsT0FBTzhOLEtBQUs5TSxHQUN4QmlZLEVBQWFwWSxLQUNqQnlZLEVBQVd6WSxHQUFPRyxFQUFPSCxJQUkzQixNQUFNaU4sRUFBTzlOLE9BQU84TixLQUFLd0wsR0FNekIsT0FKcUIsSUFBakJwQyxFQUFRekksTUFDWFgsRUFBS1csS0FBS3lJLEVBQVF6SSxNQUdaWCxFQUFLbUUsSUFBSXBSLElBQ2YsTUFBTU4sRUFBUVMsRUFBT0gsR0FFckIsWUFBY2dDLElBQVZ0QyxFQUNJLEdBR00sT0FBVkEsRUFDSTBXLEVBQU9wVyxFQUFLcVcsR0FHaEJuSyxNQUFNaEksUUFBUXhFLEdBQ0ksSUFBakJBLEVBQU1pRixRQUF3QyxzQkFBeEIwUixFQUFRZ0IsWUFDMUJqQixFQUFPcFcsRUFBS3FXLEdBQVcsS0FHeEIzVyxFQUNMNk4sT0FBT2dLLEVBQVV2WCxHQUFNLElBQ3ZCd0gsS0FBSyxLQUdENE8sRUFBT3BXLEVBQUtxVyxHQUFXLElBQU1ELEVBQU8xVyxFQUFPMlcsS0FDaER6RixPQUFPOEgsR0FBS0EsRUFBRS9ULE9BQVMsR0FBRzZDLEtBQUssTUFHbkN4SixFQUFRMmEsU0FBVyxDQUFDQyxFQUFLdkMsS0FDeEJBLEVBQVVsWCxPQUFPaVksT0FBTyxDQUN2QlosUUFBUSxHQUNOSCxHQUVILE1BQU93QyxFQUFNQyxHQUFROUMsRUFBYTRDLEVBQUssS0FFdkMsT0FBT3paLE9BQU9pWSxPQUNiLENBQ0N3QixJQUFLQyxFQUFLeFIsTUFBTSxLQUFLLElBQU0sR0FDM0I4UCxNQUFPRCxFQUFNTixFQUFRZ0MsR0FBTXZDLElBRTVCQSxHQUFXQSxFQUFRMEMseUJBQTJCRCxFQUFPLENBQUNFLG1CQUFvQnhDLEVBQU9zQyxFQUFNekMsSUFBWSxLQUlyR3JZLEVBQVFpYixhQUFlLENBQUM5WSxFQUFRa1csS0FDL0JBLEVBQVVsWCxPQUFPaVksT0FBTyxDQUN2QmhCLFFBQVEsRUFDUkUsUUFBUSxFQUNSLENBQUNKLElBQTJCLEdBQzFCRyxHQUVILE1BQU11QyxFQUFNbkMsRUFBV3RXLEVBQU95WSxLQUFLdlIsTUFBTSxLQUFLLElBQU0sR0FDOUM2UixFQUFlbGIsRUFBUTRZLFFBQVF6VyxFQUFPeVksS0FDdENPLEVBQXFCbmIsRUFBUWtaLE1BQU1nQyxFQUFjLENBQUN0TCxNQUFNLElBRXhEdUosRUFBUWhZLE9BQU9pWSxPQUFPK0IsRUFBb0JoWixFQUFPZ1gsT0FDdkQsSUFBSWlDLEVBQWNwYixFQUFRbWEsVUFBVWhCLEVBQU9kLEdBQ3ZDK0MsSUFDSEEsRUFBYyxJQUFJQSxHQUduQixJQUFJTixFQWxNTCxTQUFpQkYsR0FDaEIsSUFBSUUsRUFBTyxHQUNYLE1BQU1uQyxFQUFZaUMsRUFBSTVILFFBQVEsS0FLOUIsT0FKbUIsSUFBZjJGLElBQ0htQyxFQUFPRixFQUFJdlMsTUFBTXNRLElBR1htQyxFQTJMSU8sQ0FBUWxaLEVBQU95WSxLQUsxQixPQUpJelksRUFBTzZZLHFCQUNWRixFQUFPLEtBQUl6QyxFQUFRSCxHQUE0QkUsRUFBT2pXLEVBQU82WSxtQkFBb0IzQyxHQUFXbFcsRUFBTzZZLHFCQUc3RixHQUFHSixJQUFNUSxJQUFjTixLQUcvQjlhLEVBQVFzYixLQUFPLENBQUM1QyxFQUFPOUYsRUFBUXlGLEtBQzlCQSxFQUFVbFgsT0FBT2lZLE9BQU8sQ0FDdkIyQix5QkFBeUIsRUFDekIsQ0FBQzdDLElBQTJCLEdBQzFCRyxHQUVILE1BQU0sSUFBQ3VDLEVBQUcsTUFBRXpCLEVBQUssbUJBQUU2QixHQUFzQmhiLEVBQVEyYSxTQUFTakMsRUFBT0wsR0FDakUsT0FBT3JZLEVBQVFpYixhQUFhLENBQzNCTCxNQUNBekIsTUFBT2xCLEVBQWFrQixFQUFPdkcsR0FDM0JvSSxzQkFDRTNDLElBR0pyWSxFQUFRdWIsUUFBVSxDQUFDN0MsRUFBTzlGLEVBQVF5RixLQUNqQyxNQUFNbUQsRUFBa0J0TixNQUFNaEksUUFBUTBNLEdBQVU1USxJQUFRNFEsRUFBT00sU0FBU2xSLEdBQU8sQ0FBQ0EsRUFBS04sS0FBV2tSLEVBQU81USxFQUFLTixHQUU1RyxPQUFPMUIsRUFBUXNiLEtBQUs1QyxFQUFPOEMsRUFBaUJuRCxLLGNDaGU3Q3BZLEVBQU9ELFFBQVUsU0FBVXliLEVBQVEvWixHQUNqQyxNQUFPLENBQ0xMLGFBQXVCLEVBQVRvYSxHQUNkaEgsZUFBeUIsRUFBVGdILEdBQ2hCL0csV0FBcUIsRUFBVCtHLEdBQ1ovWixNQUFPQSxLLGNDTFgsSUFBSXdWLEVBQUssRUFDTHdFLEVBQUtqWCxLQUFLa1gsU0FDZDFiLEVBQU9ELFFBQVUsU0FBVWdDLEdBQ3pCLE1BQU8sVUFBVWdVLFlBQWVoUyxJQUFSaEMsRUFBb0IsR0FBS0EsRUFBSyxRQUFTa1YsRUFBS3dFLEdBQUl6VixTQUFTLE8sZ0JDRm5GLElBQUkyVixFQUFRLEVBQVEsS0FDaEJDLEVBQWMsRUFBUSxJQUUxQjViLEVBQU9ELFFBQVVtQixPQUFPOE4sTUFBUSxTQUFjekosR0FDNUMsT0FBT29XLEVBQU1wVyxFQUFHcVcsSyxnQkNMbEIsSUFBSTdXLEVBQVksRUFBUSxJQUNwQjhXLEVBQU1yWCxLQUFLcVgsSUFDWDdXLEVBQU1SLEtBQUtRLElBQ2ZoRixFQUFPRCxRQUFVLFNBQVVxTSxFQUFPMUYsR0FFaEMsT0FEQTBGLEVBQVFySCxFQUFVcUgsSUFDSCxFQUFJeVAsRUFBSXpQLEVBQVExRixFQUFRLEdBQUsxQixFQUFJb0gsRUFBTzFGLEssZ0JDSnpELElBQUl4QixFQUFXLEVBQVEsR0FDbkI0VyxFQUFNLEVBQVEsS0FDZEYsRUFBYyxFQUFRLElBQ3RCblIsRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFDcENzUixFQUFRLGFBSVJDLEVBQWEsV0FFZixJQUlJQyxFQUpBQyxFQUFTLEVBQVEsR0FBUixDQUF5QixVQUNsQzFiLEVBQUlvYixFQUFZbFYsT0FjcEIsSUFWQXdWLEVBQU9DLE1BQU1DLFFBQVUsT0FDdkIsRUFBUSxJQUFXQyxZQUFZSCxHQUMvQkEsRUFBT2pJLElBQU0sZUFHYmdJLEVBQWlCQyxFQUFPSSxjQUFjdFUsVUFDdkJ1VSxPQUNmTixFQUFlTyxNQUFNQyx1Q0FDckJSLEVBQWVTLFFBQ2ZWLEVBQWFDLEVBQWU3WSxFQUNyQjVDLFlBQVl3YixFQUFvQixVQUFFSixFQUFZcGIsSUFDckQsT0FBT3diLEtBR1RoYyxFQUFPRCxRQUFVbUIsT0FBT1ksUUFBVSxTQUFnQnlELEVBQUdvWCxHQUNuRCxJQUFJelUsRUFRSixPQVBVLE9BQU4zQyxHQUNGd1csRUFBZSxVQUFJN1csRUFBU0ssR0FDNUIyQyxFQUFTLElBQUk2VCxFQUNiQSxFQUFlLFVBQUksS0FFbkI3VCxFQUFPdUMsR0FBWWxGLEdBQ2QyQyxFQUFTOFQsU0FDTWpZLElBQWY0WSxFQUEyQnpVLEVBQVM0VCxFQUFJNVQsRUFBUXlVLEssZ0JDdEN6RCxJQUFJaEIsRUFBUSxFQUFRLEtBQ2hCaUIsRUFBYSxFQUFRLElBQW9CN0csT0FBTyxTQUFVLGFBRTlEaFcsRUFBUXVGLEVBQUlwRSxPQUFPMmIscUJBQXVCLFNBQTZCdFgsR0FDckUsT0FBT29XLEVBQU1wVyxFQUFHcVgsSyw2QkNKbEIsSUFBSXBhLEVBQVMsRUFBUSxHQUNqQjZDLEVBQUssRUFBUSxHQUNieVgsRUFBYyxFQUFRLEdBQ3RCQyxFQUFVLEVBQVEsRUFBUixDQUFrQixXQUVoQy9jLEVBQU9ELFFBQVUsU0FBVXVMLEdBQ3pCLElBQUk2RixFQUFJM08sRUFBTzhJLEdBQ1h3UixHQUFlM0wsSUFBTUEsRUFBRTRMLElBQVUxWCxFQUFHQyxFQUFFNkwsRUFBRzRMLEVBQVMsQ0FDcER2SSxjQUFjLEVBQ2RuVCxJQUFLLFdBQWMsT0FBT2pCLFUsY0NWOUJKLEVBQU9ELFFBQVUsU0FBVXNFLEVBQUkyWSxFQUFhamMsRUFBTWtjLEdBQ2hELEtBQU01WSxhQUFjMlksU0FBb0NqWixJQUFuQmtaLEdBQWdDQSxLQUFrQjVZLEVBQ3JGLE1BQU1DLFVBQVV2RCxFQUFPLDJCQUN2QixPQUFPc0QsSSxnQkNIWCxJQUFJekIsRUFBTSxFQUFRLElBQ2RqQyxFQUFPLEVBQVEsS0FDZm9NLEVBQWMsRUFBUSxJQUN0QjdILEVBQVcsRUFBUSxHQUNuQnFHLEVBQVcsRUFBUSxHQUNuQjBCLEVBQVksRUFBUSxJQUNwQmlRLEVBQVEsR0FDUkMsRUFBUyxJQUNUcGQsRUFBVUMsRUFBT0QsUUFBVSxTQUFVcWQsRUFBVWxPLEVBQVN6SSxFQUFJcUUsRUFBTWtGLEdBQ3BFLElBR0l0SixFQUFRaUwsRUFBTUMsRUFBVTFKLEVBSHhCOEosRUFBU2hDLEVBQVcsV0FBYyxPQUFPb04sR0FBY25RLEVBQVVtUSxHQUNqRTlYLEVBQUkxQyxFQUFJNkQsRUFBSXFFLEVBQU1vRSxFQUFVLEVBQUksR0FDaEM5QyxFQUFRLEVBRVosR0FBcUIsbUJBQVY0RixFQUFzQixNQUFNMU4sVUFBVThZLEVBQVcscUJBRTVELEdBQUlyUSxFQUFZaUYsSUFBUyxJQUFLdEwsRUFBUzZFLEVBQVM2UixFQUFTMVcsUUFBU0EsRUFBUzBGLEVBQU9BLElBRWhGLElBREFsRSxFQUFTZ0gsRUFBVTVKLEVBQUVKLEVBQVN5TSxFQUFPeUwsRUFBU2hSLElBQVEsR0FBSXVGLEVBQUssSUFBTXJNLEVBQUU4WCxFQUFTaFIsT0FDakU4USxHQUFTaFYsSUFBV2lWLEVBQVEsT0FBT2pWLE9BQzdDLElBQUswSixFQUFXSSxFQUFPclIsS0FBS3ljLEtBQWF6TCxFQUFPQyxFQUFTSyxRQUFRQyxNQUV0RSxJQURBaEssRUFBU3ZILEVBQUtpUixFQUFVdE0sRUFBR3FNLEVBQUtsUSxNQUFPeU4sTUFDeEJnTyxHQUFTaFYsSUFBV2lWLEVBQVEsT0FBT2pWLElBRzlDZ1YsTUFBUUEsRUFDaEJuZCxFQUFRb2QsT0FBU0EsRyxnQkN4QmpCLElBQUl4YSxFQUFXLEVBQVEsSUFDdkIzQyxFQUFPRCxRQUFVLFNBQVU4RCxFQUFRb1EsRUFBSzNLLEdBQ3RDLElBQUssSUFBSXZILEtBQU9rUyxFQUFLdFIsRUFBU2tCLEVBQVE5QixFQUFLa1MsRUFBSWxTLEdBQU11SCxHQUNyRCxPQUFPekYsSSxnQkNIVCxJQUFJTyxFQUFXLEVBQVEsR0FDdkJwRSxFQUFPRCxRQUFVLFNBQVVzRSxFQUFJb0gsR0FDN0IsSUFBS3JILEVBQVNDLElBQU9BLEVBQUdnWixLQUFPNVIsRUFBTSxNQUFNbkgsVUFBVSwwQkFBNEJtSCxFQUFPLGNBQ3hGLE9BQU9wSCxJLGdCQ0hULElBQUlpWixFQUFNLEVBQVEsR0FBZ0JoWSxFQUM5QjBELEVBQU0sRUFBUSxJQUNkaUgsRUFBTSxFQUFRLEVBQVIsQ0FBa0IsZUFFNUJqUSxFQUFPRCxRQUFVLFNBQVVzRSxFQUFJd0YsRUFBSzBULEdBQzlCbFosSUFBTzJFLEVBQUkzRSxFQUFLa1osRUFBT2xaLEVBQUtBLEVBQUdqQyxVQUFXNk4sSUFBTXFOLEVBQUlqWixFQUFJNEwsRUFBSyxDQUFFdUUsY0FBYyxFQUFNL1MsTUFBT29JLE0sZ0JDSmhHLElBQUkyVCxFQUFNLEVBQVEsSUFDZHZOLEVBQU0sRUFBUSxFQUFSLENBQWtCLGVBRXhCd04sRUFBa0QsYUFBNUNELEVBQUksV0FBYyxPQUFPblYsVUFBckIsSUFTZHJJLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLElBQUlrQixFQUFHbVksRUFBRzlaLEVBQ1YsWUFBY0csSUFBUE0sRUFBbUIsWUFBcUIsT0FBUEEsRUFBYyxPQUVOLGlCQUFwQ3FaLEVBVkQsU0FBVXJaLEVBQUl0QyxHQUN6QixJQUNFLE9BQU9zQyxFQUFHdEMsR0FDVixNQUFPNEMsS0FPT2daLENBQU9wWSxFQUFJckUsT0FBT21ELEdBQUs0TCxJQUFvQnlOLEVBRXZERCxFQUFNRCxFQUFJalksR0FFTSxXQUFmM0IsRUFBSTRaLEVBQUlqWSxLQUFzQyxtQkFBWkEsRUFBRXFZLE9BQXVCLFlBQWNoYSxJLGdCQ3JCaEYsSUFBSWYsRUFBVSxFQUFRLEdBQ2xCNEMsRUFBVSxFQUFRLElBQ2xCZ0UsRUFBUSxFQUFRLEdBQ2hCb1UsRUFBUyxFQUFRLElBQ2pCQyxFQUFRLElBQU1ELEVBQVMsSUFFdkJFLEVBQVFDLE9BQU8sSUFBTUYsRUFBUUEsRUFBUSxLQUNyQ0csRUFBUUQsT0FBT0YsRUFBUUEsRUFBUSxNQUUvQkksRUFBVyxTQUFVNVMsRUFBSzVHLEVBQU15WixHQUNsQyxJQUFJamIsRUFBTSxHQUNOa2IsRUFBUTNVLEdBQU0sV0FDaEIsUUFBU29VLEVBQU92UyxNQVBWLFdBT3dCQSxRQUU1QjdFLEVBQUt2RCxFQUFJb0ksR0FBTzhTLEVBQVExWixFQUFLK0QsR0FBUW9WLEVBQU92UyxHQUM1QzZTLElBQU9qYixFQUFJaWIsR0FBUzFYLEdBQ3hCNUQsRUFBUUEsRUFBUWEsRUFBSWIsRUFBUU8sRUFBSWdiLEVBQU8sU0FBVWxiLElBTS9DdUYsRUFBT3lWLEVBQVN6VixLQUFPLFNBQVVtQixFQUFRNkIsR0FJM0MsT0FIQTdCLEVBQVNKLE9BQU8vRCxFQUFRbUUsSUFDYixFQUFQNkIsSUFBVTdCLEVBQVNBLEVBQU9qQixRQUFRb1YsRUFBTyxLQUNsQyxFQUFQdFMsSUFBVTdCLEVBQVNBLEVBQU9qQixRQUFRc1YsRUFBTyxLQUN0Q3JVLEdBR1Q1SixFQUFPRCxRQUFVbWUsRyxjQzdCakJsZSxFQUFPRCxRQUFVLEksZ0JDQWpCLElBQUkwQyxFQUFPLEVBQVEsSUFDZkQsRUFBUyxFQUFRLEdBRWpCb0MsRUFBUXBDLEVBREMsd0JBQ2tCQSxFQURsQixzQkFDbUMsS0FFL0N4QyxFQUFPRCxRQUFVLFNBQVVnQyxFQUFLTixHQUMvQixPQUFPbUQsRUFBTTdDLEtBQVM2QyxFQUFNN0MsUUFBaUJnQyxJQUFWdEMsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJNEssS0FBSyxDQUN0QjFCLFFBQVNsSSxFQUFLa0ksUUFDZGhKLEtBQU0sRUFBUSxJQUFnQixPQUFTLFNBQ3ZDMGMsVUFBVywwQyxnQkNUYixJQUFJYixFQUFNLEVBQVEsSUFFbEJ4ZCxFQUFPRCxRQUFVbUIsT0FBTyxLQUFLb2QscUJBQXFCLEdBQUtwZCxPQUFTLFNBQVVtRCxHQUN4RSxNQUFrQixVQUFYbVosRUFBSW5aLEdBQWtCQSxFQUFHK0UsTUFBTSxJQUFNbEksT0FBT21ELEssY0NKckR0RSxFQUFRdUYsRUFBSSxHQUFHZ1osc0IsNkJDRWYsSUFBSXBaLEVBQVcsRUFBUSxHQUN2QmxGLEVBQU9ELFFBQVUsV0FDZixJQUFJK0ssRUFBTzVGLEVBQVM5RSxNQUNoQjhILEVBQVMsR0FNYixPQUxJNEMsRUFBS3RJLFNBQVEwRixHQUFVLEtBQ3ZCNEMsRUFBS3lULGFBQVlyVyxHQUFVLEtBQzNCNEMsRUFBSzBULFlBQVd0VyxHQUFVLEtBQzFCNEMsRUFBSzJULFVBQVN2VyxHQUFVLEtBQ3hCNEMsRUFBSzRULFNBQVF4VyxHQUFVLEtBQ3BCQSxJLGdCQ1ZULElBQUloRCxFQUFXLEVBQVEsR0FDbkIyRixFQUFZLEVBQVEsSUFDcEJrUyxFQUFVLEVBQVEsRUFBUixDQUFrQixXQUNoQy9jLEVBQU9ELFFBQVUsU0FBVXdGLEVBQUdvWixHQUM1QixJQUNJbmIsRUFEQTJOLEVBQUlqTSxFQUFTSyxHQUFHc0IsWUFFcEIsWUFBYTlDLElBQU5vTixHQUFpRHBOLE9BQTdCUCxFQUFJMEIsRUFBU2lNLEdBQUc0TCxJQUF5QjRCLEVBQUk5VCxFQUFVckgsSyxnQkNMcEYsSUFBSTZHLEVBQVksRUFBUSxJQUNwQmtCLEVBQVcsRUFBUSxHQUNuQnNCLEVBQWtCLEVBQVEsSUFDOUI3TSxFQUFPRCxRQUFVLFNBQVU2ZSxHQUN6QixPQUFPLFNBQVUzUyxFQUFPNFMsRUFBSUMsR0FDMUIsSUFHSXJkLEVBSEE4RCxFQUFJOEUsRUFBVTRCLEdBQ2R2RixFQUFTNkUsRUFBU2hHLEVBQUVtQixRQUNwQjBGLEVBQVFTLEVBQWdCaVMsRUFBV3BZLEdBSXZDLEdBQUlrWSxHQUFlQyxHQUFNQSxHQUFJLEtBQU9uWSxFQUFTMEYsR0FHM0MsSUFGQTNLLEVBQVE4RCxFQUFFNkcsT0FFRzNLLEVBQU8sT0FBTyxPQUV0QixLQUFNaUYsRUFBUzBGLEVBQU9BLElBQVMsSUFBSXdTLEdBQWV4UyxLQUFTN0csSUFDNURBLEVBQUU2RyxLQUFXeVMsRUFBSSxPQUFPRCxHQUFleFMsR0FBUyxFQUNwRCxPQUFRd1MsSUFBZ0IsSyxjQ3BCOUI3ZSxFQUFRdUYsRUFBSXBFLE9BQU82ZCx1QixnQkNDbkIsSUFBSXZCLEVBQU0sRUFBUSxJQUNsQnhkLEVBQU9ELFFBQVVrTyxNQUFNaEksU0FBVyxTQUFpQm1GLEdBQ2pELE1BQW1CLFNBQVpvUyxFQUFJcFMsSyxnQkNIYixJQUFJckcsRUFBWSxFQUFRLElBQ3BCVSxFQUFVLEVBQVEsSUFHdEJ6RixFQUFPRCxRQUFVLFNBQVVpZixHQUN6QixPQUFPLFNBQVVsVSxFQUFNbVUsR0FDckIsSUFHSWhhLEVBQUdzRCxFQUhIaEcsRUFBSWlILE9BQU8vRCxFQUFRcUYsSUFDbkJ0SyxFQUFJdUUsRUFBVWthLEdBQ2R4ZSxFQUFJOEIsRUFBRW1FLE9BRVYsT0FBSWxHLEVBQUksR0FBS0EsR0FBS0MsRUFBVXVlLEVBQVksUUFBS2piLEdBQzdDa0IsRUFBSTFDLEVBQUV1RyxXQUFXdEksSUFDTixPQUFVeUUsRUFBSSxPQUFVekUsRUFBSSxJQUFNQyxJQUFNOEgsRUFBSWhHLEVBQUV1RyxXQUFXdEksRUFBSSxJQUFNLE9BQVUrSCxFQUFJLE1BQ3hGeVcsRUFBWXpjLEVBQUUyYyxPQUFPMWUsR0FBS3lFLEVBQzFCK1osRUFBWXpjLEVBQUU2RixNQUFNNUgsRUFBR0EsRUFBSSxHQUEyQitILEVBQUksT0FBekJ0RCxFQUFJLE9BQVUsSUFBcUIsUyxnQkNiNUUsSUFBSWIsRUFBVyxFQUFRLEdBQ25Cb1osRUFBTSxFQUFRLElBQ2QyQixFQUFRLEVBQVEsRUFBUixDQUFrQixTQUM5Qm5mLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLElBQUkrYSxFQUNKLE9BQU9oYixFQUFTQyxVQUFtQ04sS0FBMUJxYixFQUFXL2EsRUFBRzhhLE1BQTBCQyxFQUFzQixVQUFYNUIsRUFBSW5aLE0sZ0JDTmxGLElBQUkyTCxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QnFQLEdBQWUsRUFFbkIsSUFDRSxJQUFJQyxFQUFRLENBQUMsR0FBR3RQLEtBQ2hCc1AsRUFBYyxPQUFJLFdBQWNELEdBQWUsR0FFL0NwUixNQUFNbUksS0FBS2tKLEdBQU8sV0FBYyxNQUFNLEtBQ3RDLE1BQU8zYSxJQUVUM0UsRUFBT0QsUUFBVSxTQUFVMkUsRUFBTTZhLEdBQy9CLElBQUtBLElBQWdCRixFQUFjLE9BQU8sRUFDMUMsSUFBSS9WLEdBQU8sRUFDWCxJQUNFLElBQUlrVyxFQUFNLENBQUMsR0FDUDFKLEVBQU8wSixFQUFJeFAsS0FDZjhGLEVBQUs3RCxLQUFPLFdBQWMsTUFBTyxDQUFFQyxLQUFNNUksR0FBTyxJQUNoRGtXLEVBQUl4UCxHQUFZLFdBQWMsT0FBTzhGLEdBQ3JDcFIsRUFBSzhhLEdBQ0wsTUFBTzdhLElBQ1QsT0FBTzJFLEksNkJDbEJULElBQUl3RCxFQUFVLEVBQVEsSUFDbEIyUyxFQUFjekIsT0FBTzViLFVBQVVzQyxLQUluQzFFLEVBQU9ELFFBQVUsU0FBVW9FLEVBQUdYLEdBQzVCLElBQUlrQixFQUFPUCxFQUFFTyxLQUNiLEdBQW9CLG1CQUFUQSxFQUFxQixDQUM5QixJQUFJd0QsRUFBU3hELEVBQUsvRCxLQUFLd0QsRUFBR1gsR0FDMUIsR0FBc0IsaUJBQVgwRSxFQUNULE1BQU0sSUFBSTVELFVBQVUsc0VBRXRCLE9BQU80RCxFQUVULEdBQW1CLFdBQWY0RSxFQUFRM0ksR0FDVixNQUFNLElBQUlHLFVBQVUsK0NBRXRCLE9BQU9tYixFQUFZOWUsS0FBS3dELEVBQUdYLEssNkJDbEI3QixFQUFRLEtBQ1IsSUFBSWIsRUFBVyxFQUFRLElBQ25CRCxFQUFPLEVBQVEsSUFDZitHLEVBQVEsRUFBUSxHQUNoQmhFLEVBQVUsRUFBUSxJQUNsQnlILEVBQU0sRUFBUSxHQUNkd1MsRUFBYSxFQUFRLElBRXJCM0MsRUFBVTdQLEVBQUksV0FFZHlTLEdBQWlDbFcsR0FBTSxXQUl6QyxJQUFJbVcsRUFBSyxJQU1ULE9BTEFBLEVBQUdsYixLQUFPLFdBQ1IsSUFBSXdELEVBQVMsR0FFYixPQURBQSxFQUFPMlgsT0FBUyxDQUFFNWEsRUFBRyxLQUNkaUQsR0FFeUIsTUFBM0IsR0FBR1MsUUFBUWlYLEVBQUksV0FHcEJFLEVBQW9DLFdBRXRDLElBQUlGLEVBQUssT0FDTEcsRUFBZUgsRUFBR2xiLEtBQ3RCa2IsRUFBR2xiLEtBQU8sV0FBYyxPQUFPcWIsRUFBYWhWLE1BQU0zSyxLQUFNaUksWUFDeEQsSUFBSUgsRUFBUyxLQUFLa0IsTUFBTXdXLEdBQ3hCLE9BQXlCLElBQWxCMVgsRUFBT3hCLFFBQThCLE1BQWR3QixFQUFPLElBQTRCLE1BQWRBLEVBQU8sR0FOcEIsR0FTeENsSSxFQUFPRCxRQUFVLFNBQVV1TCxFQUFLNUUsRUFBUWhDLEdBQ3RDLElBQUlzYixFQUFTOVMsRUFBSTVCLEdBRWIyVSxHQUF1QnhXLEdBQU0sV0FFL0IsSUFBSWxFLEVBQUksR0FFUixPQURBQSxFQUFFeWEsR0FBVSxXQUFjLE9BQU8sR0FDWixHQUFkLEdBQUcxVSxHQUFLL0YsTUFHYjJhLEVBQW9CRCxHQUF1QnhXLEdBQU0sV0FFbkQsSUFBSTBXLEdBQWEsRUFDYlAsRUFBSyxJQVNULE9BUkFBLEVBQUdsYixLQUFPLFdBQWlDLE9BQW5CeWIsR0FBYSxFQUFhLE1BQ3RDLFVBQVI3VSxJQUdGc1UsRUFBRy9ZLFlBQWMsR0FDakIrWSxFQUFHL1ksWUFBWWtXLEdBQVcsV0FBYyxPQUFPNkMsSUFFakRBLEVBQUdJLEdBQVEsS0FDSEcsVUFDTHBjLEVBRUwsSUFDR2tjLElBQ0FDLEdBQ1EsWUFBUjVVLElBQXNCcVUsR0FDZCxVQUFSclUsSUFBb0J3VSxFQUNyQixDQUNBLElBQUlNLEVBQXFCLElBQUlKLEdBQ3pCSyxFQUFNM2IsRUFDUmUsRUFDQXVhLEVBQ0EsR0FBRzFVLElBQ0gsU0FBeUJnVixFQUFjQyxFQUFRN1gsRUFBSzhYLEVBQU1DLEdBQ3hELE9BQUlGLEVBQU83YixPQUFTZ2IsRUFDZE8sSUFBd0JRLEVBSW5CLENBQUV2TyxNQUFNLEVBQU16USxNQUFPMmUsRUFBbUJ6ZixLQUFLNGYsRUFBUTdYLEVBQUs4WCxJQUU1RCxDQUFFdE8sTUFBTSxFQUFNelEsTUFBTzZlLEVBQWEzZixLQUFLK0gsRUFBSzZYLEVBQVFDLElBRXRELENBQUV0TyxNQUFNLE1BR2Z3TyxFQUFRTCxFQUFJLEdBQ1pNLEVBQU9OLEVBQUksR0FFZjFkLEVBQVM2RyxPQUFPcEgsVUFBV2tKLEVBQUtvVixHQUNoQ2hlLEVBQUtzYixPQUFPNWIsVUFBVzRkLEVBQWtCLEdBQVZ0WixFQUczQixTQUFVa0QsRUFBUXdCLEdBQU8sT0FBT3VWLEVBQUtoZ0IsS0FBS2lKLEVBQVF4SixLQUFNZ0wsSUFHeEQsU0FBVXhCLEdBQVUsT0FBTytXLEVBQUtoZ0IsS0FBS2lKLEVBQVF4SixXLGdCQzVGckQsSUFDSTBILEVBRFMsRUFBUSxHQUNFQSxVQUV2QjlILEVBQU9ELFFBQVUrSCxHQUFhQSxFQUFVOFksV0FBYSxJLDZCQ0ZyRCxJQUFJcGUsRUFBUyxFQUFRLEdBQ2pCSyxFQUFVLEVBQVEsR0FDbEJGLEVBQVcsRUFBUSxJQUNuQmdLLEVBQWMsRUFBUSxJQUN0QjRLLEVBQU8sRUFBUSxJQUNmc0osRUFBUSxFQUFRLElBQ2hCcFUsRUFBYSxFQUFRLElBQ3JCckksRUFBVyxFQUFRLEdBQ25CcUYsRUFBUSxFQUFRLEdBQ2hCK0QsRUFBYyxFQUFRLElBQ3RCc1QsRUFBaUIsRUFBUSxJQUN6QkMsRUFBb0IsRUFBUSxJQUVoQy9nQixFQUFPRCxRQUFVLFNBQVVpSyxFQUFNMkssRUFBU3FNLEVBQVNDLEVBQVF0VixFQUFRdVYsR0FDakUsSUFBSWxNLEVBQU94UyxFQUFPd0gsR0FDZG1ILEVBQUk2RCxFQUNKbU0sRUFBUXhWLEVBQVMsTUFBUSxNQUN6QjJHLEVBQVFuQixHQUFLQSxFQUFFL08sVUFDZm1ELEVBQUksR0FDSjZiLEVBQVksU0FBVTlWLEdBQ3hCLElBQUk3RSxFQUFLNkwsRUFBTWhILEdBQ2YzSSxFQUFTMlAsRUFBT2hILEVBQ1AsVUFBUEEsR0FFVyxPQUFQQSxFQUZjLFNBQVVyRyxHQUMxQixRQUFPaWMsSUFBWTljLEVBQVNhLEtBQWF3QixFQUFHOUYsS0FBS1AsS0FBWSxJQUFONkUsRUFBVSxFQUFJQSxJQUc1RCxPQUFQcUcsRUFBZSxTQUFhckcsR0FDOUIsT0FBT2ljLElBQVk5YyxFQUFTYSxRQUFLbEIsRUFBWTBDLEVBQUc5RixLQUFLUCxLQUFZLElBQU42RSxFQUFVLEVBQUlBLElBQ2hFLE9BQVBxRyxFQUFlLFNBQWFyRyxHQUFxQyxPQUFoQ3dCLEVBQUc5RixLQUFLUCxLQUFZLElBQU42RSxFQUFVLEVBQUlBLEdBQVc3RSxNQUN4RSxTQUFhNkUsRUFBR3NELEdBQXdDLE9BQW5DOUIsRUFBRzlGLEtBQUtQLEtBQVksSUFBTjZFLEVBQVUsRUFBSUEsRUFBR3NELEdBQVduSSxRQUd2RSxHQUFnQixtQkFBTCtRLElBQXFCK1AsR0FBVzVPLEVBQU0vTCxVQUFZa0QsR0FBTSxZQUNqRSxJQUFJMEgsR0FBSWpDLFVBQVUrQyxXQU1iLENBQ0wsSUFBSW9QLEVBQVcsSUFBSWxRLEVBRWZtUSxFQUFpQkQsRUFBU0YsR0FBT0QsRUFBVSxJQUFNLEVBQUcsSUFBTUcsRUFFMURFLEVBQXVCOVgsR0FBTSxXQUFjNFgsRUFBU3JZLElBQUksTUFFeER3WSxFQUFtQmhVLEdBQVksU0FBVXNJLEdBQVEsSUFBSTNFLEVBQUUyRSxNQUV2RDJMLEdBQWNQLEdBQVd6WCxHQUFNLFdBSWpDLElBRkEsSUFBSWlZLEVBQVksSUFBSXZRLEVBQ2hCL0UsRUFBUSxFQUNMQSxLQUFTc1YsRUFBVVAsR0FBTy9VLEVBQU9BLEdBQ3hDLE9BQVFzVixFQUFVMVksS0FBSyxNQUVwQndZLEtBQ0hyUSxFQUFJd0QsR0FBUSxTQUFVOVEsRUFBUXVaLEdBQzVCM1EsRUFBVzVJLEVBQVFzTixFQUFHbkgsR0FDdEIsSUFBSWMsRUFBT2lXLEVBQWtCLElBQUkvTCxFQUFRblIsRUFBUXNOLEdBRWpELE9BRGdCcE4sTUFBWnFaLEdBQXVCeUQsRUFBTXpELEVBQVV6UixFQUFRYixFQUFLcVcsR0FBUXJXLEdBQ3pEQSxNQUVQMUksVUFBWWtRLEVBQ2RBLEVBQU16TCxZQUFjc0ssSUFFbEJvUSxHQUF3QkUsS0FDMUJMLEVBQVUsVUFDVkEsRUFBVSxPQUNWelYsR0FBVXlWLEVBQVUsU0FFbEJLLEdBQWNILElBQWdCRixFQUFVRCxHQUV4Q0QsR0FBVzVPLEVBQU1xUCxjQUFjclAsRUFBTXFQLFdBcEN6Q3hRLEVBQUk4UCxFQUFPVyxlQUFlak4sRUFBUzNLLEVBQU0yQixFQUFRd1YsR0FDakR4VSxFQUFZd0UsRUFBRS9PLFVBQVc0ZSxHQUN6QnpKLEVBQUtDLE1BQU8sRUE0Q2QsT0FQQXNKLEVBQWUzUCxFQUFHbkgsR0FFbEJ6RSxFQUFFeUUsR0FBUW1ILEVBQ1Z0TyxFQUFRQSxFQUFRUyxFQUFJVCxFQUFRcUIsRUFBSXJCLEVBQVFPLEdBQUsrTixHQUFLNkQsR0FBT3pQLEdBRXBEMmIsR0FBU0QsRUFBT1ksVUFBVTFRLEVBQUduSCxFQUFNMkIsR0FFakN3RixJLGdCQ3BFVCxJQWZBLElBU0kyUSxFQVRBdGYsRUFBUyxFQUFRLEdBQ2pCRSxFQUFPLEVBQVEsSUFDZm1DLEVBQU0sRUFBUSxJQUNkMEwsRUFBUTFMLEVBQUksZUFDWjJMLEVBQU8zTCxFQUFJLFFBQ1hzUSxLQUFTM1MsRUFBT3lFLGNBQWV6RSxFQUFPNEwsVUFDdENpQyxFQUFTOEUsRUFDVDNVLEVBQUksRUFJSnVoQixFQUF5QixpSEFFM0IzWSxNQUFNLEtBRUQ1SSxFQVBDLElBUUZzaEIsRUFBUXRmLEVBQU91ZixFQUF1QnZoQixRQUN4Q2tDLEVBQUtvZixFQUFNMWYsVUFBV21PLEdBQU8sR0FDN0I3TixFQUFLb2YsRUFBTTFmLFVBQVdvTyxHQUFNLElBQ3ZCSCxHQUFTLEVBR2xCclEsRUFBT0QsUUFBVSxDQUNmb1YsSUFBS0EsRUFDTDlFLE9BQVFBLEVBQ1JFLE1BQU9BLEVBQ1BDLEtBQU1BLEksNkJDeEJSeFEsRUFBT0QsUUFBVSxFQUFRLE1BQWtCLEVBQVEsRUFBUixFQUFvQixXQUM3RCxJQUFJaWlCLEVBQUl4ZCxLQUFLa1gsU0FHYnVHLGlCQUFpQnRoQixLQUFLLEtBQU1xaEIsR0FBRyxzQkFDeEIsRUFBUSxHQUFhQSxPLDZCQ0w5QixJQUFJbmYsRUFBVSxFQUFRLEdBRXRCN0MsRUFBT0QsUUFBVSxTQUFVbWlCLEdBQ3pCcmYsRUFBUUEsRUFBUVcsRUFBRzBlLEVBQVksQ0FBRS9MLEdBQUksV0FHbkMsSUFGQSxJQUFJelAsRUFBUzJCLFVBQVUzQixPQUNuQnliLEVBQUksSUFBSWxVLE1BQU12SCxHQUNYQSxLQUFVeWIsRUFBRXpiLEdBQVUyQixVQUFVM0IsR0FDdkMsT0FBTyxJQUFJdEcsS0FBSytoQixRLDZCQ1BwQixJQUFJdGYsRUFBVSxFQUFRLEdBQ2xCZ0ksRUFBWSxFQUFRLElBQ3BCakksRUFBTSxFQUFRLElBQ2RpZSxFQUFRLEVBQVEsSUFFcEI3Z0IsRUFBT0QsUUFBVSxTQUFVbWlCLEdBQ3pCcmYsRUFBUUEsRUFBUVcsRUFBRzBlLEVBQVksQ0FBRTlMLEtBQU0sU0FBY3JULEdBQ25ELElBQ0lnUCxFQUFTb1EsRUFBR2xnQixFQUFHbWdCLEVBRGZDLEVBQVFoYSxVQUFVLEdBS3RCLE9BSEF3QyxFQUFVekssT0FDVjJSLE9BQW9CaE8sSUFBVnNlLElBQ0d4WCxFQUFVd1gsR0FDVHRlLE1BQVZoQixFQUE0QixJQUFJM0MsTUFDcEMraEIsRUFBSSxHQUNBcFEsR0FDRjlQLEVBQUksRUFDSm1nQixFQUFLeGYsRUFBSXlmLEVBQU9oYSxVQUFVLEdBQUksR0FDOUJ3WSxFQUFNOWQsR0FBUSxHQUFPLFNBQVV1ZixHQUM3QkgsRUFBRTlWLEtBQUsrVixFQUFHRSxFQUFVcmdCLFVBR3RCNGUsRUFBTTlkLEdBQVEsRUFBT29mLEVBQUU5VixLQUFNOFYsR0FFeEIsSUFBSS9oQixLQUFLK2hCLFMsZ0JDekJwQixJQUFJL2QsRUFBVyxFQUFRLEdBQ25CNEQsRUFBVyxFQUFRLEdBQWFBLFNBRWhDdWEsRUFBS25lLEVBQVM0RCxJQUFhNUQsRUFBUzRELEVBQVN3YSxlQUNqRHhpQixFQUFPRCxRQUFVLFNBQVVzRSxHQUN6QixPQUFPa2UsRUFBS3ZhLEVBQVN3YSxjQUFjbmUsR0FBTSxLLGdCQ0wzQyxJQUFJN0IsRUFBUyxFQUFRLEdBQ2pCQyxFQUFPLEVBQVEsSUFDZjZKLEVBQVUsRUFBUSxJQUNsQm1XLEVBQVMsRUFBUSxLQUNqQnRoQixFQUFpQixFQUFRLEdBQWdCbUUsRUFDN0N0RixFQUFPRCxRQUFVLFNBQVVnQixHQUN6QixJQUFJMmhCLEVBQVVqZ0IsRUFBS2xCLFNBQVdrQixFQUFLbEIsT0FBUytLLEVBQVUsR0FBSzlKLEVBQU9qQixRQUFVLElBQ3RELEtBQWxCUixFQUFLbWUsT0FBTyxJQUFlbmUsS0FBUTJoQixHQUFVdmhCLEVBQWV1aEIsRUFBUzNoQixFQUFNLENBQUVVLE1BQU9naEIsRUFBT25kLEVBQUV2RSxPLGdCQ1BuRyxJQUFJdVYsRUFBUyxFQUFRLEdBQVIsQ0FBcUIsUUFDOUJ6UixFQUFNLEVBQVEsSUFDbEI3RSxFQUFPRCxRQUFVLFNBQVVnQyxHQUN6QixPQUFPdVUsRUFBT3ZVLEtBQVN1VSxFQUFPdlUsR0FBTzhDLEVBQUk5QyxNLGNDRjNDL0IsRUFBT0QsUUFBVSxnR0FFZnFKLE1BQU0sTSxnQkNIUixJQUFJcEIsRUFBVyxFQUFRLEdBQWFBLFNBQ3BDaEksRUFBT0QsUUFBVWlJLEdBQVlBLEVBQVMyYSxpQixnQkNDdEMsSUFBSXZlLEVBQVcsRUFBUSxHQUNuQmMsRUFBVyxFQUFRLEdBQ25CMGQsRUFBUSxTQUFVcmQsRUFBRytNLEdBRXZCLEdBREFwTixFQUFTSyxJQUNKbkIsRUFBU2tPLElBQW9CLE9BQVZBLEVBQWdCLE1BQU1oTyxVQUFVZ08sRUFBUSw4QkFFbEV0UyxFQUFPRCxRQUFVLENBQ2YrUSxJQUFLNVAsT0FBTzJoQixpQkFBbUIsYUFBZSxHQUM1QyxTQUFVNVksRUFBTTZZLEVBQU9oUyxHQUNyQixLQUNFQSxFQUFNLEVBQVEsR0FBUixDQUFrQjlNLFNBQVNyRCxLQUFNLEVBQVEsSUFBa0IyRSxFQUFFcEUsT0FBT2tCLFVBQVcsYUFBYTBPLElBQUssSUFDbkc3RyxFQUFNLElBQ1Y2WSxJQUFVN1ksYUFBZ0JnRSxPQUMxQixNQUFPdEosR0FBS21lLEdBQVEsRUFDdEIsT0FBTyxTQUF3QnZkLEVBQUcrTSxHQUloQyxPQUhBc1EsRUFBTXJkLEVBQUcrTSxHQUNMd1EsRUFBT3ZkLEVBQUV3ZCxVQUFZelEsRUFDcEJ4QixFQUFJdkwsRUFBRytNLEdBQ0wvTSxHQVZYLENBWUUsSUFBSSxRQUFTeEIsR0FDakI2ZSxNQUFPQSxJLGNDdkJUNWlCLEVBQU9ELFFBQVUsa0QsZ0JDQWpCLElBQUlxRSxFQUFXLEVBQVEsR0FDbkJ5ZSxFQUFpQixFQUFRLElBQWdCL1IsSUFDN0M5USxFQUFPRCxRQUFVLFNBQVUrSyxFQUFNakgsRUFBUXNOLEdBQ3ZDLElBQ0l6TixFQURBRixFQUFJSyxFQUFPZ0QsWUFJYixPQUZFckQsSUFBTTJOLEdBQWlCLG1CQUFMM04sSUFBb0JFLEVBQUlGLEVBQUVwQixhQUFlK08sRUFBRS9PLFdBQWFnQyxFQUFTVixJQUFNbWYsR0FDM0ZBLEVBQWUvWCxFQUFNcEgsR0FDZG9ILEksNkJDTlgsSUFBSS9GLEVBQVksRUFBUSxJQUNwQlUsRUFBVSxFQUFRLElBRXRCekYsRUFBT0QsUUFBVSxTQUFnQmlqQixHQUMvQixJQUFJdGEsRUFBTWMsT0FBTy9ELEVBQVFyRixPQUNyQitMLEVBQU0sR0FDTmxLLEVBQUk4QyxFQUFVaWUsR0FDbEIsR0FBSS9nQixFQUFJLEdBQUtBLEdBQUtnaEIsSUFBVSxNQUFNblYsV0FBVywyQkFDN0MsS0FBTTdMLEVBQUksR0FBSUEsS0FBTyxLQUFPeUcsR0FBT0EsR0FBYyxFQUFKekcsSUFBT2tLLEdBQU96RCxHQUMzRCxPQUFPeUQsSSxjQ1RUbk0sRUFBT0QsUUFBVXlFLEtBQUswZSxNQUFRLFNBQWN6SSxHQUUxQyxPQUFtQixJQUFYQSxHQUFLQSxJQUFXQSxHQUFLQSxFQUFJQSxFQUFJQSxFQUFJLEdBQUssRUFBSSxJLGNDRnBELElBQUkwSSxFQUFTM2UsS0FBSzRlLE1BQ2xCcGpCLEVBQU9ELFNBQVlvakIsR0FFZEEsRUFBTyxJQUFNLG9CQUFzQkEsRUFBTyxJQUFNLHFCQUU3QixPQUFuQkEsR0FBUSxPQUNULFNBQWUxSSxHQUNqQixPQUFtQixJQUFYQSxHQUFLQSxHQUFVQSxFQUFJQSxHQUFLLE1BQVFBLEVBQUksS0FBT0EsRUFBSUEsRUFBSUEsRUFBSSxFQUFJalcsS0FBS3RCLElBQUl1WCxHQUFLLEdBQy9FMEksRyw2QkNSSixJQUFJN1csRUFBVSxFQUFRLElBQ2xCekosRUFBVSxFQUFRLEdBQ2xCRixFQUFXLEVBQVEsSUFDbkJELEVBQU8sRUFBUSxJQUNmNkssRUFBWSxFQUFRLElBQ3BCOFYsRUFBYyxFQUFRLElBQ3RCdkMsRUFBaUIsRUFBUSxJQUN6QnphLEVBQWlCLEVBQVEsSUFDekIySixFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QnNULElBQVUsR0FBR3RVLE1BQVEsUUFBVSxHQUFHQSxRQUtsQ3VVLEVBQWEsV0FBYyxPQUFPbmpCLE1BRXRDSixFQUFPRCxRQUFVLFNBQVVpVixFQUFNaEwsRUFBTWdULEVBQWEvSyxFQUFNdVIsRUFBU0MsRUFBUXZPLEdBQ3pFbU8sRUFBWXJHLEVBQWFoVCxFQUFNaUksR0FDL0IsSUFlSStPLEVBQVNqZixFQUFLMmhCLEVBZmRDLEVBQVksU0FBVUMsR0FDeEIsSUFBS04sR0FBU00sS0FBUXRSLEVBQU8sT0FBT0EsRUFBTXNSLEdBQzFDLE9BQVFBLEdBQ04sSUFWSyxPQVdMLElBVk8sU0FVTSxPQUFPLFdBQW9CLE9BQU8sSUFBSTVHLEVBQVk1YyxLQUFNd2pCLElBQ3JFLE9BQU8sV0FBcUIsT0FBTyxJQUFJNUcsRUFBWTVjLEtBQU13akIsS0FFekQzVCxFQUFNakcsRUFBTyxZQUNiNlosRUFkTyxVQWNNTCxFQUNiTSxHQUFhLEVBQ2J4UixFQUFRMEMsRUFBSzVTLFVBQ2IyaEIsRUFBVXpSLEVBQU10QyxJQUFhc0MsRUFuQmpCLGVBbUJ1Q2tSLEdBQVdsUixFQUFNa1IsR0FDcEVRLEVBQVdELEdBQVdKLEVBQVVILEdBQ2hDUyxFQUFXVCxFQUFXSyxFQUF3QkYsRUFBVSxXQUFyQkssT0FBa0NqZ0IsRUFDckVtZ0IsRUFBcUIsU0FBUmxhLEdBQWtCc0ksRUFBTXBELFNBQXFCNlUsRUF3QjlELEdBckJJRyxJQUNGUixFQUFvQnJkLEVBQWU2ZCxFQUFXdmpCLEtBQUssSUFBSXFVLE9BQzdCOVQsT0FBT2tCLFdBQWFzaEIsRUFBa0J6UixPQUU5RDZPLEVBQWU0QyxFQUFtQnpULEdBQUssR0FFbEMzRCxHQUFpRCxtQkFBL0JvWCxFQUFrQjFULElBQXlCdE4sRUFBS2doQixFQUFtQjFULEVBQVV1VCxJQUlwR00sR0FBY0UsR0FqQ1AsV0FpQ2tCQSxFQUFRaGpCLE9BQ25DK2lCLEdBQWEsRUFDYkUsRUFBVyxXQUFvQixPQUFPRCxFQUFRcGpCLEtBQUtQLFFBRy9Da00sSUFBVzRJLElBQVlvTyxJQUFTUSxHQUFleFIsRUFBTXRDLElBQ3pEdE4sRUFBSzRQLEVBQU90QyxFQUFVZ1UsR0FHeEJ6VyxFQUFVdkQsR0FBUWdhLEVBQ2xCelcsRUFBVTBDLEdBQU9zVCxFQUNiQyxFQU1GLEdBTEF4QyxFQUFVLENBQ1JsUyxPQUFRK1UsRUFBYUcsRUFBV0wsRUE5Q3pCLFVBK0NQM1UsS0FBTXlVLEVBQVNPLEVBQVdMLEVBaERyQixRQWlETHpVLFFBQVMrVSxHQUVQL08sRUFBUSxJQUFLblQsS0FBT2lmLEVBQ2hCamYsS0FBT3VRLEdBQVEzUCxFQUFTMlAsRUFBT3ZRLEVBQUtpZixFQUFRamYsU0FDN0NjLEVBQVFBLEVBQVFhLEVBQUliLEVBQVFPLEdBQUtrZ0IsR0FBU1EsR0FBYTlaLEVBQU1nWCxHQUV0RSxPQUFPQSxJLDZCQ2xFVCxJQUFJbGYsRUFBUyxFQUFRLElBQ2pCcWlCLEVBQWEsRUFBUSxJQUNyQnJELEVBQWlCLEVBQVEsSUFDekI0QyxFQUFvQixHQUd4QixFQUFRLEdBQVIsQ0FBbUJBLEVBQW1CLEVBQVEsRUFBUixDQUFrQixhQUFhLFdBQWMsT0FBT3RqQixRQUUxRkosRUFBT0QsUUFBVSxTQUFVaWQsRUFBYWhULEVBQU1pSSxHQUM1QytLLEVBQVk1YSxVQUFZTixFQUFPNGhCLEVBQW1CLENBQUV6UixLQUFNa1MsRUFBVyxFQUFHbFMsS0FDeEU2TyxFQUFlOUQsRUFBYWhULEVBQU8sZSxnQkNWckMsSUFBSW9WLEVBQVcsRUFBUSxJQUNuQjNaLEVBQVUsRUFBUSxJQUV0QnpGLEVBQU9ELFFBQVUsU0FBVStLLEVBQU1zWixFQUFjcGEsR0FDN0MsR0FBSW9WLEVBQVNnRixHQUFlLE1BQU05ZixVQUFVLFVBQVkwRixFQUFPLDBCQUMvRCxPQUFPUixPQUFPL0QsRUFBUXFGLE0sZ0JDTnhCLElBQUlxVSxFQUFRLEVBQVEsRUFBUixDQUFrQixTQUM5Qm5mLEVBQU9ELFFBQVUsU0FBVXVMLEdBQ3pCLElBQUlzVSxFQUFLLElBQ1QsSUFDRSxNQUFNdFUsR0FBS3NVLEdBQ1gsTUFBT2piLEdBQ1AsSUFFRSxPQURBaWIsRUFBR1QsSUFBUyxHQUNKLE1BQU03VCxHQUFLc1UsR0FDbkIsTUFBT3RhLEtBQ1QsT0FBTyxJLGdCQ1RYLElBQUlpSSxFQUFZLEVBQVEsSUFDcEJ5QyxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QmhDLEVBQWFDLE1BQU03TCxVQUV2QnBDLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLFlBQWNOLElBQVBNLElBQXFCa0osRUFBVVUsUUFBVTVKLEdBQU0ySixFQUFXZ0MsS0FBYzNMLEssNkJDTGpGLElBQUlnZ0IsRUFBa0IsRUFBUSxHQUMxQnRiLEVBQWEsRUFBUSxJQUV6Qi9JLEVBQU9ELFFBQVUsU0FBVW1DLEVBQVFrSyxFQUFPM0ssR0FDcEMySyxLQUFTbEssRUFBUW1pQixFQUFnQi9lLEVBQUVwRCxFQUFRa0ssRUFBT3JELEVBQVcsRUFBR3RILElBQy9EUyxFQUFPa0ssR0FBUzNLLEksZ0JDTnZCLElBQUlxTCxFQUFVLEVBQVEsSUFDbEJrRCxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QnpDLEVBQVksRUFBUSxJQUN4QnZOLEVBQU9ELFFBQVUsRUFBUSxJQUFXdWtCLGtCQUFvQixTQUFVamdCLEdBQ2hFLEdBQVVOLE1BQU5NLEVBQWlCLE9BQU9BLEVBQUcyTCxJQUMxQjNMLEVBQUcsZUFDSGtKLEVBQVVULEVBQVF6SSxNLGdCQ0x6QixJQUFJZ0osRUFBcUIsRUFBUSxLQUVqQ3JOLEVBQU9ELFFBQVUsU0FBVXdrQixFQUFVN2QsR0FDbkMsT0FBTyxJQUFLMkcsRUFBbUJrWCxHQUF4QixDQUFtQzdkLEssNkJDRjVDLElBQUk4RCxFQUFXLEVBQVEsR0FDbkJxQyxFQUFrQixFQUFRLElBQzFCdEIsRUFBVyxFQUFRLEdBQ3ZCdkwsRUFBT0QsUUFBVSxTQUFjMEIsR0FPN0IsSUFOQSxJQUFJOEQsRUFBSWlGLEVBQVNwSyxNQUNic0csRUFBUzZFLEVBQVNoRyxFQUFFbUIsUUFDcEJtTCxFQUFPeEosVUFBVTNCLE9BQ2pCMEYsRUFBUVMsRUFBZ0JnRixFQUFPLEVBQUl4SixVQUFVLFFBQUt0RSxFQUFXMkMsR0FDN0RnTixFQUFNN0IsRUFBTyxFQUFJeEosVUFBVSxRQUFLdEUsRUFDaEN5Z0IsT0FBaUJ6Z0IsSUFBUjJQLEVBQW9CaE4sRUFBU21HLEVBQWdCNkcsRUFBS2hOLEdBQ3hEOGQsRUFBU3BZLEdBQU83RyxFQUFFNkcsS0FBVzNLLEVBQ3BDLE9BQU84RCxJLDZCQ1pULElBQUlrZixFQUFtQixFQUFRLElBQzNCOVMsRUFBTyxFQUFRLEtBQ2ZwRSxFQUFZLEVBQVEsSUFDcEJsRCxFQUFZLEVBQVEsSUFNeEJySyxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQUEwQmtPLE1BQU8sU0FBUyxTQUFVeVcsRUFBVWQsR0FDN0V4akIsS0FBS2lkLEdBQUtoVCxFQUFVcWEsR0FDcEJ0a0IsS0FBS3VrQixHQUFLLEVBQ1Z2a0IsS0FBS3drQixHQUFLaEIsS0FFVCxXQUNELElBQUlyZSxFQUFJbkYsS0FBS2lkLEdBQ1R1RyxFQUFPeGpCLEtBQUt3a0IsR0FDWnhZLEVBQVFoTSxLQUFLdWtCLEtBQ2pCLE9BQUtwZixHQUFLNkcsR0FBUzdHLEVBQUVtQixRQUNuQnRHLEtBQUtpZCxRQUFLdFosRUFDSDROLEVBQUssSUFFYUEsRUFBSyxFQUFwQixRQUFSaVMsRUFBK0J4WCxFQUN2QixVQUFSd1gsRUFBaUNyZSxFQUFFNkcsR0FDeEIsQ0FBQ0EsRUFBTzdHLEVBQUU2RyxPQUN4QixVQUdIbUIsRUFBVXNYLFVBQVl0WCxFQUFVVSxNQUVoQ3dXLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWSw2QkMvQmpCLElBYU1LLEVBQ0FDLEVBZEZDLEVBQWMsRUFBUSxJQUV0QkMsRUFBYWpILE9BQU81YixVQUFVc0MsS0FJOUJ3Z0IsRUFBZ0IxYixPQUFPcEgsVUFBVXVHLFFBRWpDd2MsRUFBY0YsRUFJZEcsR0FDRU4sRUFBTSxJQUNOQyxFQUFNLE1BQ1ZFLEVBQVd0a0IsS0FBS21rQixFQUFLLEtBQ3JCRyxFQUFXdGtCLEtBQUtva0IsRUFBSyxLQUNNLElBQXBCRCxFQUFjLFdBQStCLElBQXBCQyxFQUFjLFdBSTVDTSxPQUF1Q3RoQixJQUF2QixPQUFPVyxLQUFLLElBQUksSUFFeEIwZ0IsR0FBNEJDLEtBR3RDRixFQUFjLFNBQWN6YyxHQUMxQixJQUNJNGMsRUFBV0MsRUFBUUMsRUFBT2hsQixFQUQxQm9mLEVBQUt4ZixLQXdCVCxPQXJCSWlsQixJQUNGRSxFQUFTLElBQUl2SCxPQUFPLElBQU00QixFQUFHN2MsT0FBUyxXQUFZaWlCLEVBQVlya0IsS0FBS2lmLEtBRWpFd0YsSUFBMEJFLEVBQVkxRixFQUFhLFdBRXZENEYsRUFBUVAsRUFBV3RrQixLQUFLaWYsRUFBSWxYLEdBRXhCMGMsR0FBNEJJLElBQzlCNUYsRUFBYSxVQUFJQSxFQUFHcGQsT0FBU2dqQixFQUFNcFosTUFBUW9aLEVBQU0sR0FBRzllLE9BQVM0ZSxHQUUzREQsR0FBaUJHLEdBQVNBLEVBQU05ZSxPQUFTLEdBSTNDd2UsRUFBY3ZrQixLQUFLNmtCLEVBQU0sR0FBSUQsR0FBUSxXQUNuQyxJQUFLL2tCLEVBQUksRUFBR0EsRUFBSTZILFVBQVUzQixPQUFTLEVBQUdsRyxTQUNmdUQsSUFBakJzRSxVQUFVN0gsS0FBa0JnbEIsRUFBTWhsQixRQUFLdUQsTUFLMUN5aEIsSUFJWHhsQixFQUFPRCxRQUFVb2xCLEcsNkJDeERqQixJQUFJTSxFQUFLLEVBQVEsR0FBUixFQUF3QixHQUlqQ3psQixFQUFPRCxRQUFVLFNBQVV5RCxFQUFHNEksRUFBT3FTLEdBQ25DLE9BQU9yUyxHQUFTcVMsRUFBVWdILEVBQUdqaUIsRUFBRzRJLEdBQU8xRixPQUFTLEssZ0JDTmxELElBYUlnZixFQUFPQyxFQUFTQyxFQWJoQmhqQixFQUFNLEVBQVEsSUFDZGlqQixFQUFTLEVBQVEsS0FDakJDLEVBQU8sRUFBUSxJQUNmQyxFQUFNLEVBQVEsSUFDZHZqQixFQUFTLEVBQVEsR0FDakJ3akIsRUFBVXhqQixFQUFPd2pCLFFBQ2pCQyxFQUFVempCLEVBQU8wakIsYUFDakJDLEVBQVkzakIsRUFBTzRqQixlQUNuQkMsRUFBaUI3akIsRUFBTzZqQixlQUN4QkMsRUFBVzlqQixFQUFPOGpCLFNBQ2xCQyxFQUFVLEVBQ1ZDLEVBQVEsR0FHUkMsRUFBTSxXQUNSLElBQUl4UCxHQUFNN1csS0FFVixHQUFJb21CLEVBQU1ua0IsZUFBZTRVLEdBQUssQ0FDNUIsSUFBSXhRLEVBQUsrZixFQUFNdlAsVUFDUnVQLEVBQU12UCxHQUNieFEsTUFHQWlnQixFQUFXLFNBQVVDLEdBQ3ZCRixFQUFJOWxCLEtBQUtnbUIsRUFBTTVnQixPQUdaa2dCLEdBQVlFLElBQ2ZGLEVBQVUsU0FBc0J4ZixHQUc5QixJQUZBLElBQUltZ0IsRUFBTyxHQUNQcG1CLEVBQUksRUFDRDZILFVBQVUzQixPQUFTbEcsR0FBR29tQixFQUFLdmEsS0FBS2hFLFVBQVU3SCxNQU1qRCxPQUxBZ21CLElBQVFELEdBQVcsV0FFakJWLEVBQW9CLG1CQUFOcGYsRUFBbUJBLEVBQUt6QyxTQUFTeUMsR0FBS21nQixJQUV0RGxCLEVBQU1hLEdBQ0NBLEdBRVRKLEVBQVksU0FBd0JsUCxVQUMzQnVQLEVBQU12UCxJQUdtQixXQUE5QixFQUFRLEdBQVIsQ0FBa0IrTyxHQUNwQk4sRUFBUSxTQUFVek8sR0FDaEIrTyxFQUFRYSxTQUFTamtCLEVBQUk2akIsRUFBS3hQLEVBQUksS0FHdkJxUCxHQUFZQSxFQUFTUSxJQUM5QnBCLEVBQVEsU0FBVXpPLEdBQ2hCcVAsRUFBU1EsSUFBSWxrQixFQUFJNmpCLEVBQUt4UCxFQUFJLEtBR25Cb1AsR0FFVFQsR0FEQUQsRUFBVSxJQUFJVSxHQUNDVSxNQUNmcEIsRUFBUXFCLE1BQU1DLFVBQVlQLEVBQzFCaEIsRUFBUTlpQixFQUFJZ2pCLEVBQUtzQixZQUFhdEIsRUFBTSxJQUczQnBqQixFQUFPMmtCLGtCQUEwQyxtQkFBZkQsY0FBOEIxa0IsRUFBTzRrQixlQUNoRjFCLEVBQVEsU0FBVXpPLEdBQ2hCelUsRUFBTzBrQixZQUFZalEsRUFBSyxHQUFJLE1BRTlCelUsRUFBTzJrQixpQkFBaUIsVUFBV1QsR0FBVSxJQUc3Q2hCLEVBdkRxQix1QkFzRFVLLEVBQUksVUFDM0IsU0FBVTlPLEdBQ2hCNk8sRUFBS3pKLFlBQVkwSixFQUFJLFdBQTZCLG1CQUFJLFdBQ3BERCxFQUFLdUIsWUFBWWpuQixNQUNqQnFtQixFQUFJOWxCLEtBQUtzVyxLQUtMLFNBQVVBLEdBQ2hCcVEsV0FBVzFrQixFQUFJNmpCLEVBQUt4UCxFQUFJLEdBQUksS0FJbENqWCxFQUFPRCxRQUFVLENBQ2YrUSxJQUFLbVYsRUFDTHRFLE1BQU93RSxJLGdCQ2xGVCxJQUFJM2pCLEVBQVMsRUFBUSxHQUNqQitrQixFQUFZLEVBQVEsSUFBV3pXLElBQy9CMFcsRUFBV2hsQixFQUFPaWxCLGtCQUFvQmpsQixFQUFPa2xCLHVCQUM3QzFCLEVBQVV4akIsRUFBT3dqQixRQUNqQjJCLEVBQVVubEIsRUFBT21sQixRQUNqQkMsRUFBdUMsV0FBOUIsRUFBUSxHQUFSLENBQWtCNUIsR0FFL0JobUIsRUFBT0QsUUFBVSxXQUNmLElBQUk4bkIsRUFBTUMsRUFBTUMsRUFFWkMsRUFBUSxXQUNWLElBQUlDLEVBQVF4aEIsRUFFWixJQURJbWhCLElBQVdLLEVBQVNqQyxFQUFRa0MsU0FBU0QsRUFBT0UsT0FDekNOLEdBQU0sQ0FDWHBoQixFQUFLb2hCLEVBQUtwaEIsR0FDVm9oQixFQUFPQSxFQUFLNVYsS0FDWixJQUNFeEwsSUFDQSxNQUFPOUIsR0FHUCxNQUZJa2pCLEVBQU1FLElBQ0xELE9BQU8vakIsRUFDTlksR0FFUm1qQixPQUFPL2pCLEVBQ0xra0IsR0FBUUEsRUFBT0csU0FJckIsR0FBSVIsRUFDRkcsRUFBUyxXQUNQL0IsRUFBUWEsU0FBU21CLFNBR2QsSUFBSVIsR0FBY2hsQixFQUFPc0YsV0FBYXRGLEVBQU9zRixVQUFVdWdCLFdBUXZELEdBQUlWLEdBQVdBLEVBQVFXLFFBQVMsQ0FFckMsSUFBSUMsRUFBVVosRUFBUVcsYUFBUXZrQixHQUM5QmdrQixFQUFTLFdBQ1BRLEVBQVFDLEtBQUtSLFNBU2ZELEVBQVMsV0FFUFIsRUFBVTVtQixLQUFLNkIsRUFBUXdsQixRQXZCZ0QsQ0FDekUsSUFBSVMsR0FBUyxFQUNUQyxFQUFPMWdCLFNBQVMyZ0IsZUFBZSxJQUNuQyxJQUFJbkIsRUFBU1EsR0FBT1ksUUFBUUYsRUFBTSxDQUFFRyxlQUFlLElBQ25EZCxFQUFTLFdBQ1BXLEVBQUszaUIsS0FBTzBpQixHQUFVQSxHQXNCMUIsT0FBTyxTQUFVaGlCLEdBQ2YsSUFBSXFpQixFQUFPLENBQUVyaUIsR0FBSUEsRUFBSXdMLFVBQU1sTyxHQUN2QitqQixJQUFNQSxFQUFLN1YsS0FBTzZXLEdBQ2pCakIsSUFDSEEsRUFBT2lCLEVBQ1BmLEtBQ0FELEVBQU9nQixLLDZCQ2hFYixJQUFJamUsRUFBWSxFQUFRLElBRXhCLFNBQVNrZSxFQUFrQjVYLEdBQ3pCLElBQUltWCxFQUFTVSxFQUNiNW9CLEtBQUttb0IsUUFBVSxJQUFJcFgsR0FBRSxTQUFVOFgsRUFBV0MsR0FDeEMsUUFBZ0JubEIsSUFBWnVrQixRQUFvQ3ZrQixJQUFYaWxCLEVBQXNCLE1BQU0xa0IsVUFBVSwyQkFDbkVna0IsRUFBVVcsRUFDVkQsRUFBU0UsS0FFWDlvQixLQUFLa29CLFFBQVV6ZCxFQUFVeWQsR0FDekJsb0IsS0FBSzRvQixPQUFTbmUsRUFBVW1lLEdBRzFCaHBCLEVBQU9ELFFBQVF1RixFQUFJLFNBQVU2TCxHQUMzQixPQUFPLElBQUk0WCxFQUFrQjVYLEssNkJDZi9CLElBQUkzTyxFQUFTLEVBQVEsR0FDakJzYSxFQUFjLEVBQVEsR0FDdEJ4USxFQUFVLEVBQVEsSUFDbEJDLEVBQVMsRUFBUSxJQUNqQjdKLEVBQU8sRUFBUSxJQUNmaUssRUFBYyxFQUFRLElBQ3RCbEQsRUFBUSxFQUFRLEdBQ2hCZ0QsRUFBYSxFQUFRLElBQ3JCMUgsRUFBWSxFQUFRLElBQ3BCd0csRUFBVyxFQUFRLEdBQ25CcUIsRUFBVSxFQUFRLEtBQ2xCSSxFQUFPLEVBQVEsSUFBa0IxSCxFQUNqQ0QsRUFBSyxFQUFRLEdBQWdCQyxFQUM3Qm9JLEVBQVksRUFBUSxJQUNwQm9ULEVBQWlCLEVBQVEsSUFNekI1UyxFQUFlMUwsRUFBbUIsWUFDbEMyTCxFQUFZM0wsRUFBZ0IsU0FDNUJnQyxFQUFPaEMsRUFBT2dDLEtBQ2RzSixFQUFhdEwsRUFBT3NMLFdBRXBCbVYsRUFBV3pnQixFQUFPeWdCLFNBQ2xCa0csRUFBYWpiLEVBQ2JrYixFQUFNNWtCLEVBQUs0a0IsSUFDWEMsRUFBTTdrQixFQUFLNmtCLElBQ1hwZSxFQUFRekcsRUFBS3lHLE1BQ2JxZSxFQUFNOWtCLEVBQUs4a0IsSUFDWEMsRUFBTS9rQixFQUFLK2tCLElBSVhDLEVBQVUxTSxFQUFjLEtBSGYsU0FJVDJNLEVBQVUzTSxFQUFjLEtBSFYsYUFJZDRNLEVBQVU1TSxFQUFjLEtBSFYsYUFNbEIsU0FBUzZNLEVBQVlsb0IsRUFBT21vQixFQUFNQyxHQUNoQyxJQU9JbGxCLEVBQUcvRCxFQUFHQyxFQVBOc0csRUFBUyxJQUFJOEcsTUFBTTRiLEdBQ25CQyxFQUFnQixFQUFURCxFQUFhRCxFQUFPLEVBQzNCRyxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJFLEVBQWMsS0FBVEwsRUFBY1AsRUFBSSxHQUFJLElBQU1BLEVBQUksR0FBSSxJQUFNLEVBQy9DN29CLEVBQUksRUFDSitCLEVBQUlkLEVBQVEsR0FBZSxJQUFWQSxHQUFlLEVBQUlBLEVBQVEsRUFBSSxFQUFJLEVBa0N4RCxLQWhDQUEsRUFBUTJuQixFQUFJM25CLEtBRUNBLEdBQVNBLElBQVV3aEIsR0FFOUJyaUIsRUFBSWEsR0FBU0EsRUFBUSxFQUFJLEVBQ3pCa0QsRUFBSW9sQixJQUVKcGxCLEVBQUlzRyxFQUFNcWUsRUFBSTduQixHQUFTOG5CLEdBQ25COW5CLEdBQVNaLEVBQUl3b0IsRUFBSSxHQUFJMWtCLElBQU0sSUFDN0JBLElBQ0E5RCxHQUFLLElBR0xZLEdBREVrRCxFQUFJcWxCLEdBQVMsRUFDTkMsRUFBS3BwQixFQUVMb3BCLEVBQUtaLEVBQUksRUFBRyxFQUFJVyxJQUVmbnBCLEdBQUssSUFDZjhELElBQ0E5RCxHQUFLLEdBRUg4RCxFQUFJcWxCLEdBQVNELEdBQ2ZucEIsRUFBSSxFQUNKK0QsRUFBSW9sQixHQUNLcGxCLEVBQUlxbEIsR0FBUyxHQUN0QnBwQixHQUFLYSxFQUFRWixFQUFJLEdBQUt3b0IsRUFBSSxFQUFHTyxHQUM3QmpsQixHQUFRcWxCLElBRVJwcEIsRUFBSWEsRUFBUTRuQixFQUFJLEVBQUdXLEVBQVEsR0FBS1gsRUFBSSxFQUFHTyxHQUN2Q2psQixFQUFJLElBR0RpbEIsR0FBUSxFQUFHemlCLEVBQU8zRyxLQUFXLElBQUpJLEVBQVNBLEdBQUssSUFBS2dwQixHQUFRLEdBRzNELElBRkFqbEIsRUFBSUEsR0FBS2lsQixFQUFPaHBCLEVBQ2hCa3BCLEdBQVFGLEVBQ0RFLEVBQU8sRUFBRzNpQixFQUFPM0csS0FBVyxJQUFKbUUsRUFBU0EsR0FBSyxJQUFLbWxCLEdBQVEsR0FFMUQsT0FEQTNpQixJQUFTM0csSUFBVSxJQUFKK0IsRUFDUjRFLEVBRVQsU0FBUytpQixFQUFjL2lCLEVBQVF5aUIsRUFBTUMsR0FDbkMsSUFPSWpwQixFQVBBa3BCLEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBUUwsRUFBTyxFQUNmdHBCLEVBQUlxcEIsRUFBUyxFQUNidG5CLEVBQUk0RSxFQUFPM0csS0FDWG1FLEVBQVEsSUFBSnBDLEVBR1IsSUFEQUEsSUFBTSxFQUNDNG5CLEVBQVEsRUFBR3hsQixFQUFRLElBQUpBLEVBQVV3QyxFQUFPM0csR0FBSUEsSUFBSzJwQixHQUFTLEdBSXpELElBSEF2cEIsRUFBSStELEdBQUssSUFBTXdsQixHQUFTLEVBQ3hCeGxCLEtBQU93bEIsRUFDUEEsR0FBU1AsRUFDRk8sRUFBUSxFQUFHdnBCLEVBQVEsSUFBSkEsRUFBVXVHLEVBQU8zRyxHQUFJQSxJQUFLMnBCLEdBQVMsR0FDekQsR0FBVSxJQUFOeGxCLEVBQ0ZBLEVBQUksRUFBSXFsQixNQUNILElBQUlybEIsSUFBTW9sQixFQUNmLE9BQU9ucEIsRUFBSXdwQixJQUFNN25CLEdBQUswZ0IsRUFBV0EsRUFFakNyaUIsR0FBUXlvQixFQUFJLEVBQUdPLEdBQ2ZqbEIsR0FBUXFsQixFQUNSLE9BQVF6bkIsR0FBSyxFQUFJLEdBQUszQixFQUFJeW9CLEVBQUksRUFBRzFrQixFQUFJaWxCLEdBR3pDLFNBQVNTLEVBQVVDLEdBQ2pCLE9BQU9BLEVBQU0sSUFBTSxHQUFLQSxFQUFNLElBQU0sR0FBS0EsRUFBTSxJQUFNLEVBQUlBLEVBQU0sR0FFakUsU0FBU0MsRUFBT2xtQixHQUNkLE1BQU8sQ0FBTSxJQUFMQSxHQUVWLFNBQVNtbUIsRUFBUW5tQixHQUNmLE1BQU8sQ0FBTSxJQUFMQSxFQUFXQSxHQUFNLEVBQUksS0FFL0IsU0FBU29tQixFQUFRcG1CLEdBQ2YsTUFBTyxDQUFNLElBQUxBLEVBQVdBLEdBQU0sRUFBSSxJQUFNQSxHQUFNLEdBQUssSUFBTUEsR0FBTSxHQUFLLEtBRWpFLFNBQVNxbUIsRUFBUXJtQixHQUNmLE9BQU9zbEIsRUFBWXRsQixFQUFJLEdBQUksR0FFN0IsU0FBU3NtQixFQUFRdG1CLEdBQ2YsT0FBT3NsQixFQUFZdGxCLEVBQUksR0FBSSxHQUc3QixTQUFTa04sRUFBVUosRUFBR3BQLEVBQUt5UCxHQUN6Qm5NLEVBQUc4TCxFQUFXLFVBQUdwUCxFQUFLLENBQUVWLElBQUssV0FBYyxPQUFPakIsS0FBS29SLE1BR3pELFNBQVNuUSxFQUFJdXBCLEVBQU1OLEVBQU9sZSxFQUFPeWUsR0FDL0IsSUFDSUMsRUFBV2xlLEdBRENSLEdBRWhCLEdBQUkwZSxFQUFXUixFQUFRTSxFQUFLbkIsR0FBVSxNQUFNM2IsRUF4SDVCLGdCQXlIaEIsSUFBSWxKLEVBQVFnbUIsRUFBS3BCLEdBQVN1QixHQUN0QnZZLEVBQVFzWSxFQUFXRixFQUFLbEIsR0FDeEJzQixFQUFPcG1CLEVBQU13RCxNQUFNb0ssRUFBT0EsRUFBUThYLEdBQ3RDLE9BQU9PLEVBQWlCRyxFQUFPQSxFQUFLNVgsVUFFdEMsU0FBU3RDLEVBQUk4WixFQUFNTixFQUFPbGUsRUFBTzZlLEVBQVl4cEIsRUFBT29wQixHQUNsRCxJQUNJQyxFQUFXbGUsR0FEQ1IsR0FFaEIsR0FBSTBlLEVBQVdSLEVBQVFNLEVBQUtuQixHQUFVLE1BQU0zYixFQWpJNUIsZ0JBcUloQixJQUhBLElBQUlsSixFQUFRZ21CLEVBQUtwQixHQUFTdUIsR0FDdEJ2WSxFQUFRc1ksRUFBV0YsRUFBS2xCLEdBQ3hCc0IsRUFBT0MsR0FBWXhwQixHQUNkakIsRUFBSSxFQUFHQSxFQUFJOHBCLEVBQU85cEIsSUFBS29FLEVBQU00TixFQUFRaFMsR0FBS3dxQixFQUFLSCxFQUFpQnJxQixFQUFJOHBCLEVBQVE5cEIsRUFBSSxHQUczRixHQUFLK0wsRUFBTzRJLElBZ0ZMLENBQ0wsSUFBSzFMLEdBQU0sV0FDVHlFLEVBQWEsUUFDUnpFLEdBQU0sV0FDWCxJQUFJeUUsR0FBYyxPQUNkekUsR0FBTSxXQUlWLE9BSEEsSUFBSXlFLEVBQ0osSUFBSUEsRUFBYSxLQUNqQixJQUFJQSxFQUFha2MsS0FwT0YsZUFxT1JsYyxFQUFhbk4sUUFDbEIsQ0FNRixJQURBLElBQ3lDZ0IsRUFEckNtcEIsR0FKSmhkLEVBQWUsU0FBcUJ4SCxHQUVsQyxPQURBK0YsRUFBV3JNLEtBQU04TixHQUNWLElBQUlpYixFQUFXdmMsRUFBUWxHLE1BRWEsVUFBSXlpQixFQUFvQixVQUM1RG5hLEVBQU9oQyxFQUFLbWMsR0FBYWdDLEVBQUksRUFBUW5jLEVBQUt0SSxPQUFTeWtCLElBQ25EcHBCLEVBQU1pTixFQUFLbWMsUUFBU2pkLEdBQWV4TCxFQUFLd0wsRUFBY25NLEVBQUtvbkIsRUFBV3BuQixJQUUxRXVLLElBQVM0ZSxFQUFpQnJrQixZQUFjcUgsR0FHL0MsSUFBSTBjLEVBQU8sSUFBSXpjLEVBQVUsSUFBSUQsRUFBYSxJQUN0Q2tkLEVBQVdqZCxFQUFtQixVQUFFa2QsUUFDcENULEVBQUtTLFFBQVEsRUFBRyxZQUNoQlQsRUFBS1MsUUFBUSxFQUFHLGFBQ1pULEVBQUtVLFFBQVEsSUFBT1YsRUFBS1UsUUFBUSxJQUFJM2UsRUFBWXdCLEVBQW1CLFVBQUcsQ0FDekVrZCxRQUFTLFNBQWlCelgsRUFBWW5TLEdBQ3BDMnBCLEVBQVN6cUIsS0FBS1AsS0FBTXdULEVBQVluUyxHQUFTLElBQU0sS0FFakQ4cEIsU0FBVSxTQUFrQjNYLEVBQVluUyxHQUN0QzJwQixFQUFTenFCLEtBQUtQLEtBQU13VCxFQUFZblMsR0FBUyxJQUFNLE9BRWhELFFBaEhIeU0sRUFBZSxTQUFxQnhILEdBQ2xDK0YsRUFBV3JNLEtBQU04TixFQTlJRixlQStJZixJQUFJeUgsRUFBYS9JLEVBQVFsRyxHQUN6QnRHLEtBQUsycUIsR0FBS3JkLEVBQVUvTSxLQUFLLElBQUlzTixNQUFNMEgsR0FBYSxHQUNoRHZWLEtBQUtxcEIsR0FBVzlULEdBR2xCeEgsRUFBWSxTQUFrQmhILEVBQVF5TSxFQUFZK0IsR0FDaERsSixFQUFXck0sS0FBTStOLEVBcEpMLFlBcUpaMUIsRUFBV3RGLEVBQVErRyxFQXJKUCxZQXNKWixJQUFJc2QsRUFBZXJrQixFQUFPc2lCLEdBQ3RCeFksRUFBU2xNLEVBQVU2TyxHQUN2QixHQUFJM0MsRUFBUyxHQUFLQSxFQUFTdWEsRUFBYyxNQUFNMWQsRUFBVyxpQkFFMUQsR0FBSW1ELEdBREowRSxPQUE0QjVSLElBQWY0UixFQUEyQjZWLEVBQWV2YSxFQUFTMUYsRUFBU29LLElBQy9DNlYsRUFBYyxNQUFNMWQsRUF4Si9CLGlCQXlKZjFOLEtBQUtvcEIsR0FBV3JpQixFQUNoQi9HLEtBQUtzcEIsR0FBV3pZLEVBQ2hCN1EsS0FBS3FwQixHQUFXOVQsR0FHZG1ILElBQ0Z2TCxFQUFVckQsRUFoSkksYUFnSnVCLE1BQ3JDcUQsRUFBVXBELEVBbEpELFNBa0pvQixNQUM3Qm9ELEVBQVVwRCxFQWxKSSxhQWtKb0IsTUFDbENvRCxFQUFVcEQsRUFsSkksYUFrSm9CLE9BR3BDeEIsRUFBWXdCLEVBQW1CLFVBQUcsQ0FDaENtZCxRQUFTLFNBQWlCMVgsR0FDeEIsT0FBT3ZTLEVBQUlqQixLQUFNLEVBQUd3VCxHQUFZLElBQU0sSUFBTSxJQUU5QzZYLFNBQVUsU0FBa0I3WCxHQUMxQixPQUFPdlMsRUFBSWpCLEtBQU0sRUFBR3dULEdBQVksSUFFbEM4WCxTQUFVLFNBQWtCOVgsR0FDMUIsSUFBSTBXLEVBQVFqcEIsRUFBSWpCLEtBQU0sRUFBR3dULEVBQVl2TCxVQUFVLElBQy9DLE9BQVFpaUIsRUFBTSxJQUFNLEVBQUlBLEVBQU0sS0FBTyxJQUFNLElBRTdDcUIsVUFBVyxTQUFtQi9YLEdBQzVCLElBQUkwVyxFQUFRanBCLEVBQUlqQixLQUFNLEVBQUd3VCxFQUFZdkwsVUFBVSxJQUMvQyxPQUFPaWlCLEVBQU0sSUFBTSxFQUFJQSxFQUFNLElBRS9Cc0IsU0FBVSxTQUFrQmhZLEdBQzFCLE9BQU95VyxFQUFVaHBCLEVBQUlqQixLQUFNLEVBQUd3VCxFQUFZdkwsVUFBVSxNQUV0RHdqQixVQUFXLFNBQW1CalksR0FDNUIsT0FBT3lXLEVBQVVocEIsRUFBSWpCLEtBQU0sRUFBR3dULEVBQVl2TCxVQUFVLE9BQVMsR0FFL0R5akIsV0FBWSxTQUFvQmxZLEdBQzlCLE9BQU9zVyxFQUFjN29CLEVBQUlqQixLQUFNLEVBQUd3VCxFQUFZdkwsVUFBVSxJQUFLLEdBQUksSUFFbkUwakIsV0FBWSxTQUFvQm5ZLEdBQzlCLE9BQU9zVyxFQUFjN29CLEVBQUlqQixLQUFNLEVBQUd3VCxFQUFZdkwsVUFBVSxJQUFLLEdBQUksSUFFbkVnakIsUUFBUyxTQUFpQnpYLEVBQVluUyxHQUNwQ3FQLEVBQUkxUSxLQUFNLEVBQUd3VCxFQUFZMlcsRUFBUTlvQixJQUVuQzhwQixTQUFVLFNBQWtCM1gsRUFBWW5TLEdBQ3RDcVAsRUFBSTFRLEtBQU0sRUFBR3dULEVBQVkyVyxFQUFROW9CLElBRW5DdXFCLFNBQVUsU0FBa0JwWSxFQUFZblMsR0FDdENxUCxFQUFJMVEsS0FBTSxFQUFHd1QsRUFBWTRXLEVBQVMvb0IsRUFBTzRHLFVBQVUsS0FFckQ0akIsVUFBVyxTQUFtQnJZLEVBQVluUyxHQUN4Q3FQLEVBQUkxUSxLQUFNLEVBQUd3VCxFQUFZNFcsRUFBUy9vQixFQUFPNEcsVUFBVSxLQUVyRDZqQixTQUFVLFNBQWtCdFksRUFBWW5TLEdBQ3RDcVAsRUFBSTFRLEtBQU0sRUFBR3dULEVBQVk2VyxFQUFTaHBCLEVBQU80RyxVQUFVLEtBRXJEOGpCLFVBQVcsU0FBbUJ2WSxFQUFZblMsR0FDeENxUCxFQUFJMVEsS0FBTSxFQUFHd1QsRUFBWTZXLEVBQVNocEIsRUFBTzRHLFVBQVUsS0FFckQrakIsV0FBWSxTQUFvQnhZLEVBQVluUyxHQUMxQ3FQLEVBQUkxUSxLQUFNLEVBQUd3VCxFQUFZK1csRUFBU2xwQixFQUFPNEcsVUFBVSxLQUVyRGdrQixXQUFZLFNBQW9CelksRUFBWW5TLEdBQzFDcVAsRUFBSTFRLEtBQU0sRUFBR3dULEVBQVk4VyxFQUFTanBCLEVBQU80RyxVQUFVLE9Bc0N6RHlZLEVBQWU1UyxFQS9QSSxlQWdRbkI0UyxFQUFlM1MsRUEvUEMsWUFnUWhCekwsRUFBS3lMLEVBQW1CLFVBQUc1QixFQUFPaUUsTUFBTSxHQUN4Q3pRLEVBQW9CLFlBQUltTyxFQUN4Qm5PLEVBQWlCLFNBQUlvTyxHLDZCQ2pSckIsSUFBSW1lLEVBQVEsRUFBUSxJQUVwQixTQUFTblUsRUFBT2pTLEdBQ2QsT0FBT29TLG1CQUFtQnBTLEdBQ3hCeUMsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQVVyQjNJLEVBQU9ELFFBQVUsU0FBa0I0YSxFQUFLNFIsRUFBUUMsR0FFOUMsSUFBS0QsRUFDSCxPQUFPNVIsRUFHVCxJQUFJOFIsRUFDSixHQUFJRCxFQUNGQyxFQUFtQkQsRUFBaUJELFFBQy9CLEdBQUlELEVBQU0za0Isa0JBQWtCNGtCLEdBQ2pDRSxFQUFtQkYsRUFBT3ZtQixlQUNyQixDQUNMLElBQUkwbUIsRUFBUSxHQUVaSixFQUFNL2xCLFFBQVFnbUIsR0FBUSxTQUFtQnJtQixFQUFLbkUsR0FDeENtRSxVQUlBb21CLEVBQU1ybUIsUUFBUUMsR0FDaEJuRSxHQUFZLEtBRVptRSxFQUFNLENBQUNBLEdBR1RvbUIsRUFBTS9sQixRQUFRTCxHQUFLLFNBQW9Cb1AsR0FDakNnWCxFQUFNaGxCLE9BQU9nTyxHQUNmQSxFQUFJQSxFQUFFcVgsY0FDR0wsRUFBTWxvQixTQUFTa1IsS0FDeEJBLEVBQUlzWCxLQUFLMVMsVUFBVTVFLElBRXJCb1gsRUFBTXJnQixLQUFLOEwsRUFBT3BXLEdBQU8sSUFBTW9XLEVBQU83QyxXQUkxQ21YLEVBQW1CQyxFQUFNbmpCLEtBQUssS0FHaEMsR0FBSWtqQixFQUFrQixDQUNwQixJQUFJSSxFQUFnQmxTLEVBQUk1SCxRQUFRLE1BQ1QsSUFBbkI4WixJQUNGbFMsRUFBTUEsRUFBSXZTLE1BQU0sRUFBR3lrQixJQUdyQmxTLEtBQThCLElBQXRCQSxFQUFJNUgsUUFBUSxLQUFjLElBQU0sS0FBTzBaLEVBR2pELE9BQU85UixJLDZCQ2xFVCxJQUFJMlIsRUFBUSxFQUFRLElBQ2hCUSxFQUFzQixFQUFRLEtBQzlCQyxFQUFlLEVBQVEsS0FFdkJDLEVBQXVCLENBQ3pCLGVBQWdCLHFDQUdsQixTQUFTQyxFQUFzQkMsRUFBU3pyQixJQUNqQzZxQixFQUFNbm1CLFlBQVkrbUIsSUFBWVosRUFBTW5tQixZQUFZK21CLEVBQVEsbUJBQzNEQSxFQUFRLGdCQUFrQnpyQixHQStCOUIsSUExQk0wckIsRUEwQkZDLEVBQVcsQ0FFYkMsYUFBYyxDQUNaQyxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQkMscUJBQXFCLEdBR3ZCTCxTQWpDOEIsb0JBQW5CTSxlQUVUTixFQUFVLEVBQVEsS0FDVSxvQkFBWm5ILFNBQXVFLHFCQUE1QzlrQixPQUFPa0IsVUFBVTRELFNBQVNyRixLQUFLcWxCLFdBRTFFbUgsRUFBVSxFQUFRLE1BRWJBLEdBNEJQTyxpQkFBa0IsQ0FBQyxTQUEwQjNuQixFQUFNbW5CLEdBSWpELE9BSEFKLEVBQW9CSSxFQUFTLFVBQzdCSixFQUFvQkksRUFBUyxnQkFFekJaLEVBQU14bEIsV0FBV2YsSUFDbkJ1bUIsRUFBTTNsQixjQUFjWixJQUNwQnVtQixFQUFNMWxCLFNBQVNiLElBQ2Z1bUIsRUFBTTdrQixTQUFTMUIsSUFDZnVtQixFQUFNL2tCLE9BQU94QixJQUNidW1CLEVBQU05a0IsT0FBT3pCLEdBRU5BLEVBRUx1bUIsRUFBTXRsQixrQkFBa0JqQixHQUNuQkEsRUFBS29CLE9BRVZtbEIsRUFBTTNrQixrQkFBa0I1QixJQUMxQmtuQixFQUFzQkMsRUFBUyxtREFDeEJubkIsRUFBS0MsWUFFVnNtQixFQUFNbG9CLFNBQVMyQixJQUFVbW5CLEdBQXVDLHFCQUE1QkEsRUFBUSxpQkFDOUNELEVBQXNCQyxFQUFTLG9CQTlDckMsU0FBeUJTLEVBQVVDLEVBQVFDLEdBQ3pDLEdBQUl2QixFQUFNbGxCLFNBQVN1bUIsR0FDakIsSUFFRSxPQURDQyxHQUFVaEIsS0FBSzNULE9BQU8wVSxHQUNoQnJCLEVBQU03akIsS0FBS2tsQixHQUNsQixNQUFPaHBCLEdBQ1AsR0FBZSxnQkFBWEEsRUFBRTVELEtBQ0osTUFBTTRELEVBS1osT0FBUWtwQixHQUFXakIsS0FBSzFTLFdBQVd5VCxHQW1DeEJHLENBQWdCL25CLElBRWxCQSxJQUdUZ29CLGtCQUFtQixDQUFDLFNBQTJCaG9CLEdBQzdDLElBQUlzbkIsRUFBZWp0QixLQUFLaXRCLGFBQ3BCQyxFQUFvQkQsR0FBZ0JBLEVBQWFDLGtCQUNqREMsRUFBb0JGLEdBQWdCQSxFQUFhRSxrQkFDakRTLEdBQXFCVixHQUEyQyxTQUF0Qmx0QixLQUFLNnRCLGFBRW5ELEdBQUlELEdBQXNCVCxHQUFxQmpCLEVBQU1sbEIsU0FBU3JCLElBQVNBLEVBQUtXLE9BQzFFLElBQ0UsT0FBT2ttQixLQUFLM1QsTUFBTWxULEdBQ2xCLE1BQU9wQixHQUNQLEdBQUlxcEIsRUFBbUIsQ0FDckIsR0FBZSxnQkFBWHJwQixFQUFFNUQsS0FDSixNQUFNZ3NCLEVBQWFwb0IsRUFBR3ZFLEtBQU0sZ0JBRTlCLE1BQU11RSxHQUtaLE9BQU9vQixJQU9UbW9CLFFBQVMsRUFFVEMsZUFBZ0IsYUFDaEJDLGVBQWdCLGVBRWhCQyxrQkFBbUIsRUFDbkJDLGVBQWdCLEVBRWhCQyxlQUFnQixTQUF3QkMsR0FDdEMsT0FBT0EsR0FBVSxLQUFPQSxFQUFTLE1BSXJDcEIsRUFBU0YsUUFBVSxDQUNqQmpNLE9BQVEsQ0FDTixPQUFVLHNDQUlkcUwsRUFBTS9sQixRQUFRLENBQUMsU0FBVSxNQUFPLFNBQVMsU0FBNkI0RSxHQUNwRWlpQixFQUFTRixRQUFRL2hCLEdBQVUsTUFHN0JtaEIsRUFBTS9sQixRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0I0RSxHQUNyRWlpQixFQUFTRixRQUFRL2hCLEdBQVVtaEIsRUFBTXJrQixNQUFNK2tCLE1BR3pDaHRCLEVBQU9ELFFBQVVxdEIsRyw2QkN6SGpCcHRCLEVBQU9ELFFBQVUsU0FBc0I4RixFQUFPNG9CLEVBQVFDLEVBQU1DLEVBQVM3b0IsR0E0Qm5FLE9BM0JBRCxFQUFNNG9CLE9BQVNBLEVBQ1hDLElBQ0Y3b0IsRUFBTTZvQixLQUFPQSxHQUdmN29CLEVBQU04b0IsUUFBVUEsRUFDaEI5b0IsRUFBTUMsU0FBV0EsRUFDakJELEVBQU0rb0IsY0FBZSxFQUVyQi9vQixFQUFNZ3BCLE9BQVMsV0FDYixNQUFPLENBRUxDLFFBQVMxdUIsS0FBSzB1QixRQUNkL3RCLEtBQU1YLEtBQUtXLEtBRVhndUIsWUFBYTN1QixLQUFLMnVCLFlBQ2xCQyxPQUFRNXVCLEtBQUs0dUIsT0FFYkMsU0FBVTd1QixLQUFLNnVCLFNBQ2ZDLFdBQVk5dUIsS0FBSzh1QixXQUNqQkMsYUFBYy91QixLQUFLK3VCLGFBQ25CQyxNQUFPaHZCLEtBQUtndkIsTUFFWlgsT0FBUXJ1QixLQUFLcXVCLE9BQ2JDLEtBQU10dUIsS0FBS3N1QixPQUdSN29CLEksNkJDdENULElBQUlrbkIsRUFBZSxFQUFRLEtBWTNCL3NCLEVBQU9ELFFBQVUsU0FBcUIrdUIsRUFBU0wsRUFBUUMsRUFBTUMsRUFBUzdvQixHQUNwRSxJQUFJRCxFQUFRLElBQUlELE1BQU1rcEIsR0FDdEIsT0FBTy9CLEVBQWFsbkIsRUFBTzRvQixFQUFRQyxFQUFNQyxFQUFTN29CLEssZ0JDaEJwRDlGLEVBQU9ELFNBQVcsRUFBUSxLQUFzQixFQUFRLEVBQVIsRUFBb0IsV0FDbEUsT0FBNEcsR0FBckdtQixPQUFPQyxlQUFlLEVBQVEsR0FBUixDQUF5QixPQUFRLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUTRELE0sZ0JDRHpHbEYsRUFBUXVGLEVBQUksRUFBUSxJLGdCQ0FwQixJQUFJMEQsRUFBTSxFQUFRLElBQ2RxQixFQUFZLEVBQVEsSUFDcEJ1RSxFQUFlLEVBQVEsR0FBUixFQUE2QixHQUM1Q25FLEVBQVcsRUFBUSxHQUFSLENBQXlCLFlBRXhDekssRUFBT0QsUUFBVSxTQUFVbUMsRUFBUW10QixHQUNqQyxJQUdJdHRCLEVBSEF3RCxFQUFJOEUsRUFBVW5JLEdBQ2QxQixFQUFJLEVBQ0owSCxFQUFTLEdBRWIsSUFBS25HLEtBQU93RCxFQUFPeEQsR0FBTzBJLEdBQVV6QixFQUFJekQsRUFBR3hELElBQVFtRyxFQUFPbUUsS0FBS3RLLEdBRS9ELEtBQU9zdEIsRUFBTTNvQixPQUFTbEcsR0FBT3dJLEVBQUl6RCxFQUFHeEQsRUFBTXN0QixFQUFNN3VCLFNBQzdDb08sRUFBYTFHLEVBQVFuRyxJQUFRbUcsRUFBT21FLEtBQUt0SyxJQUU1QyxPQUFPbUcsSSxnQkNmVCxJQUFJN0MsRUFBSyxFQUFRLEdBQ2JILEVBQVcsRUFBUSxHQUNuQm9xQixFQUFVLEVBQVEsSUFFdEJ0dkIsRUFBT0QsUUFBVSxFQUFRLEdBQW9CbUIsT0FBT3F1QixpQkFBbUIsU0FBMEJocUIsRUFBR29YLEdBQ2xHelgsRUFBU0ssR0FLVCxJQUpBLElBR0k3QixFQUhBc0wsRUFBT3NnQixFQUFRM1MsR0FDZmpXLEVBQVNzSSxFQUFLdEksT0FDZGxHLEVBQUksRUFFRGtHLEVBQVNsRyxHQUFHNkUsRUFBR0MsRUFBRUMsRUFBRzdCLEVBQUlzTCxFQUFLeE8sS0FBTW1jLEVBQVdqWixJQUNyRCxPQUFPNkIsSSxnQkNWVCxJQUFJOEUsRUFBWSxFQUFRLElBQ3BCMkMsRUFBTyxFQUFRLElBQWtCMUgsRUFDakNVLEVBQVcsR0FBR0EsU0FFZHdwQixFQUErQixpQkFBVmpyQixRQUFzQkEsUUFBVXJELE9BQU8yYixvQkFDNUQzYixPQUFPMmIsb0JBQW9CdFksUUFBVSxHQVV6Q3ZFLEVBQU9ELFFBQVF1RixFQUFJLFNBQTZCakIsR0FDOUMsT0FBT21yQixHQUFvQyxtQkFBckJ4cEIsRUFBU3JGLEtBQUswRCxHQVRqQixTQUFVQSxHQUM3QixJQUNFLE9BQU8ySSxFQUFLM0ksR0FDWixNQUFPTSxHQUNQLE9BQU82cUIsRUFBWXBuQixTQUswQ3FuQixDQUFlcHJCLEdBQU0ySSxFQUFLM0MsRUFBVWhHLE0sNkJDZnJHLElBQUl5WSxFQUFjLEVBQVEsR0FDdEJ3UyxFQUFVLEVBQVEsSUFDbEJJLEVBQU8sRUFBUSxJQUNmdGxCLEVBQU0sRUFBUSxJQUNkSSxFQUFXLEVBQVEsR0FDbkJMLEVBQVUsRUFBUSxJQUNsQndsQixFQUFVenVCLE9BQU9pWSxPQUdyQm5aLEVBQU9ELFNBQVc0dkIsR0FBVyxFQUFRLEVBQVIsRUFBb0IsV0FDL0MsSUFBSXhOLEVBQUksR0FDSnZlLEVBQUksR0FFSkosRUFBSWpDLFNBQ0p5Z0IsRUFBSSx1QkFHUixPQUZBRyxFQUFFM2UsR0FBSyxFQUNQd2UsRUFBRTVZLE1BQU0sSUFBSTdDLFNBQVEsU0FBVXdULEdBQUtuVyxFQUFFbVcsR0FBS0EsS0FDZCxHQUFyQjRWLEVBQVEsR0FBSXhOLEdBQUczZSxJQUFXdEMsT0FBTzhOLEtBQUsyZ0IsRUFBUSxHQUFJL3JCLElBQUkyRixLQUFLLEtBQU95WSxLQUN0RSxTQUFnQm5lLEVBQVFkLEdBTTNCLElBTEEsSUFBSTJhLEVBQUlsVCxFQUFTM0csR0FDYmdPLEVBQU94SixVQUFVM0IsT0FDakIwRixFQUFRLEVBQ1J3akIsRUFBYUYsRUFBS3BxQixFQUNsQnVxQixFQUFTemxCLEVBQUk5RSxFQUNWdU0sRUFBT3pGLEdBTVosSUFMQSxJQUlJckssRUFKQXlCLEVBQUkyRyxFQUFROUIsVUFBVStELE1BQ3RCNEMsRUFBTzRnQixFQUFhTixFQUFROXJCLEdBQUd1UyxPQUFPNlosRUFBV3BzQixJQUFNOHJCLEVBQVE5ckIsR0FDL0RrRCxFQUFTc0ksRUFBS3RJLE9BQ2R5a0IsRUFBSSxFQUVEemtCLEVBQVN5a0IsR0FDZHBwQixFQUFNaU4sRUFBS21jLEtBQ05yTyxJQUFlK1MsRUFBT2x2QixLQUFLNkMsRUFBR3pCLEtBQU0yYixFQUFFM2IsR0FBT3lCLEVBQUV6QixJQUV0RCxPQUFPMmIsR0FDUGlTLEcsY0NwQ0ozdkIsRUFBT0QsUUFBVW1CLE9BQU9xaEIsSUFBTSxTQUFZOUgsRUFBR3FWLEdBRTNDLE9BQU9yVixJQUFNcVYsRUFBVSxJQUFOclYsR0FBVyxFQUFJQSxHQUFNLEVBQUlxVixFQUFJclYsR0FBS0EsR0FBS3FWLEdBQUtBLEksNkJDRi9ELElBQUlqbEIsRUFBWSxFQUFRLElBQ3BCekcsRUFBVyxFQUFRLEdBQ25CeWhCLEVBQVMsRUFBUSxLQUNqQmpXLEVBQWEsR0FBR3hILE1BQ2hCMm5CLEVBQVksR0FFWkMsRUFBWSxTQUFVNXNCLEVBQUc4USxFQUFLMFMsR0FDaEMsS0FBTTFTLEtBQU82YixHQUFZLENBQ3ZCLElBQUssSUFBSTl0QixFQUFJLEdBQUl6QixFQUFJLEVBQUdBLEVBQUkwVCxFQUFLMVQsSUFBS3lCLEVBQUV6QixHQUFLLEtBQU9BLEVBQUksSUFFeER1dkIsRUFBVTdiLEdBQU9sUSxTQUFTLE1BQU8sZ0JBQWtCL0IsRUFBRXNILEtBQUssS0FBTyxLQUNqRSxPQUFPd21CLEVBQVU3YixHQUFLOVEsRUFBR3dqQixJQUc3QjVtQixFQUFPRCxRQUFVaUUsU0FBU2hDLE1BQVEsU0FBYzhJLEdBQzlDLElBQUlyRSxFQUFLb0UsRUFBVXpLLE1BQ2Y2dkIsRUFBV3JnQixFQUFXalAsS0FBSzBILFVBQVcsR0FDdEM2bkIsRUFBUSxXQUNWLElBQUl0SixFQUFPcUosRUFBU2xhLE9BQU9uRyxFQUFXalAsS0FBSzBILFlBQzNDLE9BQU9qSSxnQkFBZ0I4dkIsRUFBUUYsRUFBVXZwQixFQUFJbWdCLEVBQUtsZ0IsT0FBUWtnQixHQUFRZixFQUFPcGYsRUFBSW1nQixFQUFNOWIsSUFHckYsT0FESTFHLEVBQVNxQyxFQUFHckUsYUFBWTh0QixFQUFNOXRCLFVBQVlxRSxFQUFHckUsV0FDMUM4dEIsSSxjQ3RCVGx3QixFQUFPRCxRQUFVLFNBQVUwRyxFQUFJbWdCLEVBQU05YixHQUNuQyxJQUFJcWxCLE9BQWNwc0IsSUFBVCtHLEVBQ1QsT0FBUThiLEVBQUtsZ0IsUUFDWCxLQUFLLEVBQUcsT0FBT3lwQixFQUFLMXBCLElBQ0FBLEVBQUc5RixLQUFLbUssR0FDNUIsS0FBSyxFQUFHLE9BQU9xbEIsRUFBSzFwQixFQUFHbWdCLEVBQUssSUFDUm5nQixFQUFHOUYsS0FBS21LLEVBQU04YixFQUFLLElBQ3ZDLEtBQUssRUFBRyxPQUFPdUosRUFBSzFwQixFQUFHbWdCLEVBQUssR0FBSUEsRUFBSyxJQUNqQm5nQixFQUFHOUYsS0FBS21LLEVBQU04YixFQUFLLEdBQUlBLEVBQUssSUFDaEQsS0FBSyxFQUFHLE9BQU91SixFQUFLMXBCLEVBQUdtZ0IsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDMUJuZ0IsRUFBRzlGLEtBQUttSyxFQUFNOGIsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDekQsS0FBSyxFQUFHLE9BQU91SixFQUFLMXBCLEVBQUdtZ0IsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUNuQ25nQixFQUFHOUYsS0FBS21LLEVBQU04YixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ2xFLE9BQU9uZ0IsRUFBR3NFLE1BQU1ELEVBQU04YixLLGdCQ2QxQixJQUFJd0osRUFBWSxFQUFRLEdBQWFDLFNBQ2pDQyxFQUFRLEVBQVEsSUFBa0I3bkIsS0FDbEM4bkIsRUFBSyxFQUFRLElBQ2JDLEVBQU0sY0FFVnh3QixFQUFPRCxRQUFtQyxJQUF6QnF3QixFQUFVRyxFQUFLLE9BQTBDLEtBQTNCSCxFQUFVRyxFQUFLLFFBQWlCLFNBQWtCN25CLEVBQUsrbkIsR0FDcEcsSUFBSTdtQixFQUFTMG1CLEVBQU05bUIsT0FBT2QsR0FBTSxHQUNoQyxPQUFPMG5CLEVBQVV4bUIsRUFBUzZtQixJQUFVLElBQU9ELEVBQUl2bUIsS0FBS0wsR0FBVSxHQUFLLE1BQ2pFd21CLEcsZ0JDUkosSUFBSU0sRUFBYyxFQUFRLEdBQWFDLFdBQ25DTCxFQUFRLEVBQVEsSUFBa0I3bkIsS0FFdEN6SSxFQUFPRCxRQUFVLEVBQUkyd0IsRUFBWSxFQUFRLElBQWtCLFFBQVd6TixJQUFXLFNBQW9CdmEsR0FDbkcsSUFBSWtCLEVBQVMwbUIsRUFBTTltQixPQUFPZCxHQUFNLEdBQzVCUixFQUFTd29CLEVBQVk5bUIsR0FDekIsT0FBa0IsSUFBWDFCLEdBQW9DLEtBQXBCMEIsRUFBT3NWLE9BQU8sSUFBYSxFQUFJaFgsR0FDcER3b0IsRyxnQkNQSixJQUFJbFQsRUFBTSxFQUFRLElBQ2xCeGQsRUFBT0QsUUFBVSxTQUFVc0UsRUFBSXVzQixHQUM3QixHQUFpQixpQkFBTnZzQixHQUE2QixVQUFYbVosRUFBSW5aLEdBQWlCLE1BQU1DLFVBQVVzc0IsR0FDbEUsT0FBUXZzQixJLGdCQ0ZWLElBQUlELEVBQVcsRUFBUSxHQUNuQjZHLEVBQVF6RyxLQUFLeUcsTUFDakJqTCxFQUFPRCxRQUFVLFNBQW1Cc0UsR0FDbEMsT0FBUUQsRUFBU0MsSUFBT3dzQixTQUFTeHNCLElBQU80RyxFQUFNNUcsS0FBUUEsSSxjQ0h4RHJFLEVBQU9ELFFBQVV5RSxLQUFLc3NCLE9BQVMsU0FBZXJXLEdBQzVDLE9BQVFBLEdBQUtBLElBQU0sTUFBUUEsRUFBSSxLQUFPQSxFQUFJQSxFQUFJQSxFQUFJLEVBQUlqVyxLQUFLOGtCLElBQUksRUFBSTdPLEssZ0JDRHJFLElBQUl5SSxFQUFPLEVBQVEsSUFDZm1HLEVBQU03a0IsS0FBSzZrQixJQUNYMEgsRUFBVTFILEVBQUksR0FBSSxJQUNsQjJILEVBQVkzSCxFQUFJLEdBQUksSUFDcEI0SCxFQUFRNUgsRUFBSSxFQUFHLE1BQVEsRUFBSTJILEdBQzNCRSxFQUFRN0gsRUFBSSxHQUFJLEtBTXBCcnBCLEVBQU9ELFFBQVV5RSxLQUFLMnNCLFFBQVUsU0FBZ0IxVyxHQUM5QyxJQUVJeFYsRUFBR2lELEVBRkhrcEIsRUFBTzVzQixLQUFLNGtCLElBQUkzTyxHQUNoQjRXLEVBQVFuTyxFQUFLekksR0FFakIsT0FBSTJXLEVBQU9GLEVBQWNHLEdBQXdCRCxFQUFPRixFQUFRRixFQVByRCxFQUFJRCxFQUFVLEVBQUlBLEdBT2dERyxFQUFRRixHQUVyRjlvQixHQURBakQsR0FBSyxFQUFJK3JCLEVBQVlELEdBQVdLLElBQ2xCbnNCLEVBQUltc0IsSUFFTEgsR0FBUy9vQixHQUFVQSxFQUFlbXBCLEdBQVFwTyxLQUNoRG9PLEVBQVFucEIsSSxnQkNwQmpCLElBQUloRCxFQUFXLEVBQVEsR0FDdkJsRixFQUFPRCxRQUFVLFNBQVU2UixFQUFVbkwsRUFBSWhGLEVBQU95TixHQUM5QyxJQUNFLE9BQU9BLEVBQVV6SSxFQUFHdkIsRUFBU3pELEdBQU8sR0FBSUEsRUFBTSxJQUFNZ0YsRUFBR2hGLEdBRXZELE1BQU9rRCxHQUNQLElBQUlrVixFQUFNakksRUFBaUIsT0FFM0IsV0FEWTdOLElBQVI4VixHQUFtQjNVLEVBQVMyVSxFQUFJbFosS0FBS2lSLElBQ25Dak4sSyxnQkNUVixJQUFJa0csRUFBWSxFQUFRLElBQ3BCTCxFQUFXLEVBQVEsR0FDbkJMLEVBQVUsRUFBUSxJQUNsQm9CLEVBQVcsRUFBUSxHQUV2QnZMLEVBQU9ELFFBQVUsU0FBVStLLEVBQU1vQixFQUFZMkYsRUFBTXlmLEVBQU1DLEdBQ3ZEMW1CLEVBQVVxQixHQUNWLElBQUkzRyxFQUFJaUYsRUFBU00sR0FDYjNLLEVBQU9nSyxFQUFRNUUsR0FDZm1CLEVBQVM2RSxFQUFTaEcsRUFBRW1CLFFBQ3BCMEYsRUFBUW1sQixFQUFVN3FCLEVBQVMsRUFBSSxFQUMvQmxHLEVBQUkrd0IsR0FBVyxFQUFJLEVBQ3ZCLEdBQUkxZixFQUFPLEVBQUcsT0FBUyxDQUNyQixHQUFJekYsS0FBU2pNLEVBQU0sQ0FDakJteEIsRUFBT254QixFQUFLaU0sR0FDWkEsR0FBUzVMLEVBQ1QsTUFHRixHQURBNEwsR0FBUzVMLEVBQ0wrd0IsRUFBVW5sQixFQUFRLEVBQUkxRixHQUFVMEYsRUFDbEMsTUFBTTlILFVBQVUsK0NBR3BCLEtBQU1pdEIsRUFBVW5sQixHQUFTLEVBQUkxRixFQUFTMEYsRUFBT0EsR0FBUzVMLEVBQU80TCxLQUFTak0sSUFDcEVteEIsRUFBT3BsQixFQUFXb2xCLEVBQU1ueEIsRUFBS2lNLEdBQVFBLEVBQU83RyxJQUU5QyxPQUFPK3JCLEksNkJDeEJULElBQUk5bUIsRUFBVyxFQUFRLEdBQ25CcUMsRUFBa0IsRUFBUSxJQUMxQnRCLEVBQVcsRUFBUSxHQUV2QnZMLEVBQU9ELFFBQVUsR0FBR3dTLFlBQWMsU0FBb0IxTyxFQUFrQjJPLEdBQ3RFLElBQUlqTixFQUFJaUYsRUFBU3BLLE1BQ2I4VCxFQUFNM0ksRUFBU2hHLEVBQUVtQixRQUNqQjhxQixFQUFLM2tCLEVBQWdCaEosRUFBUXFRLEdBQzdCa0MsRUFBT3ZKLEVBQWdCMkYsRUFBTzBCLEdBQzlCUixFQUFNckwsVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLEVBQzVDaWYsRUFBUXhlLEtBQUtRLFVBQWFqQixJQUFSMlAsRUFBb0JRLEVBQU1ySCxFQUFnQjZHLEVBQUtRLElBQVFrQyxFQUFNbEMsRUFBTXNkLEdBQ3JGQyxFQUFNLEVBTVYsSUFMSXJiLEVBQU9vYixHQUFNQSxFQUFLcGIsRUFBTzRNLElBQzNCeU8sR0FBTyxFQUNQcmIsR0FBUTRNLEVBQVEsRUFDaEJ3TyxHQUFNeE8sRUFBUSxHQUVUQSxLQUFVLEdBQ1g1TSxLQUFRN1EsRUFBR0EsRUFBRWlzQixHQUFNanNCLEVBQUU2USxVQUNiN1EsRUFBRWlzQixHQUNkQSxHQUFNQyxFQUNOcmIsR0FBUXFiLEVBQ1IsT0FBT2xzQixJLGNDeEJYdkYsRUFBT0QsUUFBVSxTQUFVbVMsRUFBTXpRLEdBQy9CLE1BQU8sQ0FBRUEsTUFBT0EsRUFBT3lRLE9BQVFBLEssNkJDQWpDLElBQUl3TixFQUFhLEVBQVEsSUFDekIsRUFBUSxFQUFSLENBQXFCLENBQ25CN2IsT0FBUSxTQUNSeU8sT0FBTyxFQUNQb2YsT0FBUWhTLElBQWUsSUFBSWhiLE1BQzFCLENBQ0RBLEtBQU1nYixLLGdCQ05KLEVBQVEsSUFBbUMsS0FBZCxLQUFLaVMsT0FBYyxFQUFRLEdBQWdCcnNCLEVBQUUwWSxPQUFPNWIsVUFBVyxRQUFTLENBQ3ZHb1MsY0FBYyxFQUNkblQsSUFBSyxFQUFRLE8sY0NIZnJCLEVBQU9ELFFBQVUsU0FBVTJFLEdBQ3pCLElBQ0UsTUFBTyxDQUFFQyxHQUFHLEVBQU8yUSxFQUFHNVEsS0FDdEIsTUFBT0MsR0FDUCxNQUFPLENBQUVBLEdBQUcsRUFBTTJRLEVBQUczUSxNLGdCQ0p6QixJQUFJTyxFQUFXLEVBQVEsR0FDbkJkLEVBQVcsRUFBUSxHQUNuQnd0QixFQUF1QixFQUFRLElBRW5DNXhCLEVBQU9ELFFBQVUsU0FBVW9SLEVBQUdzSixHQUU1QixHQURBdlYsRUFBU2lNLEdBQ0wvTSxFQUFTcVcsSUFBTUEsRUFBRTVULGNBQWdCc0ssRUFBRyxPQUFPc0osRUFDL0MsSUFBSW9YLEVBQW9CRCxFQUFxQnRzQixFQUFFNkwsR0FHL0MsT0FEQW1YLEVBRGN1SixFQUFrQnZKLFNBQ3hCN04sR0FDRG9YLEVBQWtCdEosVSw2QkNUM0IsSUFBSXVKLEVBQVMsRUFBUSxLQUNqQjVnQixFQUFXLEVBQVEsSUFJdkJsUixFQUFPRCxRQUFVLEVBQVEsR0FBUixDQUhQLE9BR3FDLFNBQVVzQixHQUN2RCxPQUFPLFdBQWlCLE9BQU9BLEVBQUlqQixLQUFNaUksVUFBVTNCLE9BQVMsRUFBSTJCLFVBQVUsUUFBS3RFLE1BQzlFLENBRUQxQyxJQUFLLFNBQWFVLEdBQ2hCLElBQUlnd0IsRUFBUUQsRUFBT0UsU0FBUzlnQixFQUFTOVEsS0FSL0IsT0FRMkMyQixHQUNqRCxPQUFPZ3dCLEdBQVNBLEVBQU16YyxHQUd4QnhFLElBQUssU0FBYS9PLEVBQUtOLEdBQ3JCLE9BQU9xd0IsRUFBT3hVLElBQUlwTSxFQUFTOVEsS0FickIsT0FheUMsSUFBUjJCLEVBQVksRUFBSUEsRUFBS04sS0FFN0Rxd0IsR0FBUSxJLDZCQ2pCWCxJQUFJenNCLEVBQUssRUFBUSxHQUFnQkMsRUFDN0J4RCxFQUFTLEVBQVEsSUFDakI2SyxFQUFjLEVBQVEsSUFDdEIvSixFQUFNLEVBQVEsSUFDZDZKLEVBQWEsRUFBUSxJQUNyQm9VLEVBQVEsRUFBUSxJQUNoQm9SLEVBQWMsRUFBUSxJQUN0QnRnQixFQUFPLEVBQVEsS0FDZmxFLEVBQWEsRUFBUSxJQUNyQnFQLEVBQWMsRUFBUSxHQUN0QnJGLEVBQVUsRUFBUSxJQUFXQSxRQUM3QnZHLEVBQVcsRUFBUSxJQUNuQmdoQixFQUFPcFYsRUFBYyxLQUFPLE9BRTVCa1YsRUFBVyxTQUFVbG5CLEVBQU0vSSxHQUU3QixJQUNJZ3dCLEVBREEzbEIsRUFBUXFMLEVBQVExVixHQUVwQixHQUFjLE1BQVZxSyxFQUFlLE9BQU90QixFQUFLNlosR0FBR3ZZLEdBRWxDLElBQUsybEIsRUFBUWpuQixFQUFLcW5CLEdBQUlKLEVBQU9BLEVBQVFBLEVBQU05dkIsRUFDekMsR0FBSTh2QixFQUFNaFksR0FBS2hZLEVBQUssT0FBT2d3QixHQUkvQi94QixFQUFPRCxRQUFVLENBQ2Y2aEIsZUFBZ0IsU0FBVWpOLEVBQVMzSyxFQUFNMkIsRUFBUXdWLEdBQy9DLElBQUloUSxFQUFJd0QsR0FBUSxTQUFVN0osRUFBTXNTLEdBQzlCM1EsRUFBVzNCLEVBQU1xRyxFQUFHbkgsRUFBTSxNQUMxQmMsRUFBS3VTLEdBQUtyVCxFQUNWYyxFQUFLNlosR0FBSzdpQixFQUFPLE1BQ2pCZ0osRUFBS3FuQixRQUFLcHVCLEVBQ1YrRyxFQUFLc25CLFFBQUtydUIsRUFDVitHLEVBQUtvbkIsR0FBUSxFQUNHbnVCLE1BQVpxWixHQUF1QnlELEVBQU16RCxFQUFVelIsRUFBUWIsRUFBS3FXLEdBQVFyVyxNQXNEbEUsT0FwREE2QixFQUFZd0UsRUFBRS9PLFVBQVcsQ0FHdkJ1ZixNQUFPLFdBQ0wsSUFBSyxJQUFJN1csRUFBT29HLEVBQVM5USxLQUFNNEosR0FBT2pFLEVBQU8rRSxFQUFLNlosR0FBSW9OLEVBQVFqbkIsRUFBS3FuQixHQUFJSixFQUFPQSxFQUFRQSxFQUFNOXZCLEVBQzFGOHZCLEVBQU16d0IsR0FBSSxFQUNOeXdCLEVBQU16dkIsSUFBR3l2QixFQUFNenZCLEVBQUl5dkIsRUFBTXp2QixFQUFFTCxPQUFJOEIsVUFDNUJnQyxFQUFLZ3NCLEVBQU12eEIsR0FFcEJzSyxFQUFLcW5CLEdBQUtybkIsRUFBS3NuQixRQUFLcnVCLEVBQ3BCK0csRUFBS29uQixHQUFRLEdBSWYsT0FBVSxTQUFVbndCLEdBQ2xCLElBQUkrSSxFQUFPb0csRUFBUzlRLEtBQU00SixHQUN0QituQixFQUFRQyxFQUFTbG5CLEVBQU0vSSxHQUMzQixHQUFJZ3dCLEVBQU8sQ0FDVCxJQUFJOWYsRUFBTzhmLEVBQU05dkIsRUFDYm93QixFQUFPTixFQUFNenZCLFNBQ1Z3SSxFQUFLNlosR0FBR29OLEVBQU12eEIsR0FDckJ1eEIsRUFBTXp3QixHQUFJLEVBQ04rd0IsSUFBTUEsRUFBS3B3QixFQUFJZ1EsR0FDZkEsSUFBTUEsRUFBSzNQLEVBQUkrdkIsR0FDZnZuQixFQUFLcW5CLElBQU1KLElBQU9qbkIsRUFBS3FuQixHQUFLbGdCLEdBQzVCbkgsRUFBS3NuQixJQUFNTCxJQUFPam5CLEVBQUtzbkIsR0FBS0MsR0FDaEN2bkIsRUFBS29uQixLQUNMLFFBQVNILEdBSWJ4ckIsUUFBUyxTQUFpQjJGLEdBQ3hCZ0YsRUFBUzlRLEtBQU00SixHQUdmLElBRkEsSUFDSStuQixFQURBenNCLEVBQUkxQyxFQUFJc0osRUFBWTdELFVBQVUzQixPQUFTLEVBQUkyQixVQUFVLFFBQUt0RSxFQUFXLEdBRWxFZ3VCLEVBQVFBLEVBQVFBLEVBQU05dkIsRUFBSTdCLEtBQUsreEIsSUFHcEMsSUFGQTdzQixFQUFFeXNCLEVBQU16YyxFQUFHeWMsRUFBTWhZLEVBQUczWixNQUViMnhCLEdBQVNBLEVBQU16d0IsR0FBR3l3QixFQUFRQSxFQUFNenZCLEdBSzNDMEcsSUFBSyxTQUFhakgsR0FDaEIsUUFBU2l3QixFQUFTOWdCLEVBQVM5USxLQUFNNEosR0FBT2pJLE1BR3hDK2EsR0FBYXpYLEVBQUc4TCxFQUFFL08sVUFBVyxPQUFRLENBQ3ZDZixJQUFLLFdBQ0gsT0FBTzZQLEVBQVM5USxLQUFNNEosR0FBTWtvQixNQUd6Qi9nQixHQUVUbU0sSUFBSyxTQUFVeFMsRUFBTS9JLEVBQUtOLEdBQ3hCLElBQ0k0d0IsRUFBTWptQixFQUROMmxCLEVBQVFDLEVBQVNsbkIsRUFBTS9JLEdBb0J6QixPQWpCRWd3QixFQUNGQSxFQUFNemMsRUFBSTdULEdBR1ZxSixFQUFLc25CLEdBQUtMLEVBQVEsQ0FDaEJ2eEIsRUFBRzRMLEVBQVFxTCxFQUFRMVYsR0FBSyxHQUN4QmdZLEVBQUdoWSxFQUNIdVQsRUFBRzdULEVBQ0hhLEVBQUcrdkIsRUFBT3ZuQixFQUFLc25CLEdBQ2Zud0IsT0FBRzhCLEVBQ0h6QyxHQUFHLEdBRUF3SixFQUFLcW5CLEtBQUlybkIsRUFBS3FuQixHQUFLSixHQUNwQk0sSUFBTUEsRUFBS3B3QixFQUFJOHZCLEdBQ25Cam5CLEVBQUtvbkIsS0FFUyxNQUFWOWxCLElBQWV0QixFQUFLNlosR0FBR3ZZLEdBQVMybEIsSUFDN0JqbkIsR0FFWGtuQixTQUFVQSxFQUNWblEsVUFBVyxTQUFVMVEsRUFBR25ILEVBQU0yQixHQUc1QnNtQixFQUFZOWdCLEVBQUduSCxHQUFNLFNBQVUwYSxFQUFVZCxHQUN2Q3hqQixLQUFLaWQsR0FBS25NLEVBQVN3VCxFQUFVMWEsR0FDN0I1SixLQUFLd2tCLEdBQUtoQixFQUNWeGpCLEtBQUtneUIsUUFBS3J1QixLQUNULFdBS0QsSUFKQSxJQUNJNmYsRUFET3hqQixLQUNLd2tCLEdBQ1ptTixFQUZPM3hCLEtBRU1neUIsR0FFVkwsR0FBU0EsRUFBTXp3QixHQUFHeXdCLEVBQVFBLEVBQU16dkIsRUFFdkMsT0FOV2xDLEtBTURpZCxLQU5DamQsS0FNWWd5QixHQUFLTCxFQUFRQSxFQUFRQSxFQUFNOXZCLEVBTnZDN0IsS0FNZ0RpZCxHQUFHOFUsSUFNbkN4Z0IsRUFBSyxFQUFwQixRQUFSaVMsRUFBK0JtTyxFQUFNaFksRUFDN0IsVUFBUjZKLEVBQWlDbU8sRUFBTXpjLEVBQzVCLENBQUN5YyxFQUFNaFksRUFBR2dZLEVBQU16YyxLQWRwQmxWLEtBUUppZCxRQUFLdFosRUFDSDROLEVBQUssTUFNYmhHLEVBQVMsVUFBWSxVQUFXQSxHQUFRLEdBRzNDOEIsRUFBV3pELE0sNkJDNUlmLElBQUk4bkIsRUFBUyxFQUFRLEtBQ2pCNWdCLEVBQVcsRUFBUSxJQUl2QmxSLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBSFAsT0FHcUMsU0FBVXNCLEdBQ3ZELE9BQU8sV0FBaUIsT0FBT0EsRUFBSWpCLEtBQU1pSSxVQUFVM0IsT0FBUyxFQUFJMkIsVUFBVSxRQUFLdEUsTUFDOUUsQ0FFRHV1QixJQUFLLFNBQWE3d0IsR0FDaEIsT0FBT3F3QixFQUFPeFUsSUFBSXBNLEVBQVM5USxLQVJyQixPQVFpQ3FCLEVBQWtCLElBQVZBLEVBQWMsRUFBSUEsRUFBT0EsS0FFekVxd0IsSSw2QkNaSCxJQWNJUyxFQWRBL3ZCLEVBQVMsRUFBUSxHQUNqQmd3QixFQUFPLEVBQVEsR0FBUixDQUE0QixHQUNuQzd2QixFQUFXLEVBQVEsSUFDbkI0VSxFQUFPLEVBQVEsSUFDZjRCLEVBQVMsRUFBUSxLQUNqQnNaLEVBQU8sRUFBUSxLQUNmcnVCLEVBQVcsRUFBUSxHQUNuQjhNLEVBQVcsRUFBUSxJQUNuQndoQixFQUFrQixFQUFRLElBQzFCQyxHQUFXbndCLEVBQU9vd0IsZUFBaUIsa0JBQW1CcHdCLEVBRXREa1YsRUFBVUgsRUFBS0csUUFDZlIsRUFBZWhXLE9BQU9nVyxhQUN0QjJiLEVBQXNCSixFQUFLSyxRQUczQm5lLEVBQVUsU0FBVXRULEdBQ3RCLE9BQU8sV0FDTCxPQUFPQSxFQUFJakIsS0FBTWlJLFVBQVUzQixPQUFTLEVBQUkyQixVQUFVLFFBQUt0RSxLQUl2RGlkLEVBQVUsQ0FFWjNmLElBQUssU0FBYVUsR0FDaEIsR0FBSXFDLEVBQVNyQyxHQUFNLENBQ2pCLElBQUlnRSxFQUFPMlIsRUFBUTNWLEdBQ25CLE9BQWEsSUFBVGdFLEVBQXNCOHNCLEVBQW9CM2hCLEVBQVM5USxLQWpCOUMsWUFpQitEaUIsSUFBSVUsR0FDckVnRSxFQUFPQSxFQUFLM0YsS0FBS3VrQixTQUFNNWdCLElBSWxDK00sSUFBSyxTQUFhL08sRUFBS04sR0FDckIsT0FBT2d4QixFQUFLblYsSUFBSXBNLEVBQVM5USxLQXZCZCxXQXVCK0IyQixFQUFLTixLQUsvQ3N4QixFQUFXL3lCLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBNUJqQixVQTRCb0Q0VSxFQUFTcU0sRUFBU3lSLEdBQU0sR0FBTSxHQUc3RkMsR0FBbUJDLElBRXJCeFosR0FEQW9aLEVBQWNFLEVBQUs3USxlQUFlak4sRUFoQ3JCLFlBaUNNdlMsVUFBVzRlLEdBQzlCekosRUFBS0MsTUFBTyxFQUNaZ2IsRUFBSyxDQUFDLFNBQVUsTUFBTyxNQUFPLFFBQVEsU0FBVXp3QixHQUM5QyxJQUFJdVEsRUFBUXlnQixFQUFTM3dCLFVBQ2pCK0ksRUFBU21ILEVBQU12USxHQUNuQlksRUFBUzJQLEVBQU92USxHQUFLLFNBQVVrRCxFQUFHc0QsR0FFaEMsR0FBSW5FLEVBQVNhLEtBQU9pUyxFQUFhalMsR0FBSSxDQUM5QjdFLEtBQUsreEIsS0FBSS94QixLQUFLK3hCLEdBQUssSUFBSUksR0FDNUIsSUFBSXJxQixFQUFTOUgsS0FBSyt4QixHQUFHcHdCLEdBQUtrRCxFQUFHc0QsR0FDN0IsTUFBYyxPQUFQeEcsRUFBZTNCLEtBQU84SCxFQUU3QixPQUFPaUQsRUFBT3hLLEtBQUtQLEtBQU02RSxFQUFHc0QsVyw2QkN2RHBDLElBQUlvRSxFQUFjLEVBQVEsSUFDdEIrSyxFQUFVLEVBQVEsSUFBV0EsUUFDN0J4UyxFQUFXLEVBQVEsR0FDbkJkLEVBQVcsRUFBUSxHQUNuQnFJLEVBQWEsRUFBUSxJQUNyQm9VLEVBQVEsRUFBUSxJQUNoQjFULEVBQW9CLEVBQVEsSUFDNUI2bEIsRUFBTyxFQUFRLElBQ2Y5aEIsRUFBVyxFQUFRLElBQ25CekMsRUFBWXRCLEVBQWtCLEdBQzlCdUIsRUFBaUJ2QixFQUFrQixHQUNuQzhKLEVBQUssRUFHTDRiLEVBQXNCLFNBQVUvbkIsR0FDbEMsT0FBT0EsRUFBS3NuQixLQUFPdG5CLEVBQUtzbkIsR0FBSyxJQUFJYSxJQUUvQkEsRUFBc0IsV0FDeEI3eUIsS0FBSzZFLEVBQUksSUFFUGl1QixFQUFxQixTQUFVdHVCLEVBQU83QyxHQUN4QyxPQUFPME0sRUFBVTdKLEVBQU1LLEdBQUcsU0FBVVosR0FDbEMsT0FBT0EsRUFBRyxLQUFPdEMsTUFHckJreEIsRUFBb0I3d0IsVUFBWSxDQUM5QmYsSUFBSyxTQUFVVSxHQUNiLElBQUlnd0IsRUFBUW1CLEVBQW1COXlCLEtBQU0yQixHQUNyQyxHQUFJZ3dCLEVBQU8sT0FBT0EsRUFBTSxJQUUxQi9vQixJQUFLLFNBQVVqSCxHQUNiLFFBQVNteEIsRUFBbUI5eUIsS0FBTTJCLElBRXBDK08sSUFBSyxTQUFVL08sRUFBS04sR0FDbEIsSUFBSXN3QixFQUFRbUIsRUFBbUI5eUIsS0FBTTJCLEdBQ2pDZ3dCLEVBQU9BLEVBQU0sR0FBS3R3QixFQUNqQnJCLEtBQUs2RSxFQUFFb0gsS0FBSyxDQUFDdEssRUFBS04sS0FFekIsT0FBVSxTQUFVTSxHQUNsQixJQUFJcUssRUFBUXNDLEVBQWV0TyxLQUFLNkUsR0FBRyxTQUFVWixHQUMzQyxPQUFPQSxFQUFHLEtBQU90QyxLQUduQixPQURLcUssR0FBT2hNLEtBQUs2RSxFQUFFa3VCLE9BQU8vbUIsRUFBTyxNQUN2QkEsSUFJZHBNLEVBQU9ELFFBQVUsQ0FDZjZoQixlQUFnQixTQUFVak4sRUFBUzNLLEVBQU0yQixFQUFRd1YsR0FDL0MsSUFBSWhRLEVBQUl3RCxHQUFRLFNBQVU3SixFQUFNc1MsR0FDOUIzUSxFQUFXM0IsRUFBTXFHLEVBQUduSCxFQUFNLE1BQzFCYyxFQUFLdVMsR0FBS3JULEVBQ1ZjLEVBQUs2WixHQUFLMU4sSUFDVm5NLEVBQUtzbkIsUUFBS3J1QixFQUNNQSxNQUFacVosR0FBdUJ5RCxFQUFNekQsRUFBVXpSLEVBQVFiLEVBQUtxVyxHQUFRclcsTUFvQmxFLE9BbEJBNkIsRUFBWXdFLEVBQUUvTyxVQUFXLENBR3ZCLE9BQVUsU0FBVUwsR0FDbEIsSUFBS3FDLEVBQVNyQyxHQUFNLE9BQU8sRUFDM0IsSUFBSWdFLEVBQU8yUixFQUFRM1YsR0FDbkIsT0FBYSxJQUFUZ0UsRUFBc0I4c0IsRUFBb0IzaEIsRUFBUzlRLEtBQU00SixJQUFlLE9BQUVqSSxHQUN2RWdFLEdBQVFpdEIsRUFBS2p0QixFQUFNM0YsS0FBS3VrQixZQUFjNWUsRUFBSzNGLEtBQUt1a0IsS0FJekQzYixJQUFLLFNBQWFqSCxHQUNoQixJQUFLcUMsRUFBU3JDLEdBQU0sT0FBTyxFQUMzQixJQUFJZ0UsRUFBTzJSLEVBQVEzVixHQUNuQixPQUFhLElBQVRnRSxFQUFzQjhzQixFQUFvQjNoQixFQUFTOVEsS0FBTTRKLElBQU9oQixJQUFJakgsR0FDakVnRSxHQUFRaXRCLEVBQUtqdEIsRUFBTTNGLEtBQUt1a0IsT0FHNUJ4VCxHQUVUbU0sSUFBSyxTQUFVeFMsRUFBTS9JLEVBQUtOLEdBQ3hCLElBQUlzRSxFQUFPMlIsRUFBUXhTLEVBQVNuRCxJQUFNLEdBR2xDLE9BRmEsSUFBVGdFLEVBQWU4c0IsRUFBb0IvbkIsR0FBTWdHLElBQUkvTyxFQUFLTixHQUNqRHNFLEVBQUsrRSxFQUFLNlosSUFBTWxqQixFQUNkcUosR0FFVGdvQixRQUFTRCxJLGdCQ2xGWCxJQUFJOXRCLEVBQVksRUFBUSxJQUNwQndHLEVBQVcsRUFBUSxHQUN2QnZMLEVBQU9ELFFBQVUsU0FBVXNFLEdBQ3pCLFFBQVdOLElBQVBNLEVBQWtCLE9BQU8sRUFDN0IsSUFBSTJxQixFQUFTanFCLEVBQVVWLEdBQ25CcUMsRUFBUzZFLEVBQVN5akIsR0FDdEIsR0FBSUEsSUFBV3RvQixFQUFRLE1BQU1vSCxXQUFXLGlCQUN4QyxPQUFPcEgsSSxnQkNQVCxJQUFJc0csRUFBTyxFQUFRLElBQ2YwaUIsRUFBTyxFQUFRLElBQ2Z4cUIsRUFBVyxFQUFRLEdBQ25Ca3VCLEVBQVUsRUFBUSxHQUFhQSxRQUNuQ3B6QixFQUFPRCxRQUFVcXpCLEdBQVdBLEVBQVFDLFNBQVcsU0FBaUJodkIsR0FDOUQsSUFBSTJLLEVBQU9oQyxFQUFLMUgsRUFBRUosRUFBU2IsSUFDdkJ1ckIsRUFBYUYsRUFBS3BxQixFQUN0QixPQUFPc3FCLEVBQWE1Z0IsRUFBSytHLE9BQU82WixFQUFXdnJCLElBQU8ySyxJLDZCQ05wRCxJQUFJL0ksRUFBVSxFQUFRLElBQ2xCN0IsRUFBVyxFQUFRLEdBQ25CbUgsRUFBVyxFQUFRLEdBQ25CM0ksRUFBTSxFQUFRLElBQ2Qwd0IsRUFBdUIsRUFBUSxFQUFSLENBQWtCLHNCQWdDN0N0ekIsRUFBT0QsUUE5QlAsU0FBU3d6QixFQUFpQjF2QixFQUFRMGdCLEVBQVV4aEIsRUFBUXl3QixFQUFXaGhCLEVBQU9paEIsRUFBT0MsRUFBUWxyQixHQU1uRixJQUxBLElBR0ltckIsRUFBU0MsRUFIVEMsRUFBY3JoQixFQUNkc2hCLEVBQWMsRUFDZHpSLElBQVFxUixHQUFTOXdCLEVBQUk4d0IsRUFBUWxyQixFQUFTLEdBR25Dc3JCLEVBQWNOLEdBQVcsQ0FDOUIsR0FBSU0sS0FBZS93QixFQUFRLENBU3pCLEdBUkE0d0IsRUFBVXRSLEVBQVFBLEVBQU10ZixFQUFPK3dCLEdBQWNBLEVBQWF2UCxHQUFZeGhCLEVBQU8rd0IsR0FFN0VGLEdBQWEsRUFDVHh2QixFQUFTdXZCLEtBRVhDLE9BQTRCN3ZCLEtBRDVCNnZCLEVBQWFELEVBQVFMLE1BQ3FCTSxFQUFhM3RCLEVBQVEwdEIsSUFHN0RDLEdBQWNILEVBQVEsRUFDeEJJLEVBQWNOLEVBQWlCMXZCLEVBQVEwZ0IsRUFBVW9QLEVBQVNwb0IsRUFBU29vQixFQUFRanRCLFFBQVNtdEIsRUFBYUosRUFBUSxHQUFLLE1BQ3pHLENBQ0wsR0FBSUksR0FBZSxpQkFBa0IsTUFBTXZ2QixZQUMzQ1QsRUFBT2d3QixHQUFlRixFQUd4QkUsSUFFRkMsSUFFRixPQUFPRCxJLGdCQ2xDVCxJQUFJdG9CLEVBQVcsRUFBUSxHQUNuQndvQixFQUFTLEVBQVEsSUFDakJ0dUIsRUFBVSxFQUFRLElBRXRCekYsRUFBT0QsUUFBVSxTQUFVK0ssRUFBTWtwQixFQUFXQyxFQUFZQyxHQUN0RCxJQUFJMXdCLEVBQUlnRyxPQUFPL0QsRUFBUXFGLElBQ25CcXBCLEVBQWUzd0IsRUFBRWtELE9BQ2pCMHRCLE9BQXlCcndCLElBQWZrd0IsRUFBMkIsSUFBTXpxQixPQUFPeXFCLEdBQ2xESSxFQUFlOW9CLEVBQVN5b0IsR0FDNUIsR0FBSUssR0FBZ0JGLEdBQTJCLElBQVhDLEVBQWUsT0FBTzV3QixFQUMxRCxJQUFJOHdCLEVBQVVELEVBQWVGLEVBQ3pCSSxFQUFlUixFQUFPcHpCLEtBQUt5ekIsRUFBUzV2QixLQUFLd0csS0FBS3NwQixFQUFVRixFQUFRMXRCLFNBRXBFLE9BREk2dEIsRUFBYTd0QixPQUFTNHRCLElBQVNDLEVBQWVBLEVBQWFuc0IsTUFBTSxFQUFHa3NCLElBQ2pFSixFQUFPSyxFQUFlL3dCLEVBQUlBLEVBQUkrd0IsSSxnQkNkdkMsSUFBSXpYLEVBQWMsRUFBUSxHQUN0QndTLEVBQVUsRUFBUSxJQUNsQmpsQixFQUFZLEVBQVEsSUFDcEJ3bEIsRUFBUyxFQUFRLElBQWlCdnFCLEVBQ3RDdEYsRUFBT0QsUUFBVSxTQUFVeTBCLEdBQ3pCLE9BQU8sU0FBVW53QixHQU9mLElBTkEsSUFLSXRDLEVBTEF3RCxFQUFJOEUsRUFBVWhHLEdBQ2QySyxFQUFPc2dCLEVBQVEvcEIsR0FDZm1CLEVBQVNzSSxFQUFLdEksT0FDZGxHLEVBQUksRUFDSjBILEVBQVMsR0FFTnhCLEVBQVNsRyxHQUNkdUIsRUFBTWlOLEVBQUt4TyxLQUNOc2MsSUFBZStTLEVBQU9sdkIsS0FBSzRFLEVBQUd4RCxJQUNqQ21HLEVBQU9tRSxLQUFLbW9CLEVBQVksQ0FBQ3p5QixFQUFLd0QsRUFBRXhELElBQVF3RCxFQUFFeEQsSUFHOUMsT0FBT21HLEssZ0JDakJYLElBQUk0RSxFQUFVLEVBQVEsSUFDbEJzSixFQUFPLEVBQVEsS0FDbkJwVyxFQUFPRCxRQUFVLFNBQVVpSyxHQUN6QixPQUFPLFdBQ0wsR0FBSThDLEVBQVExTSxPQUFTNEosRUFBTSxNQUFNMUYsVUFBVTBGLEVBQU8seUJBQ2xELE9BQU9vTSxFQUFLaFcsUyxnQkNOaEIsSUFBSXlnQixFQUFRLEVBQVEsSUFFcEI3Z0IsRUFBT0QsUUFBVSxTQUFVK1YsRUFBTTlGLEdBQy9CLElBQUk5SCxFQUFTLEdBRWIsT0FEQTJZLEVBQU0vSyxHQUFNLEVBQU81TixFQUFPbUUsS0FBTW5FLEVBQVE4SCxHQUNqQzlILEksY0NKVGxJLEVBQU9ELFFBQVV5RSxLQUFLaXdCLE9BQVMsU0FBZWhhLEVBQUdpYSxFQUFPQyxFQUFRQyxFQUFRQyxHQUN0RSxPQUN1QixJQUFyQnhzQixVQUFVM0IsUUFFTCtULEdBQUtBLEdBRUxpYSxHQUFTQSxHQUVUQyxHQUFVQSxHQUVWQyxHQUFVQSxHQUVWQyxHQUFXQSxFQUNUekssSUFDTDNQLElBQU13SSxLQUFZeEksS0FBT3dJLElBQWlCeEksR0FDdENBLEVBQUlpYSxJQUFVRyxFQUFVRCxJQUFXRCxFQUFTRCxHQUFTRSxJLDZCQ2QvRDUwQixFQUFPRCxRQUFVLFNBQWMwRyxFQUFJK0IsR0FDakMsT0FBTyxXQUVMLElBREEsSUFBSW9lLEVBQU8sSUFBSTNZLE1BQU01RixVQUFVM0IsUUFDdEJsRyxFQUFJLEVBQUdBLEVBQUlvbUIsRUFBS2xnQixPQUFRbEcsSUFDL0JvbUIsRUFBS3BtQixHQUFLNkgsVUFBVTdILEdBRXRCLE9BQU9pRyxFQUFHc0UsTUFBTXZDLEVBQVNvZSxNLDZCQ043QixJQUFJa08sRUFBYyxFQUFRLEtBUzFCOTBCLEVBQU9ELFFBQVUsU0FBZ0J1b0IsRUFBU1UsRUFBUWxqQixHQUNoRCxJQUFJeW9CLEVBQWlCem9CLEVBQVMyb0IsT0FBT0YsZUFDaEN6b0IsRUFBUzBvQixRQUFXRCxJQUFrQkEsRUFBZXpvQixFQUFTMG9CLFFBR2pFeEYsRUFBTzhMLEVBQ0wsbUNBQXFDaHZCLEVBQVMwb0IsT0FDOUMxb0IsRUFBUzJvQixPQUNULEtBQ0Ezb0IsRUFBUzZvQixRQUNUN29CLElBUEZ3aUIsRUFBUXhpQixLLDZCQ1paLElBQUlpdkIsRUFBZ0IsRUFBUSxLQUN4QkMsRUFBYyxFQUFRLEtBVzFCaDFCLEVBQU9ELFFBQVUsU0FBdUJrMUIsRUFBU0MsR0FDL0MsT0FBSUQsSUFBWUYsRUFBY0csR0FDckJGLEVBQVlDLEVBQVNDLEdBRXZCQSxJLGNDbEJUbDFCLEVBQU9ELFFBQVVvMUIsUUFBUSxTLGNDQXpCbjFCLEVBQU9ELFFBQVVvMUIsUUFBUSxVLGdCQ0F6QixJQUFJeGEsRUFBTSxFQUFRLEtBQ2R5YSxFQUFNemEsRUFBSXlhLElBQ1ZDLEVBQU8sRUFBUSxLQUNmQyxFQUFRLEVBQVEsS0FDaEJDLEVBQVcsRUFBUSxLQUFVQSxTQUM3QkMsRUFBUyxFQUFRLEtBQ2pCQyxFQUFRLEVBQVEsS0FHaEJDLEVBQVMsQ0FBQyxRQUFTLFVBQVcsVUFBVyxRQUFTLFNBQVUsV0FDNURDLEVBQWdCejBCLE9BQU9ZLE9BQU8sTUFDbEM0ekIsRUFBT252QixTQUFRLFNBQVVvZ0IsR0FDdkJnUCxFQUFjaFAsR0FBUyxTQUFVaVAsRUFBTXBWLEVBQU1xVixHQUMzQ3oxQixLQUFLMDFCLGNBQWNDLEtBQUtwUCxFQUFPaVAsRUFBTXBWLEVBQU1xVixPQUsvQyxJQUFJRyxFQUFtQkMsRUFDckIsNkJBQ0EsNkJBRUVDLEVBQXdCRCxFQUMxQiw0QkFDQSx3Q0FFRUUsRUFBNkJGLEVBQy9CLGtDQUNBLGdEQUVFRyxFQUFxQkgsRUFDdkIsNkJBQ0EsbUJBSUYsU0FBU0ksRUFBb0JqZSxFQUFTa2UsR0FFcENmLEVBQVM1MEIsS0FBS1AsTUFDZEEsS0FBS20yQixpQkFBaUJuZSxHQUN0QmhZLEtBQUtvMkIsU0FBV3BlLEVBQ2hCaFksS0FBS3EyQixRQUFTLEVBQ2RyMkIsS0FBS3MyQixTQUFVLEVBQ2Z0MkIsS0FBS3UyQixlQUFpQixFQUN0QnYyQixLQUFLdzJCLFdBQWEsR0FDbEJ4MkIsS0FBS3kyQixtQkFBcUIsRUFDMUJ6MkIsS0FBSzAyQixvQkFBc0IsR0FHdkJSLEdBQ0ZsMkIsS0FBSzIyQixHQUFHLFdBQVlULEdBSXRCLElBQUluMkIsRUFBT0MsS0FDWEEsS0FBSzQyQixrQkFBb0IsU0FBVWx4QixHQUNqQzNGLEVBQUs4MkIsaUJBQWlCbnhCLElBSXhCMUYsS0FBSzgyQixrQkF5WFAsU0FBU0MsRUFBS0MsR0FFWixJQUFJcjNCLEVBQVUsQ0FDWnMzQixhQUFjLEdBQ2QvSSxjQUFlLFVBSWJnSixFQUFrQixHQXlEdEIsT0F4REFwMkIsT0FBTzhOLEtBQUtvb0IsR0FBVzd3QixTQUFRLFNBQVVneEIsR0FDdkMsSUFBSUMsRUFBV0QsRUFBUyxJQUNwQkUsRUFBaUJILEVBQWdCRSxHQUFZSixFQUFVRyxHQUN2REcsRUFBa0IzM0IsRUFBUXczQixHQUFVcjJCLE9BQU9ZLE9BQU8yMUIsR0FnRHREdjJCLE9BQU9xdUIsaUJBQWlCbUksRUFBaUIsQ0FDdkMvSSxRQUFTLENBQUVsdEIsTUE5Q2IsU0FBaUJnWCxFQUFPTCxFQUFTdWYsR0FFL0IsR0FBcUIsaUJBQVZsZixFQUFvQixDQUM3QixJQUFJbWYsRUFBU25mLEVBQ2IsSUFDRUEsRUFBUW9mLEVBQWEsSUFBSXpDLEVBQUl3QyxJQUUvQixNQUFPRSxHQUVMcmYsRUFBUWtDLEVBQUkxQixNQUFNMmUsU0FHYnhDLEdBQVEzYyxhQUFpQjJjLEVBQ2hDM2MsRUFBUW9mLEVBQWFwZixJQUdyQmtmLEVBQVd2ZixFQUNYQSxFQUFVSyxFQUNWQSxFQUFRLENBQUUrZSxTQUFVQSxJQWdCdEIsTUFkdUIsbUJBQVpwZixJQUNUdWYsRUFBV3ZmLEVBQ1hBLEVBQVUsT0FJWkEsRUFBVWxYLE9BQU9pWSxPQUFPLENBQ3RCa2UsYUFBY3QzQixFQUFRczNCLGFBQ3RCL0ksY0FBZXZ1QixFQUFRdXVCLGVBQ3RCN1YsRUFBT0wsSUFDRmtmLGdCQUFrQkEsRUFFMUI5QixFQUFPdUMsTUFBTTNmLEVBQVFvZixTQUFVQSxFQUFVLHFCQUN6Qy9CLEVBQU0sVUFBV3JkLEdBQ1YsSUFBSWllLEVBQW9CamUsRUFBU3VmLElBWWJuakIsY0FBYyxFQUFNcFQsWUFBWSxFQUFNcVQsVUFBVSxHQUMzRXBULElBQUssQ0FBRUksTUFUVCxTQUFhZ1gsRUFBT0wsRUFBU3VmLEdBQzNCLElBQUlLLEVBQWlCTixFQUFnQi9JLFFBQVFsVyxFQUFPTCxFQUFTdWYsR0FFN0QsT0FEQUssRUFBZXRrQixNQUNSc2tCLEdBTVl4akIsY0FBYyxFQUFNcFQsWUFBWSxFQUFNcVQsVUFBVSxRQUdoRTFVLEVBSVQsU0FBU2s0QixLQUdULFNBQVNKLEVBQWFLLEdBQ3BCLElBQUk5ZixFQUFVLENBQ1pvZixTQUFVVSxFQUFVVixTQUNwQlcsU0FBVUQsRUFBVUMsU0FBU0MsV0FBVyxLQUV0Q0YsRUFBVUMsU0FBUy92QixNQUFNLEdBQUksR0FDN0I4dkIsRUFBVUMsU0FDWnRkLEtBQU1xZCxFQUFVcmQsS0FDaEJ3ZCxPQUFRSCxFQUFVRyxPQUNsQkMsU0FBVUosRUFBVUksU0FDcEJDLEtBQU1MLEVBQVVJLFNBQVdKLEVBQVVHLE9BQ3JDRyxLQUFNTixFQUFVTSxNQUtsQixNQUh1QixLQUFuQk4sRUFBVXRTLE9BQ1p4TixFQUFRd04sS0FBTzdNLE9BQU9tZixFQUFVdFMsT0FFM0J4TixFQUdULFNBQVNxZ0IsRUFBc0JDLEVBQU94TCxHQUNwQyxJQUFJeUwsRUFDSixJQUFLLElBQUlDLEtBQVUxTCxFQUNid0wsRUFBTXp1QixLQUFLMnVCLEtBQ2JELEVBQVl6TCxFQUFRMEwsVUFDYjFMLEVBQVEwTCxJQUduQixPQUFPLE1BQUNELE9BQ041MEIsRUFBWXlGLE9BQU9tdkIsR0FBV2x3QixPQUdsQyxTQUFTd3RCLEVBQWdCdkgsRUFBTW1LLEdBQzdCLFNBQVNDLEVBQVlDLEdBQ25CbnpCLE1BQU1vekIsa0JBQWtCNTRCLEtBQU1BLEtBQUt5RyxhQUM5Qmt5QixHQUlIMzRCLEtBQUswdUIsUUFBVStKLEVBQWlCLEtBQU9FLEVBQU1qSyxRQUM3QzF1QixLQUFLMjRCLE1BQVFBLEdBSmIzNEIsS0FBSzB1QixRQUFVK0osRUFXbkIsT0FKQUMsRUFBWTEyQixVQUFZLElBQUl3RCxNQUM1Qmt6QixFQUFZMTJCLFVBQVV5RSxZQUFjaXlCLEVBQ3BDQSxFQUFZMTJCLFVBQVVyQixLQUFPLFVBQVkydEIsRUFBTyxJQUNoRG9LLEVBQVkxMkIsVUFBVXNzQixLQUFPQSxFQUN0Qm9LLEVBR1QsU0FBU0csRUFBYXRLLEdBQ3BCLElBQUssSUFBSWhxQixFQUFJLEVBQUdBLEVBQUkrd0IsRUFBT2h2QixPQUFRL0IsSUFDakNncUIsRUFBUXVLLGVBQWV4RCxFQUFPL3dCLEdBQUlneEIsRUFBY0QsRUFBTy93QixLQUV6RGdxQixFQUFRb0ksR0FBRyxRQUFTa0IsR0FDcEJ0SixFQUFRd0ssUUFyZlY5QyxFQUFvQmowQixVQUFZbEIsT0FBT1ksT0FBT3l6QixFQUFTbnpCLFdBRXZEaTBCLEVBQW9CajBCLFVBQVUrMkIsTUFBUSxXQUNwQ0YsRUFBYTc0QixLQUFLZzVCLGlCQUNsQmg1QixLQUFLMjFCLEtBQUssVUFJWk0sRUFBb0JqMEIsVUFBVW9hLE1BQVEsU0FBVXpXLEVBQU1zekIsRUFBVTFCLEdBRTlELEdBQUl2M0IsS0FBS3MyQixRQUNQLE1BQU0sSUFBSU4sRUFJWixLQUFzQixpQkFBVHJ3QixHQUFxQyxpQkFBVEEsR0FBc0IsV0FBWUEsR0FDekUsTUFBTSxJQUFJekIsVUFBVSxpREFFRSxtQkFBYiswQixJQUNUMUIsRUFBVzBCLEVBQ1hBLEVBQVcsTUFLTyxJQUFoQnR6QixFQUFLVyxPQU9MdEcsS0FBS3kyQixtQkFBcUI5d0IsRUFBS1csUUFBVXRHLEtBQUtvMkIsU0FBU2xJLGVBQ3pEbHVCLEtBQUt5MkIsb0JBQXNCOXdCLEVBQUtXLE9BQ2hDdEcsS0FBSzAyQixvQkFBb0J6cUIsS0FBSyxDQUFFdEcsS0FBTUEsRUFBTXN6QixTQUFVQSxJQUN0RGo1QixLQUFLZzVCLGdCQUFnQjVjLE1BQU16VyxFQUFNc3pCLEVBQVUxQixLQUkzQ3YzQixLQUFLMjFCLEtBQUssUUFBUyxJQUFJSSxHQUN2Qi8xQixLQUFLKzRCLFNBZER4QixHQUNGQSxLQWtCTnRCLEVBQW9CajBCLFVBQVVzUixJQUFNLFNBQVUzTixFQUFNc3pCLEVBQVUxQixHQVk1RCxHQVZvQixtQkFBVDV4QixHQUNUNHhCLEVBQVc1eEIsRUFDWEEsRUFBT3N6QixFQUFXLE1BRVMsbUJBQWJBLElBQ2QxQixFQUFXMEIsRUFDWEEsRUFBVyxNQUlSdHpCLEVBSUEsQ0FDSCxJQUFJNUYsRUFBT0MsS0FDUGs1QixFQUFpQmw1QixLQUFLZzVCLGdCQUMxQmg1QixLQUFLb2MsTUFBTXpXLEVBQU1zekIsR0FBVSxXQUN6Qmw1QixFQUFLczJCLFFBQVMsRUFDZDZDLEVBQWU1bEIsSUFBSSxLQUFNLEtBQU1pa0IsTUFFakN2M0IsS0FBS3MyQixTQUFVLE9BVmZ0MkIsS0FBS3EyQixPQUFTcjJCLEtBQUtzMkIsU0FBVSxFQUM3QnQyQixLQUFLZzVCLGdCQUFnQjFsQixJQUFJLEtBQU0sS0FBTWlrQixJQWN6Q3RCLEVBQW9CajBCLFVBQVVtM0IsVUFBWSxTQUFVeDRCLEVBQU1VLEdBQ3hEckIsS0FBS28yQixTQUFTdEosUUFBUW5zQixHQUFRVSxFQUM5QnJCLEtBQUtnNUIsZ0JBQWdCRyxVQUFVeDRCLEVBQU1VLElBSXZDNDBCLEVBQW9CajBCLFVBQVVvM0IsYUFBZSxTQUFVejRCLFVBQzlDWCxLQUFLbzJCLFNBQVN0SixRQUFRbnNCLEdBQzdCWCxLQUFLZzVCLGdCQUFnQkksYUFBYXo0QixJQUlwQ3MxQixFQUFvQmowQixVQUFVa2xCLFdBQWEsU0FBVW1TLEVBQU85QixHQUMxRCxJQUFJeDNCLEVBQU9DLEtBR1gsU0FBU3M1QixFQUFpQkMsR0FDeEJBLEVBQU9yUyxXQUFXbVMsR0FDbEJFLEVBQU9ULGVBQWUsVUFBV1MsRUFBT0MsU0FDeENELEVBQU9FLFlBQVksVUFBV0YsRUFBT0MsU0FJdkMsU0FBU0UsRUFBV0gsR0FDZHg1QixFQUFLNDVCLFVBQ1BDLGFBQWE3NUIsRUFBSzQ1QixVQUVwQjU1QixFQUFLNDVCLFNBQVd6UyxZQUFXLFdBQ3pCbm5CLEVBQUs0MUIsS0FBSyxXQUNWa0UsTUFDQ1IsR0FDSEMsRUFBaUJDLEdBSW5CLFNBQVNNLElBRUg5NUIsRUFBSzQ1QixXQUNQQyxhQUFhNzVCLEVBQUs0NUIsVUFDbEI1NUIsRUFBSzQ1QixTQUFXLE1BSWxCNTVCLEVBQUsrNEIsZUFBZSxRQUFTZSxHQUM3Qjk1QixFQUFLKzRCLGVBQWUsUUFBU2UsR0FDN0I5NUIsRUFBSys0QixlQUFlLFdBQVllLEdBQzVCdEMsR0FDRngzQixFQUFLKzRCLGVBQWUsVUFBV3ZCLEdBRTVCeDNCLEVBQUt3NUIsUUFDUng1QixFQUFLaTVCLGdCQUFnQkYsZUFBZSxTQUFVWSxHQXVCbEQsT0FsQkluQyxHQUNGdjNCLEtBQUsyMkIsR0FBRyxVQUFXWSxHQUlqQnYzQixLQUFLdTVCLE9BQ1BHLEVBQVcxNUIsS0FBS3U1QixRQUdoQnY1QixLQUFLZzVCLGdCQUFnQmMsS0FBSyxTQUFVSixHQUl0QzE1QixLQUFLMjJCLEdBQUcsU0FBVTJDLEdBQ2xCdDVCLEtBQUsyMkIsR0FBRyxRQUFTa0QsR0FDakI3NUIsS0FBSzIyQixHQUFHLFFBQVNrRCxHQUNqQjc1QixLQUFLMjJCLEdBQUcsV0FBWWtELEdBRWI3NUIsTUFJVCxDQUNFLGVBQWdCLFlBQ2hCLGFBQWMsc0JBQ2RtRyxTQUFRLFNBQVU0RSxHQUNsQmtyQixFQUFvQmowQixVQUFVK0ksR0FBVSxTQUFVbEcsRUFBR3NELEdBQ25ELE9BQU9uSSxLQUFLZzVCLGdCQUFnQmp1QixHQUFRbEcsRUFBR3NELE9BSzNDLENBQUMsVUFBVyxhQUFjLFVBQVVoQyxTQUFRLFNBQVVwRSxHQUNwRGpCLE9BQU9DLGVBQWVrMUIsRUFBb0JqMEIsVUFBV0QsRUFBVSxDQUM3RGQsSUFBSyxXQUFjLE9BQU9qQixLQUFLZzVCLGdCQUFnQmozQixTQUluRGswQixFQUFvQmowQixVQUFVbTBCLGlCQUFtQixTQUFVbmUsR0FrQnpELEdBaEJLQSxFQUFROFUsVUFDWDlVLEVBQVE4VSxRQUFVLElBTWhCOVUsRUFBUStoQixPQUVML2hCLEVBQVErZixXQUNYL2YsRUFBUStmLFNBQVcvZixFQUFRK2hCLGFBRXRCL2hCLEVBQVEraEIsT0FJWi9oQixFQUFRa2dCLFVBQVlsZ0IsRUFBUW1nQixLQUFNLENBQ3JDLElBQUk2QixFQUFZaGlCLEVBQVFtZ0IsS0FBS3hsQixRQUFRLEtBQ2pDcW5CLEVBQVksRUFDZGhpQixFQUFRa2dCLFNBQVdsZ0IsRUFBUW1nQixNQUczQm5nQixFQUFRa2dCLFNBQVdsZ0IsRUFBUW1nQixLQUFLOEIsVUFBVSxFQUFHRCxHQUM3Q2hpQixFQUFRaWdCLE9BQVNqZ0IsRUFBUW1nQixLQUFLOEIsVUFBVUQsTUFPOUMvRCxFQUFvQmowQixVQUFVODBCLGdCQUFrQixXQUU5QyxJQUFJTSxFQUFXcDNCLEtBQUtvMkIsU0FBU2dCLFNBQ3pCQyxFQUFpQnIzQixLQUFLbzJCLFNBQVNjLGdCQUFnQkUsR0FDbkQsR0FBS0MsRUFBTCxDQU9BLEdBQUlyM0IsS0FBS28yQixTQUFTOEQsT0FBUSxDQUN4QixJQUFJL0MsRUFBU0MsRUFBUytDLE9BQU8sRUFBRy9DLEVBQVM5d0IsT0FBUyxHQUNsRHRHLEtBQUtvMkIsU0FBU2dFLE1BQVFwNkIsS0FBS28yQixTQUFTOEQsT0FBTy9DLEdBSTdDLElBQUk1SSxFQUFVdnVCLEtBQUtnNUIsZ0JBQ2IzQixFQUFlOUksUUFBUXZ1QixLQUFLbzJCLFNBQVVwMkIsS0FBSzQyQixtQkFDakQ1MkIsS0FBS3E2QixZQUFjOWYsRUFBSStmLE9BQU90NkIsS0FBS28yQixVQUduQzdILEVBQVFtSCxjQUFnQjExQixLQUN4QixJQUFLLElBQUl1RSxFQUFJLEVBQUdBLEVBQUkrd0IsRUFBT2h2QixPQUFRL0IsSUFDakNncUIsRUFBUW9JLEdBQUdyQixFQUFPL3dCLEdBQUlneEIsRUFBY0QsRUFBTy93QixLQUs3QyxHQUFJdkUsS0FBS3U2QixZQUFhLENBRXBCLElBQUluNkIsRUFBSSxFQUNKTCxFQUFPQyxLQUNQdzZCLEVBQVV4NkIsS0FBSzAyQixxQkFDbEIsU0FBUytELEVBQVVoMUIsR0FHbEIsR0FBSThvQixJQUFZeHVCLEVBQUtpNUIsZ0JBR25CLEdBQUl2ekIsRUFDRjFGLEVBQUs0MUIsS0FBSyxRQUFTbHdCLFFBR2hCLEdBQUlyRixFQUFJbzZCLEVBQVFsMEIsT0FBUSxDQUMzQixJQUFJUyxFQUFTeXpCLEVBQVFwNkIsS0FFaEJtdUIsRUFBUW1NLFVBQ1huTSxFQUFRblMsTUFBTXJWLEVBQU9wQixLQUFNb0IsRUFBT2t5QixTQUFVd0IsUUFJdkMxNkIsRUFBS3MyQixRQUNaOUgsRUFBUWpiLE1BbkJkLFNBN0JBdFQsS0FBSzIxQixLQUFLLFFBQVMsSUFBSXp4QixVQUFVLHdCQUEwQmt6QixLQXdEL0RuQixFQUFvQmowQixVQUFVNjBCLGlCQUFtQixTQUFVbnhCLEdBRXpELElBQUlpMUIsRUFBYWoxQixFQUFTaTFCLFdBQ3RCMzZCLEtBQUtvMkIsU0FBU3dFLGdCQUNoQjU2QixLQUFLdzJCLFdBQVd2cUIsS0FBSyxDQUNuQnNPLElBQUt2YSxLQUFLcTZCLFlBQ1Z2TixRQUFTcG5CLEVBQVNvbkIsUUFDbEI2TixXQUFZQSxJQVloQixJQUFJRSxFQUFXbjFCLEVBQVNvbkIsUUFBUStOLFNBQ2hDLElBQUtBLElBQThDLElBQWxDNzZCLEtBQUtvMkIsU0FBUzBFLGlCQUMzQkgsRUFBYSxLQUFPQSxHQUFjLElBT3BDLE9BTkFqMUIsRUFBU3ExQixZQUFjLzZCLEtBQUtxNkIsWUFDNUIzMEIsRUFBU3MxQixVQUFZaDdCLEtBQUt3MkIsV0FDMUJ4MkIsS0FBSzIxQixLQUFLLFdBQVlqd0IsUUFHdEIxRixLQUFLMDJCLG9CQUFzQixJQVc3QixHQU5BbUMsRUFBYTc0QixLQUFLZzVCLGlCQUVsQnR6QixFQUFTOHpCLFlBSUh4NUIsS0FBS3UyQixlQUFpQnYyQixLQUFLbzJCLFNBQVNhLGFBQ3hDajNCLEtBQUsyMUIsS0FBSyxRQUFTLElBQUlHLE9BRHpCLEdBU29CLE1BQWY2RSxHQUFxQyxNQUFmQSxJQUFnRCxTQUF6QjM2QixLQUFLbzJCLFNBQVNyckIsUUFLNUMsTUFBZjR2QixJQUF3QixpQkFBaUI5d0IsS0FBSzdKLEtBQUtvMkIsU0FBU3JyQixXQUMvRC9LLEtBQUtvMkIsU0FBU3JyQixPQUFTLE1BRXZCL0ssS0FBSzAyQixvQkFBc0IsR0FDM0IyQixFQUFzQixhQUFjcjRCLEtBQUtvMkIsU0FBU3RKLFVBSXBELElBU0ltTyxFQVRBQyxFQUFvQjdDLEVBQXNCLFVBQVdyNEIsS0FBS28yQixTQUFTdEosU0FHbkVxTyxFQUFrQjVnQixFQUFJMUIsTUFBTTdZLEtBQUtxNkIsYUFDakNlLEVBQWNGLEdBQXFCQyxFQUFnQnBCLEtBQ25Ec0IsRUFBYSxRQUFReHhCLEtBQUtneEIsR0FBWTc2QixLQUFLcTZCLFlBQzdDOWYsRUFBSStmLE9BQU94NUIsT0FBT2lZLE9BQU9vaUIsRUFBaUIsQ0FBRXBCLEtBQU1xQixLQUlwRCxJQUNFSCxFQUFjMWdCLEVBQUkyTixRQUFRbVQsRUFBWVIsR0FFeEMsTUFBT2xDLEdBRUwsWUFEQTM0QixLQUFLMjFCLEtBQUssUUFBUyxJQUFJQyxFQUFpQitDLElBSzFDdEQsRUFBTSxpQkFBa0I0RixHQUN4Qmo3QixLQUFLdTZCLGFBQWMsRUFDbkIsSUFBSWUsRUFBbUIvZ0IsRUFBSTFCLE1BQU1vaUIsR0FhakMsR0FaQW42QixPQUFPaVksT0FBTy9ZLEtBQUtvMkIsU0FBVWtGLElBSXpCQSxFQUFpQmxFLFdBQWErRCxFQUFnQi9ELFVBQ2pCLFdBQTlCa0UsRUFBaUJsRSxVQUNqQmtFLEVBQWlCdkIsT0FBU3FCLElBNkovQixTQUFxQkcsRUFBV3pULEdBQzlCLE1BQU0wVCxFQUFNRCxFQUFVajFCLE9BQVN3aEIsRUFBT3hoQixPQUFTLEVBQy9DLE9BQU9rMUIsRUFBTSxHQUF3QixNQUFuQkQsRUFBVUMsSUFBZ0JELEVBQVVFLFNBQVMzVCxHQTlKM0Q0VCxDQUFZSixFQUFpQnZCLEtBQU1xQixLQUNyQy9DLEVBQXNCLDhCQUErQnI0QixLQUFLbzJCLFNBQVN0SixTQUl6QixtQkFBakM5c0IsS0FBS28yQixTQUFTdUYsZUFBK0IsQ0FDdEQsSUFBSUMsRUFBa0IsQ0FBRTlPLFFBQVNwbkIsRUFBU29uQixTQUMxQyxJQUNFOXNCLEtBQUtvMkIsU0FBU3VGLGVBQWVwN0IsS0FBSyxLQUFNUCxLQUFLbzJCLFNBQVV3RixHQUV6RCxNQUFPbEUsR0FFTCxZQURBMTNCLEtBQUsyMUIsS0FBSyxRQUFTK0IsR0FHckIxM0IsS0FBS20yQixpQkFBaUJuMkIsS0FBS28yQixVQUk3QixJQUNFcDJCLEtBQUs4MkIsa0JBRVAsTUFBTzZCLEdBQ0wzNEIsS0FBSzIxQixLQUFLLFFBQVMsSUFBSUMsRUFBaUIrQyxPQTRJNUMvNEIsRUFBT0QsUUFBVW8zQixFQUFLLENBQUU5QixLQUFNQSxFQUFNQyxNQUFPQSxJQUMzQ3QxQixFQUFPRCxRQUFRbzNCLEtBQU9BLEcsY0M3akJ0Qm4zQixFQUFPRCxRQUFVbzFCLFFBQVEsUSxnQkNpUnpCbjFCLEVBQU9ELFFBM1FQLFNBQWVrOEIsR0FxRGQsU0FBU0MsRUFBWUMsR0FDcEIsSUFBSUMsRUFFQUMsRUFDQUMsRUFGQUMsRUFBaUIsS0FJckIsU0FBUzlHLEtBQVM3TyxHQUVqQixJQUFLNk8sRUFBTStHLFFBQ1YsT0FHRCxNQUFNcjhCLEVBQU9zMUIsRUFHUGdILEVBQU8xakIsT0FBTyxJQUFJMmpCLE1BQ2xCQyxFQUFLRixHQUFRTCxHQUFZSyxHQUMvQnQ4QixFQUFLeThCLEtBQU9ELEVBQ1p4OEIsRUFBS2t5QixLQUFPK0osRUFDWmo4QixFQUFLczhCLEtBQU9BLEVBQ1pMLEVBQVdLLEVBRVg3VixFQUFLLEdBQUtzVixFQUFZVyxPQUFPalcsRUFBSyxJQUVYLGlCQUFaQSxFQUFLLElBRWZBLEVBQUtrVyxRQUFRLE1BSWQsSUFBSTF3QixFQUFRLEVBQ1p3YSxFQUFLLEdBQUtBLEVBQUssR0FBR2plLFFBQVEsZ0JBQWlCLENBQUM2YyxFQUFPa1YsS0FFbEQsR0FBYyxPQUFWbFYsRUFDSCxNQUFPLElBRVJwWixJQUNBLE1BQU1rTixFQUFZNGlCLEVBQVlhLFdBQVdyQyxHQUN6QyxHQUF5QixtQkFBZHBoQixFQUEwQixDQUNwQyxNQUFNcFQsRUFBTTBnQixFQUFLeGEsR0FDakJvWixFQUFRbE0sRUFBVTNZLEtBQUtSLEVBQU0rRixHQUc3QjBnQixFQUFLdU0sT0FBTy9tQixFQUFPLEdBQ25CQSxJQUVELE9BQU9vWixJQUlSMFcsRUFBWWMsV0FBV3I4QixLQUFLUixFQUFNeW1CLElBRXBCem1CLEVBQUttcEIsS0FBTzRTLEVBQVk1UyxLQUNoQ3ZlLE1BQU01SyxFQUFNeW1CLEdBaUNuQixPQTlCQTZPLEVBQU0wRyxVQUFZQSxFQUNsQjFHLEVBQU13SCxVQUFZZixFQUFZZSxZQUM5QnhILEVBQU15SCxNQUFRaEIsRUFBWWlCLFlBQVloQixHQUN0QzFHLEVBQU1udEIsT0FBU0EsRUFDZm10QixFQUFNbUUsUUFBVXNDLEVBQVl0QyxRQUU1QjE0QixPQUFPQyxlQUFlczBCLEVBQU8sVUFBVyxDQUN2Q3IwQixZQUFZLEVBQ1pvVCxjQUFjLEVBQ2RuVCxJQUFLLElBQ21CLE9BQW5CazdCLEVBQ0lBLEdBRUpGLElBQW9CSCxFQUFZa0IsYUFDbkNmLEVBQWtCSCxFQUFZa0IsV0FDOUJkLEVBQWVKLEVBQVlNLFFBQVFMLElBRzdCRyxHQUVSeHJCLElBQUt3RSxJQUNKaW5CLEVBQWlCam5CLEtBS2EsbUJBQXJCNG1CLEVBQVltQixNQUN0Qm5CLEVBQVltQixLQUFLNUgsR0FHWEEsRUFHUixTQUFTbnRCLEVBQU82ekIsRUFBV21CLEdBQzFCLE1BQU1DLEVBQVdyQixFQUFZOTdCLEtBQUsrN0IsZ0JBQWtDLElBQWRtQixFQUE0QixJQUFNQSxHQUFhbkIsR0FFckcsT0FEQW9CLEVBQVNqVSxJQUFNbHBCLEtBQUtrcEIsSUFDYmlVLEVBeUZSLFNBQVNDLEVBQVlqZCxHQUNwQixPQUFPQSxFQUFPdmEsV0FDWnEwQixVQUFVLEVBQUc5WixFQUFPdmEsV0FBV1UsT0FBUyxHQUN4Q2lDLFFBQVEsVUFBVyxLQTJCdEIsT0F2UUF1ekIsRUFBWXpHLE1BQVF5RyxFQUNwQkEsRUFBWXVCLFFBQVV2QixFQUN0QkEsRUFBWVcsT0FvUFosU0FBZ0IzMkIsR0FDZixHQUFJQSxhQUFlTixNQUNsQixPQUFPTSxFQUFJa3BCLE9BQVNscEIsRUFBSTRvQixRQUV6QixPQUFPNW9CLEdBdlBSZzJCLEVBQVl3QixRQXdMWixXQUNDLE1BQU1OLEVBQWEsSUFDZmxCLEVBQVk3TSxNQUFNbGMsSUFBSXFxQixNQUN0QnRCLEVBQVl5QixNQUFNeHFCLElBQUlxcUIsR0FBYXJxQixJQUFJZ3BCLEdBQWEsSUFBTUEsSUFDNUQ1eUIsS0FBSyxLQUVQLE9BREEyeUIsRUFBWTBCLE9BQU8sSUFDWlIsR0E3TFJsQixFQUFZMEIsT0FzSlosU0FBZ0JSLEdBT2YsSUFBSTU4QixFQU5KMDdCLEVBQVkyQixLQUFLVCxHQUNqQmxCLEVBQVlrQixXQUFhQSxFQUV6QmxCLEVBQVk3TSxNQUFRLEdBQ3BCNk0sRUFBWXlCLE1BQVEsR0FHcEIsTUFBTXYwQixHQUErQixpQkFBZmcwQixFQUEwQkEsRUFBYSxJQUFJaDBCLE1BQU0sVUFDakU4SyxFQUFNOUssRUFBTTFDLE9BRWxCLElBQUtsRyxFQUFJLEVBQUdBLEVBQUkwVCxFQUFLMVQsSUFDZjRJLEVBQU01SSxLQU9XLE9BRnRCNDhCLEVBQWFoMEIsRUFBTTVJLEdBQUdtSSxRQUFRLE1BQU8sUUFFdEIsR0FDZHV6QixFQUFZeUIsTUFBTXR4QixLQUFLLElBQUkyUixPQUFPLElBQU1vZixFQUFXN0MsT0FBTyxHQUFLLE1BRS9EMkIsRUFBWTdNLE1BQU1oakIsS0FBSyxJQUFJMlIsT0FBTyxJQUFNb2YsRUFBYSxRQTNLeERsQixFQUFZTSxRQXNNWixTQUFpQno3QixHQUNoQixHQUE4QixNQUExQkEsRUFBS0EsRUFBSzJGLE9BQVMsR0FDdEIsT0FBTyxFQUdSLElBQUlsRyxFQUNBMFQsRUFFSixJQUFLMVQsRUFBSSxFQUFHMFQsRUFBTWdvQixFQUFZeUIsTUFBTWozQixPQUFRbEcsRUFBSTBULEVBQUsxVCxJQUNwRCxHQUFJMDdCLEVBQVl5QixNQUFNbjlCLEdBQUd5SixLQUFLbEosR0FDN0IsT0FBTyxFQUlULElBQUtQLEVBQUksRUFBRzBULEVBQU1nb0IsRUFBWTdNLE1BQU0zb0IsT0FBUWxHLEVBQUkwVCxFQUFLMVQsSUFDcEQsR0FBSTA3QixFQUFZN00sTUFBTTd1QixHQUFHeUosS0FBS2xKLEdBQzdCLE9BQU8sRUFJVCxPQUFPLEdBek5SbTdCLEVBQVk0QixTQUFXLEVBQVEsS0FDL0I1QixFQUFZdEMsUUEwUFosV0FDQ21FLFFBQVFDLEtBQUssMElBelBkOThCLE9BQU84TixLQUFLaXRCLEdBQUsxMUIsUUFBUXhFLElBQ3hCbTZCLEVBQVluNkIsR0FBT2s2QixFQUFJbDZCLEtBT3hCbTZCLEVBQVk3TSxNQUFRLEdBQ3BCNk0sRUFBWXlCLE1BQVEsR0FPcEJ6QixFQUFZYSxXQUFhLEdBa0J6QmIsRUFBWWlCLFlBVlosU0FBcUJoQixHQUNwQixJQUFJdGhCLEVBQU8sRUFFWCxJQUFLLElBQUlyYSxFQUFJLEVBQUdBLEVBQUkyN0IsRUFBVXoxQixPQUFRbEcsSUFDckNxYSxHQUFTQSxHQUFRLEdBQUtBLEVBQVFzaEIsRUFBVXJ6QixXQUFXdEksR0FDbkRxYSxHQUFRLEVBR1QsT0FBT3FoQixFQUFZK0IsT0FBT3o1QixLQUFLNGtCLElBQUl2TyxHQUFRcWhCLEVBQVkrQixPQUFPdjNCLFNBNE4vRHcxQixFQUFZMEIsT0FBTzFCLEVBQVlnQyxRQUV4QmhDLEksb2xGQzVRUmw4QixFQUFPRCxRQUFVLFNBQWtCMEIsR0FDakMsU0FBVUEsSUFBU0EsRUFBTTA4QixjLDZCQ0QzQixJQUFJN1IsRUFBUSxFQUFRLElBVXBCdHNCLEVBQU9ELFFBQVUsU0FBcUJxK0IsRUFBU0MsR0FFN0NBLEVBQVVBLEdBQVcsR0FDckIsSUFBSTVQLEVBQVMsR0FFVDZQLEVBQXVCLENBQUMsTUFBTyxTQUFVLFFBQ3pDQyxFQUEwQixDQUFDLFVBQVcsT0FBUSxRQUFTLFVBQ3ZEQyxFQUF1QixDQUN6QixVQUFXLG1CQUFvQixvQkFBcUIsbUJBQ3BELFVBQVcsaUJBQWtCLGtCQUFtQixVQUFXLGVBQWdCLGlCQUMzRSxpQkFBa0IsbUJBQW9CLHFCQUFzQixhQUM1RCxtQkFBb0IsZ0JBQWlCLGVBQWdCLFlBQWEsWUFDbEUsYUFBYyxjQUFlLGFBQWMsb0JBRXpDQyxFQUFrQixDQUFDLGtCQUV2QixTQUFTQyxFQUFlNzZCLEVBQVFkLEdBQzlCLE9BQUl1cEIsRUFBTWxtQixjQUFjdkMsSUFBV3lvQixFQUFNbG1CLGNBQWNyRCxHQUM5Q3VwQixFQUFNcmtCLE1BQU1wRSxFQUFRZCxHQUNsQnVwQixFQUFNbG1CLGNBQWNyRCxHQUN0QnVwQixFQUFNcmtCLE1BQU0sR0FBSWxGLEdBQ2R1cEIsRUFBTXJtQixRQUFRbEQsR0FDaEJBLEVBQU9xRixRQUVUckYsRUFHVCxTQUFTNDdCLEVBQW9CQyxHQUN0QnRTLEVBQU1ubUIsWUFBWWs0QixFQUFRTyxJQUVuQnRTLEVBQU1ubUIsWUFBWWk0QixFQUFRUSxNQUNwQ25RLEVBQU9tUSxHQUFRRixPQUFlMzZCLEVBQVdxNkIsRUFBUVEsS0FGakRuUSxFQUFPbVEsR0FBUUYsRUFBZU4sRUFBUVEsR0FBT1AsRUFBUU8sSUFNekR0UyxFQUFNL2xCLFFBQVErM0IsR0FBc0IsU0FBMEJNLEdBQ3ZEdFMsRUFBTW5tQixZQUFZazRCLEVBQVFPLE1BQzdCblEsRUFBT21RLEdBQVFGLE9BQWUzNkIsRUFBV3M2QixFQUFRTyxRQUlyRHRTLEVBQU0vbEIsUUFBUWc0QixFQUF5QkksR0FFdkNyUyxFQUFNL2xCLFFBQVFpNEIsR0FBc0IsU0FBMEJJLEdBQ3ZEdFMsRUFBTW5tQixZQUFZazRCLEVBQVFPLElBRW5CdFMsRUFBTW5tQixZQUFZaTRCLEVBQVFRLE1BQ3BDblEsRUFBT21RLEdBQVFGLE9BQWUzNkIsRUFBV3E2QixFQUFRUSxLQUZqRG5RLEVBQU9tUSxHQUFRRixPQUFlMzZCLEVBQVdzNkIsRUFBUU8sT0FNckR0UyxFQUFNL2xCLFFBQVFrNEIsR0FBaUIsU0FBZUcsR0FDeENBLEtBQVFQLEVBQ1Y1UCxFQUFPbVEsR0FBUUYsRUFBZU4sRUFBUVEsR0FBT1AsRUFBUU8sSUFDNUNBLEtBQVFSLElBQ2pCM1AsRUFBT21RLEdBQVFGLE9BQWUzNkIsRUFBV3E2QixFQUFRUSxRQUlyRCxJQUFJQyxFQUFZUCxFQUNidm9CLE9BQU93b0IsR0FDUHhvQixPQUFPeW9CLEdBQ1B6b0IsT0FBTzBvQixHQUVOSyxFQUFZNTlCLE9BQ2I4TixLQUFLb3ZCLEdBQ0xyb0IsT0FBTzdVLE9BQU84TixLQUFLcXZCLElBQ25CMXJCLFFBQU8sU0FBeUI1USxHQUMvQixPQUFtQyxJQUE1Qjg4QixFQUFVOXJCLFFBQVFoUixNQUs3QixPQUZBdXFCLEVBQU0vbEIsUUFBUXU0QixFQUFXSCxHQUVsQmxRLEksNkJDN0VULFNBQVNzUSxFQUFPalEsR0FDZDF1QixLQUFLMHVCLFFBQVVBLEVBR2pCaVEsRUFBTzM4QixVQUFVNEQsU0FBVyxXQUMxQixNQUFPLFVBQVk1RixLQUFLMHVCLFFBQVUsS0FBTzF1QixLQUFLMHVCLFFBQVUsS0FHMURpUSxFQUFPMzhCLFVBQVUrN0IsWUFBYSxFQUU5Qm4rQixFQUFPRCxRQUFVZy9CLEcsc0VDVmpCLEdBTkEsRUFBUSxLQUVSLEVBQVEsS0FFUixFQUFRLEtBRUp2OEIsT0FBT3c4QixlQUNULE1BQU0sSUFBSXA1QixNQUFNLGtEQUVsQnBELE9BQU93OEIsZ0JBQWlCLEVBR3hCLFNBQVMvK0IsRUFBT3NGLEVBQUd4RCxFQUFLTixHQUN0QjhELEVBQUV4RCxJQUFRYixPQUFzQixlQUFFcUUsRUFBR3hELEVBQUssQ0FDeEMwUyxVQUFVLEVBQ1ZELGNBQWMsRUFDZC9TLE1BQU9BLElBSVh4QixFQUFPdUosT0FBT3BILFVBQVcsVUFBVyxHQUFHNjhCLFVBQ3ZDaC9CLEVBQU91SixPQUFPcEgsVUFBVyxXQUFZLEdBQUc4OEIsUUFFeEMsZ01BQWdNOTFCLE1BQU0sS0FBSzdDLFNBQVEsU0FBVXhFLEdBQzNOLEdBQUdBLElBQVE5QixFQUFPZ08sTUFBT2xNLEVBQUtpQyxTQUFTckQsS0FBS3FCLEtBQUssR0FBR0QsUyxnQkMxQnRELEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsSUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FD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QVUxaUIsR0FDVSxNQUFwQkEsRUFBUzBvQixRQUNYeEYsRUFDRSxJQUFJcGpCLE1BQUosd0RBQ21ERSxLQUl2RHdpQixFQUFRLENBQ05wZ0IsT0FBUXBDLEVBQVNDLFVBVnZCLE9BYVMsU0FBVUYsR0FDZixJQUFNbTVDLEdBQWlCLElBQUFDLGFBQVlwNUMsR0FDbkNtakIsRUFBT2cyQixVQXhDZixlQUNBLFFBQ0EsUUFDQSxRQUNBLFcsZ0tDQ2UsU0FBK0J0NUMsRUFBUUMsRUFBY200QyxHQUdsRSxPQUZBLElBQUFlLGlCQUFnQm41QyxFQUFRQyxHQUVqQixDQUNMdUMsT0FBUSxNLEVBVFosUSxhQUNBLE1BREEsSSxFQUVBLFFBQ0EsTSIsImZpbGUiOiJzdG9yeC1zdG9yYWdlLXNkay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcInN0b3J4LXN0b3JhZ2Utc2RrXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInN0b3J4LXN0b3JhZ2Utc2RrXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInN0b3J4LXN0b3JhZ2Utc2RrXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNTEpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImV4cG9ydCBjb25zdCBiYXNlVXJsID0gJ2h0dHA6Ly8xMDkuMTY5LjU1LjI1OjMwMDAvYXBpJztcbiIsImV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpIHtcbiAgICBpZiAoIWFwaUtleSB8fCBhcGlLZXkgPT09ICcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYXBpS2V5IHByb3ZpZGVkISBQbGVhc2UgcHJvdmlkZSB5b3VyIGFwaSBrZXkgYXMgYW4gYXJndW1lbnQgd2hlbiB5b3Ugc3RhcnQgdGhpcyBzY3JpcHQnKTtcbiAgICB9XG4gICAgaWYgKCFzZWNyZXRBcGlLZXkgfHwgc2VjcmV0QXBpS2V5ID09PSAnJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlY3JldEFwaUtleSBwcm92aWRlZCEgUGxlYXNlIHByb3ZpZGUgeW91ciBzZWNyZXQgYXBpIGtleSBhcyBhbiBhcmd1bWVudCB3aGVuIHlvdSBzdGFydCB0aGlzIHNjcmlwdCcpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgaWYgKGVycm9yICYmIGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEgJiYgZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgIHJldHVybiBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yO1xuICB9IGVsc2UgaWYgKGVycm9yLmRhdGEgJiYgZXJyb3IuZGF0YS5lcnJvcikge1xuICAgIHJldHVybiBlcnJvci5kYXRhLmVycm9yO1xuICB9IGVsc2UgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yLnJlc3BvbnNlLmVycm9yO1xuICB9XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBzdHJpY3RVcmlFbmNvZGUgPSByZXF1aXJlKCdzdHJpY3QtdXJpLWVuY29kZScpO1xuY29uc3QgZGVjb2RlQ29tcG9uZW50ID0gcmVxdWlyZSgnZGVjb2RlLXVyaS1jb21wb25lbnQnKTtcbmNvbnN0IHNwbGl0T25GaXJzdCA9IHJlcXVpcmUoJ3NwbGl0LW9uLWZpcnN0Jyk7XG5jb25zdCBmaWx0ZXJPYmplY3QgPSByZXF1aXJlKCdmaWx0ZXItb2JqJyk7XG5cbmNvbnN0IGlzTnVsbE9yVW5kZWZpbmVkID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuY29uc3QgZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyID0gU3ltYm9sKCdlbmNvZGVGcmFnbWVudElkZW50aWZpZXInKTtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0c3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1snLCBpbmRleCwgJ10nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdC4uLnJlc3VsdCxcblx0XHRcdFx0XHRbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgJ109JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJylcblx0XHRcdFx0XTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdjb2xvbi1saXN0LXNlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4ga2V5ID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgdmFsdWUgPT09IG51bGwpIHx8XG5cdFx0XHRcdFx0KG9wdGlvbnMuc2tpcEVtcHR5U3RyaW5nICYmIHZhbHVlID09PSAnJylcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSwgb3B0aW9ucyksICc6bGlzdD0nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgW2VuY29kZShrZXksIG9wdGlvbnMpLCAnOmxpc3Q9JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJyldO1xuXHRcdFx0fTtcblxuXHRcdGNhc2UgJ2NvbW1hJzpcblx0XHRjYXNlICdzZXBhcmF0b3InOlxuXHRcdGNhc2UgJ2JyYWNrZXQtc2VwYXJhdG9yJzoge1xuXHRcdFx0Y29uc3Qga2V5VmFsdWVTZXAgPSBvcHRpb25zLmFycmF5Rm9ybWF0ID09PSAnYnJhY2tldC1zZXBhcmF0b3InID9cblx0XHRcdFx0J1tdPScgOlxuXHRcdFx0XHQnPSc7XG5cblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhbnNsYXRlIG51bGwgdG8gYW4gZW1wdHkgc3RyaW5nIHNvIHRoYXQgaXQgZG9lc24ndCBzZXJpYWxpemUgYXMgJ251bGwnXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUgPT09IG51bGwgPyAnJyA6IHZhbHVlO1xuXG5cdFx0XHRcdGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtbZW5jb2RlKGtleSwgb3B0aW9ucyksIGtleVZhbHVlU2VwLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1tyZXN1bHQsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4ob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcildO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBOdWxsICYmIHZhbHVlID09PSBudWxsKSB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gJycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29sb24tbGlzdC1zZXBhcmF0b3InOlxuXHRcdFx0cmV0dXJuIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikgPT4ge1xuXHRcdFx0XHRyZXN1bHQgPSAvKDpsaXN0KSQvLmV4ZWMoa2V5KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoLzpsaXN0JC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdGNhc2UgJ3NlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluY2x1ZGVzKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXHRcdFx0XHRjb25zdCBpc0VuY29kZWRBcnJheSA9ICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc0FycmF5ICYmIGRlY29kZSh2YWx1ZSwgb3B0aW9ucykuaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcikpO1xuXHRcdFx0XHR2YWx1ZSA9IGlzRW5jb2RlZEFycmF5ID8gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSA6IHZhbHVlO1xuXHRcdFx0XHRjb25zdCBuZXdWYWx1ZSA9IGlzQXJyYXkgfHwgaXNFbmNvZGVkQXJyYXkgPyB2YWx1ZS5zcGxpdChvcHRpb25zLmFycmF5Rm9ybWF0U2VwYXJhdG9yKS5tYXAoaXRlbSA9PiBkZWNvZGUoaXRlbSwgb3B0aW9ucykpIDogdmFsdWUgPT09IG51bGwgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBuZXdWYWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0LXNlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSAvKFxcW1xcXSkkLy50ZXN0KGtleSk7XG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghaXNBcnJheSkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZSA/IGRlY29kZSh2YWx1ZSwgb3B0aW9ucykgOiB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBhcnJheVZhbHVlID0gdmFsdWUgPT09IG51bGwgP1xuXHRcdFx0XHRcdFtdIDpcblx0XHRcdFx0XHR2YWx1ZS5zcGxpdChvcHRpb25zLmFycmF5Rm9ybWF0U2VwYXJhdG9yKS5tYXAoaXRlbSA9PiBkZWNvZGUoaXRlbSwgb3B0aW9ucykpO1xuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gYXJyYXlWYWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIGFycmF5VmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3IodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUubGVuZ3RoICE9PSAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYXJyYXlGb3JtYXRTZXBhcmF0b3IgbXVzdCBiZSBzaW5nbGUgY2hhcmFjdGVyIHN0cmluZycpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFzaChpbnB1dCkge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuXHRsZXQgaGFzaCA9ICcnO1xuXHRjb25zdCBoYXNoU3RhcnQgPSB1cmwuaW5kZXhPZignIycpO1xuXHRpZiAoaGFzaFN0YXJ0ICE9PSAtMSkge1xuXHRcdGhhc2ggPSB1cmwuc2xpY2UoaGFzaFN0YXJ0KTtcblx0fVxuXG5cdHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0KGlucHV0KSB7XG5cdGlucHV0ID0gcmVtb3ZlSGFzaChpbnB1dCk7XG5cdGNvbnN0IHF1ZXJ5U3RhcnQgPSBpbnB1dC5pbmRleE9mKCc/Jyk7XG5cdGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMucGFyc2VOdW1iZXJzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpICE9PSAnJykpIHtcblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJvb2xlYW5zICYmIHZhbHVlICE9PSBudWxsICYmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykpIHtcblx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2UocXVlcnksIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZSxcblx0XHRzb3J0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJyxcblx0XHRwYXJzZU51bWJlcnM6IGZhbHNlLFxuXHRcdHBhcnNlQm9vbGVhbnM6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3Iob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIXF1ZXJ5KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgcXVlcnkuc3BsaXQoJyYnKSkge1xuXHRcdGlmIChwYXJhbSA9PT0gJycpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3Qob3B0aW9ucy5kZWNvZGUgPyBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKSA6IHBhcmFtLCAnPScpO1xuXG5cdFx0Ly8gTWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcblx0XHQvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0dmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IFsnY29tbWEnLCAnc2VwYXJhdG9yJywgJ2JyYWNrZXQtc2VwYXJhdG9yJ10uaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdCkgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJldCkpIHtcblx0XHRjb25zdCB2YWx1ZSA9IHJldFtrZXldO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlW2tdID0gcGFyc2VWYWx1ZSh2YWx1ZVtrXSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFtrZXldID0gcGFyc2VWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc29ydCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0cmV0dXJuIChvcHRpb25zLnNvcnQgPT09IHRydWUgPyBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKSA6IE9iamVjdC5rZXlzKHJldCkuc29ydChvcHRpb25zLnNvcnQpKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGV4dHJhY3Q7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIW9iamVjdCkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJ1xuXHR9LCBvcHRpb25zKTtcblxuXHR2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXG5cdGNvbnN0IHNob3VsZEZpbHRlciA9IGtleSA9PiAoXG5cdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgaXNOdWxsT3JVbmRlZmluZWQob2JqZWN0W2tleV0pKSB8fFxuXHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiBvYmplY3Rba2V5XSA9PT0gJycpXG5cdCk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpO1xuXG5cdGNvbnN0IG9iamVjdENvcHkgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG5cdFx0aWYgKCFzaG91bGRGaWx0ZXIoa2V5KSkge1xuXHRcdFx0b2JqZWN0Q29weVtrZXldID0gb2JqZWN0W2tleV07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdENvcHkpO1xuXG5cdGlmIChvcHRpb25zLnNvcnQgIT09IGZhbHNlKSB7XG5cdFx0a2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG5cdH1cblxuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IHtcblx0XHRjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdGlmICh2YWx1ZS5sZW5ndGggPT09IDAgJiYgb3B0aW9ucy5hcnJheUZvcm1hdCA9PT0gJ2JyYWNrZXQtc2VwYXJhdG9yJykge1xuXHRcdFx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyAnW10nO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0LnJlZHVjZShmb3JtYXR0ZXIoa2V5KSwgW10pXG5cdFx0XHRcdC5qb2luKCcmJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVuY29kZShrZXksIG9wdGlvbnMpICsgJz0nICsgZW5jb2RlKHZhbHVlLCBvcHRpb25zKTtcblx0fSkuZmlsdGVyKHggPT4geC5sZW5ndGggPiAwKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnRzLnBhcnNlVXJsID0gKHVybCwgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZGVjb2RlOiB0cnVlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IFt1cmxfLCBoYXNoXSA9IHNwbGl0T25GaXJzdCh1cmwsICcjJyk7XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24oXG5cdFx0e1xuXHRcdFx0dXJsOiB1cmxfLnNwbGl0KCc/JylbMF0gfHwgJycsXG5cdFx0XHRxdWVyeTogcGFyc2UoZXh0cmFjdCh1cmwpLCBvcHRpb25zKVxuXHRcdH0sXG5cdFx0b3B0aW9ucyAmJiBvcHRpb25zLnBhcnNlRnJhZ21lbnRJZGVudGlmaWVyICYmIGhhc2ggPyB7ZnJhZ21lbnRJZGVudGlmaWVyOiBkZWNvZGUoaGFzaCwgb3B0aW9ucyl9IDoge31cblx0KTtcbn07XG5cbmV4cG9ydHMuc3RyaW5naWZ5VXJsID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZW5jb2RlOiB0cnVlLFxuXHRcdHN0cmljdDogdHJ1ZSxcblx0XHRbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXTogdHJ1ZVxuXHR9LCBvcHRpb25zKTtcblxuXHRjb25zdCB1cmwgPSByZW1vdmVIYXNoKG9iamVjdC51cmwpLnNwbGl0KCc/JylbMF0gfHwgJyc7XG5cdGNvbnN0IHF1ZXJ5RnJvbVVybCA9IGV4cG9ydHMuZXh0cmFjdChvYmplY3QudXJsKTtcblx0Y29uc3QgcGFyc2VkUXVlcnlGcm9tVXJsID0gZXhwb3J0cy5wYXJzZShxdWVyeUZyb21VcmwsIHtzb3J0OiBmYWxzZX0pO1xuXG5cdGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbihwYXJzZWRRdWVyeUZyb21VcmwsIG9iamVjdC5xdWVyeSk7XG5cdGxldCBxdWVyeVN0cmluZyA9IGV4cG9ydHMuc3RyaW5naWZ5KHF1ZXJ5LCBvcHRpb25zKTtcblx0aWYgKHF1ZXJ5U3RyaW5nKSB7XG5cdFx0cXVlcnlTdHJpbmcgPSBgPyR7cXVlcnlTdHJpbmd9YDtcblx0fVxuXG5cdGxldCBoYXNoID0gZ2V0SGFzaChvYmplY3QudXJsKTtcblx0aWYgKG9iamVjdC5mcmFnbWVudElkZW50aWZpZXIpIHtcblx0XHRoYXNoID0gYCMke29wdGlvbnNbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXSA/IGVuY29kZShvYmplY3QuZnJhZ21lbnRJZGVudGlmaWVyLCBvcHRpb25zKSA6IG9iamVjdC5mcmFnbWVudElkZW50aWZpZXJ9YDtcblx0fVxuXG5cdHJldHVybiBgJHt1cmx9JHtxdWVyeVN0cmluZ30ke2hhc2h9YDtcbn07XG5cbmV4cG9ydHMucGljayA9IChpbnB1dCwgZmlsdGVyLCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRwYXJzZUZyYWdtZW50SWRlbnRpZmllcjogdHJ1ZSxcblx0XHRbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXTogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3Qge3VybCwgcXVlcnksIGZyYWdtZW50SWRlbnRpZmllcn0gPSBleHBvcnRzLnBhcnNlVXJsKGlucHV0LCBvcHRpb25zKTtcblx0cmV0dXJuIGV4cG9ydHMuc3RyaW5naWZ5VXJsKHtcblx0XHR1cmwsXG5cdFx0cXVlcnk6IGZpbHRlck9iamVjdChxdWVyeSwgZmlsdGVyKSxcblx0XHRmcmFnbWVudElkZW50aWZpZXJcblx0fSwgb3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmV4Y2x1ZGUgPSAoaW5wdXQsIGZpbHRlciwgb3B0aW9ucykgPT4ge1xuXHRjb25zdCBleGNsdXNpb25GaWx0ZXIgPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBrZXkgPT4gIWZpbHRlci5pbmNsdWRlcyhrZXkpIDogKGtleSwgdmFsdWUpID0+ICFmaWx0ZXIoa2V5LCB2YWx1ZSk7XG5cblx0cmV0dXJuIGV4cG9ydHMucGljayhpbnB1dCwgZXhjbHVzaW9uRmlsdGVyLCBvcHRpb25zKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJ2YXIgdXJsID0gcmVxdWlyZShcInVybFwiKTtcbnZhciBVUkwgPSB1cmwuVVJMO1xudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoXCJzdHJlYW1cIikuV3JpdGFibGU7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCIuL2RlYnVnXCIpO1xuXG4vLyBDcmVhdGUgaGFuZGxlcnMgdGhhdCBwYXNzIGV2ZW50cyBmcm9tIG5hdGl2ZSByZXF1ZXN0c1xudmFyIGV2ZW50cyA9IFtcImFib3J0XCIsIFwiYWJvcnRlZFwiLCBcImNvbm5lY3RcIiwgXCJlcnJvclwiLCBcInNvY2tldFwiLCBcInRpbWVvdXRcIl07XG52YXIgZXZlbnRIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnRIYW5kbGVyc1tldmVudF0gPSBmdW5jdGlvbiAoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHRoaXMuX3JlZGlyZWN0YWJsZS5lbWl0KGV2ZW50LCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgfTtcbn0pO1xuXG4vLyBFcnJvciB0eXBlcyB3aXRoIGNvZGVzXG52YXIgUmVkaXJlY3Rpb25FcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfUkVESVJFQ1RJT05fRkFJTFVSRVwiLFxuICBcIlJlZGlyZWN0ZWQgcmVxdWVzdCBmYWlsZWRcIlxuKTtcbnZhciBUb29NYW55UmVkaXJlY3RzRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUU1wiLFxuICBcIk1heGltdW0gbnVtYmVyIG9mIHJlZGlyZWN0cyBleGNlZWRlZFwiXG4pO1xudmFyIE1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9NQVhfQk9EWV9MRU5HVEhfRVhDRUVERURcIixcbiAgXCJSZXF1ZXN0IGJvZHkgbGFyZ2VyIHRoYW4gbWF4Qm9keUxlbmd0aCBsaW1pdFwiXG4pO1xudmFyIFdyaXRlQWZ0ZXJFbmRFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORFwiLFxuICBcIndyaXRlIGFmdGVyIGVuZFwiXG4pO1xuXG4vLyBBbiBIVFRQKFMpIHJlcXVlc3QgdGhhdCBjYW4gYmUgcmVkaXJlY3RlZFxuZnVuY3Rpb24gUmVkaXJlY3RhYmxlUmVxdWVzdChvcHRpb25zLCByZXNwb25zZUNhbGxiYWNrKSB7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJlcXVlc3RcbiAgV3JpdGFibGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5fc2FuaXRpemVPcHRpb25zKG9wdGlvbnMpO1xuICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5fZW5kaW5nID0gZmFsc2U7XG4gIHRoaXMuX3JlZGlyZWN0Q291bnQgPSAwO1xuICB0aGlzLl9yZWRpcmVjdHMgPSBbXTtcbiAgdGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggPSAwO1xuICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcblxuICAvLyBBdHRhY2ggYSBjYWxsYmFjayBpZiBwYXNzZWRcbiAgaWYgKHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICB0aGlzLm9uKFwicmVzcG9uc2VcIiwgcmVzcG9uc2VDYWxsYmFjayk7XG4gIH1cblxuICAvLyBSZWFjdCB0byByZXNwb25zZXMgb2YgbmF0aXZlIHJlcXVlc3RzXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fb25OYXRpdmVSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHNlbGYuX3Byb2Nlc3NSZXNwb25zZShyZXNwb25zZSk7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSB0aGUgZmlyc3QgcmVxdWVzdFxuICB0aGlzLl9wZXJmb3JtUmVxdWVzdCgpO1xufVxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5cblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICBhYm9ydFJlcXVlc3QodGhpcy5fY3VycmVudFJlcXVlc3QpO1xuICB0aGlzLmVtaXQoXCJhYm9ydFwiKTtcbn07XG5cbi8vIFdyaXRlcyBidWZmZXJlZCBkYXRhIHRvIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgLy8gV3JpdGluZyBpcyBub3QgYWxsb3dlZCBpZiBlbmQgaGFzIGJlZW4gY2FsbGVkXG4gIGlmICh0aGlzLl9lbmRpbmcpIHtcbiAgICB0aHJvdyBuZXcgV3JpdGVBZnRlckVuZEVycm9yKCk7XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBpbnB1dCBhbmQgc2hpZnQgcGFyYW1ldGVycyBpZiBuZWNlc3NhcnlcbiAgaWYgKCEodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgKFwibGVuZ3RoXCIgaW4gZGF0YSkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImRhdGEgc2hvdWxkIGJlIGEgc3RyaW5nLCBCdWZmZXIgb3IgVWludDhBcnJheVwiKTtcbiAgfVxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYWxsYmFjayA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIC8vIElnbm9yZSBlbXB0eSBidWZmZXJzLCBzaW5jZSB3cml0aW5nIHRoZW0gZG9lc24ndCBpbnZva2UgdGhlIGNhbGxiYWNrXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMjIwNjZcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gT25seSB3cml0ZSB3aGVuIHdlIGRvbid0IGV4Y2VlZCB0aGUgbWF4aW11bSBib2R5IGxlbmd0aFxuICBpZiAodGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggKyBkYXRhLmxlbmd0aCA8PSB0aGlzLl9vcHRpb25zLm1heEJvZHlMZW5ndGgpIHtcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMucHVzaCh7IGRhdGE6IGRhdGEsIGVuY29kaW5nOiBlbmNvZGluZyB9KTtcbiAgICB0aGlzLl9jdXJyZW50UmVxdWVzdC53cml0ZShkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spO1xuICB9XG4gIC8vIEVycm9yIHdoZW4gd2UgZXhjZWVkIHRoZSBtYXhpbXVtIGJvZHkgbGVuZ3RoXG4gIGVsc2Uge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBNYXhCb2R5TGVuZ3RoRXhjZWVkZWRFcnJvcigpKTtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cbn07XG5cbi8vIEVuZHMgdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgLy8gU2hpZnQgcGFyYW1ldGVycyBpZiBuZWNlc3NhcnlcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYWxsYmFjayA9IGRhdGE7XG4gICAgZGF0YSA9IGVuY29kaW5nID0gbnVsbDtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgLy8gV3JpdGUgZGF0YSBpZiBuZWVkZWQgYW5kIGVuZFxuICBpZiAoIWRhdGEpIHtcbiAgICB0aGlzLl9lbmRlZCA9IHRoaXMuX2VuZGluZyA9IHRydWU7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3QuZW5kKG51bGwsIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnRSZXF1ZXN0ID0gdGhpcy5fY3VycmVudFJlcXVlc3Q7XG4gICAgdGhpcy53cml0ZShkYXRhLCBlbmNvZGluZywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5fZW5kZWQgPSB0cnVlO1xuICAgICAgY3VycmVudFJlcXVlc3QuZW5kKG51bGwsIG51bGwsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICB0aGlzLl9lbmRpbmcgPSB0cnVlO1xuICB9XG59O1xuXG4vLyBTZXRzIGEgaGVhZGVyIHZhbHVlIG9uIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5zZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fb3B0aW9ucy5oZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LnNldEhlYWRlcihuYW1lLCB2YWx1ZSk7XG59O1xuXG4vLyBDbGVhcnMgYSBoZWFkZXIgdmFsdWUgb24gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnJlbW92ZUhlYWRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmhlYWRlcnNbbmFtZV07XG4gIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUhlYWRlcihuYW1lKTtcbn07XG5cbi8vIEdsb2JhbCB0aW1lb3V0IGZvciBhbGwgdW5kZXJseWluZyByZXF1ZXN0c1xuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uIChtc2VjcywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIERlc3Ryb3lzIHRoZSBzb2NrZXQgb24gdGltZW91dFxuICBmdW5jdGlvbiBkZXN0cm95T25UaW1lb3V0KHNvY2tldCkge1xuICAgIHNvY2tldC5zZXRUaW1lb3V0KG1zZWNzKTtcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoXCJ0aW1lb3V0XCIsIHNvY2tldC5kZXN0cm95KTtcbiAgICBzb2NrZXQuYWRkTGlzdGVuZXIoXCJ0aW1lb3V0XCIsIHNvY2tldC5kZXN0cm95KTtcbiAgfVxuXG4gIC8vIFNldHMgdXAgYSB0aW1lciB0byB0cmlnZ2VyIGEgdGltZW91dCBldmVudFxuICBmdW5jdGlvbiBzdGFydFRpbWVyKHNvY2tldCkge1xuICAgIGlmIChzZWxmLl90aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5fdGltZW91dCk7XG4gICAgfVxuICAgIHNlbGYuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdChcInRpbWVvdXRcIik7XG4gICAgICBjbGVhclRpbWVyKCk7XG4gICAgfSwgbXNlY3MpO1xuICAgIGRlc3Ryb3lPblRpbWVvdXQoc29ja2V0KTtcbiAgfVxuXG4gIC8vIFN0b3BzIGEgdGltZW91dCBmcm9tIHRyaWdnZXJpbmdcbiAgZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgICAvLyBDbGVhciB0aGUgdGltZW91dFxuICAgIGlmIChzZWxmLl90aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5fdGltZW91dCk7XG4gICAgICBzZWxmLl90aW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBhbGwgYXR0YWNoZWQgbGlzdGVuZXJzXG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIsIGNsZWFyVGltZXIpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBjbGVhclRpbWVyKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwicmVzcG9uc2VcIiwgY2xlYXJUaW1lcik7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGlmICghc2VsZi5zb2NrZXQpIHtcbiAgICAgIHNlbGYuX2N1cnJlbnRSZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKFwic29ja2V0XCIsIHN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEF0dGFjaCBjYWxsYmFjayBpZiBwYXNzZWRcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbihcInRpbWVvdXRcIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU3RhcnQgdGhlIHRpbWVyIGlmIG9yIHdoZW4gdGhlIHNvY2tldCBpcyBvcGVuZWRcbiAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgc3RhcnRUaW1lcih0aGlzLnNvY2tldCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3Qub25jZShcInNvY2tldFwiLCBzdGFydFRpbWVyKTtcbiAgfVxuXG4gIC8vIENsZWFuIHVwIG9uIGV2ZW50c1xuICB0aGlzLm9uKFwic29ja2V0XCIsIGRlc3Ryb3lPblRpbWVvdXQpO1xuICB0aGlzLm9uKFwiYWJvcnRcIiwgY2xlYXJUaW1lcik7XG4gIHRoaXMub24oXCJlcnJvclwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbihcInJlc3BvbnNlXCIsIGNsZWFyVGltZXIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gUHJveHkgYWxsIG90aGVyIHB1YmxpYyBDbGllbnRSZXF1ZXN0IG1ldGhvZHNcbltcbiAgXCJmbHVzaEhlYWRlcnNcIiwgXCJnZXRIZWFkZXJcIixcbiAgXCJzZXROb0RlbGF5XCIsIFwic2V0U29ja2V0S2VlcEFsaXZlXCIsXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICBSZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFJlcXVlc3RbbWV0aG9kXShhLCBiKTtcbiAgfTtcbn0pO1xuXG4vLyBQcm94eSBhbGwgcHVibGljIENsaWVudFJlcXVlc3QgcHJvcGVydGllc1xuW1wiYWJvcnRlZFwiLCBcImNvbm5lY3Rpb25cIiwgXCJzb2NrZXRcIl0uZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLCBwcm9wZXJ0eSwge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY3VycmVudFJlcXVlc3RbcHJvcGVydHldOyB9LFxuICB9KTtcbn0pO1xuXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fc2FuaXRpemVPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgLy8gRW5zdXJlIGhlYWRlcnMgYXJlIGFsd2F5cyBwcmVzZW50XG4gIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0ge307XG4gIH1cblxuICAvLyBTaW5jZSBodHRwLnJlcXVlc3QgdHJlYXRzIGhvc3QgYXMgYW4gYWxpYXMgb2YgaG9zdG5hbWUsXG4gIC8vIGJ1dCB0aGUgdXJsIG1vZHVsZSBpbnRlcnByZXRzIGhvc3QgYXMgaG9zdG5hbWUgcGx1cyBwb3J0LFxuICAvLyBlbGltaW5hdGUgdGhlIGhvc3QgcHJvcGVydHkgdG8gYXZvaWQgY29uZnVzaW9uLlxuICBpZiAob3B0aW9ucy5ob3N0KSB7XG4gICAgLy8gVXNlIGhvc3RuYW1lIGlmIHNldCwgYmVjYXVzZSBpdCBoYXMgcHJlY2VkZW5jZVxuICAgIGlmICghb3B0aW9ucy5ob3N0bmFtZSkge1xuICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdDtcbiAgICB9XG4gICAgZGVsZXRlIG9wdGlvbnMuaG9zdDtcbiAgfVxuXG4gIC8vIENvbXBsZXRlIHRoZSBVUkwgb2JqZWN0IHdoZW4gbmVjZXNzYXJ5XG4gIGlmICghb3B0aW9ucy5wYXRobmFtZSAmJiBvcHRpb25zLnBhdGgpIHtcbiAgICB2YXIgc2VhcmNoUG9zID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hQb3MgPCAwKSB7XG4gICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc3Vic3RyaW5nKDAsIHNlYXJjaFBvcyk7XG4gICAgICBvcHRpb25zLnNlYXJjaCA9IG9wdGlvbnMucGF0aC5zdWJzdHJpbmcoc2VhcmNoUG9zKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gRXhlY3V0ZXMgdGhlIG5leHQgbmF0aXZlIHJlcXVlc3QgKGluaXRpYWwgb3IgcmVkaXJlY3QpXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fcGVyZm9ybVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIExvYWQgdGhlIG5hdGl2ZSBwcm90b2NvbFxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLl9vcHRpb25zLnByb3RvY29sO1xuICB2YXIgbmF0aXZlUHJvdG9jb2wgPSB0aGlzLl9vcHRpb25zLm5hdGl2ZVByb3RvY29sc1twcm90b2NvbF07XG4gIGlmICghbmF0aXZlUHJvdG9jb2wpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgcHJvdG9jb2wgXCIgKyBwcm90b2NvbCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIHNwZWNpZmllZCwgdXNlIHRoZSBhZ2VudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm90b2NvbFxuICAvLyAoSFRUUCBhbmQgSFRUUFMgdXNlIGRpZmZlcmVudCB0eXBlcyBvZiBhZ2VudHMpXG4gIGlmICh0aGlzLl9vcHRpb25zLmFnZW50cykge1xuICAgIHZhciBzY2hlbWUgPSBwcm90b2NvbC5zdWJzdHIoMCwgcHJvdG9jb2wubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5fb3B0aW9ucy5hZ2VudCA9IHRoaXMuX29wdGlvbnMuYWdlbnRzW3NjaGVtZV07XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIG5hdGl2ZSByZXF1ZXN0XG4gIHZhciByZXF1ZXN0ID0gdGhpcy5fY3VycmVudFJlcXVlc3QgPVxuICAgICAgICBuYXRpdmVQcm90b2NvbC5yZXF1ZXN0KHRoaXMuX29wdGlvbnMsIHRoaXMuX29uTmF0aXZlUmVzcG9uc2UpO1xuICB0aGlzLl9jdXJyZW50VXJsID0gdXJsLmZvcm1hdCh0aGlzLl9vcHRpb25zKTtcblxuICAvLyBTZXQgdXAgZXZlbnQgaGFuZGxlcnNcbiAgcmVxdWVzdC5fcmVkaXJlY3RhYmxlID0gdGhpcztcbiAgZm9yICh2YXIgZSA9IDA7IGUgPCBldmVudHMubGVuZ3RoOyBlKyspIHtcbiAgICByZXF1ZXN0Lm9uKGV2ZW50c1tlXSwgZXZlbnRIYW5kbGVyc1tldmVudHNbZV1dKTtcbiAgfVxuXG4gIC8vIEVuZCBhIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICAvLyAoVGhlIGZpcnN0IHJlcXVlc3QgbXVzdCBiZSBlbmRlZCBleHBsaWNpdGx5IHdpdGggUmVkaXJlY3RhYmxlUmVxdWVzdCNlbmQpXG4gIGlmICh0aGlzLl9pc1JlZGlyZWN0KSB7XG4gICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgZW50aXR5IGFuZCBlbmQuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYnVmZmVycyA9IHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycztcbiAgICAoZnVuY3Rpb24gd3JpdGVOZXh0KGVycm9yKSB7XG4gICAgICAvLyBPbmx5IHdyaXRlIGlmIHRoaXMgcmVxdWVzdCBoYXMgbm90IGJlZW4gcmVkaXJlY3RlZCB5ZXRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocmVxdWVzdCA9PT0gc2VsZi5fY3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgLy8gUmVwb3J0IGFueSB3cml0ZSBlcnJvcnNcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXcml0ZSB0aGUgbmV4dCBidWZmZXIgaWYgdGhlcmUgYXJlIHN0aWxsIGxlZnRcbiAgICAgICAgZWxzZSBpZiAoaSA8IGJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbaSsrXTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmICghcmVxdWVzdC5maW5pc2hlZCkge1xuICAgICAgICAgICAgcmVxdWVzdC53cml0ZShidWZmZXIuZGF0YSwgYnVmZmVyLmVuY29kaW5nLCB3cml0ZU5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbmQgdGhlIHJlcXVlc3QgaWYgYGVuZGAgaGFzIGJlZW4gY2FsbGVkIG9uIHVzXG4gICAgICAgIGVsc2UgaWYgKHNlbGYuX2VuZGVkKSB7XG4gICAgICAgICAgcmVxdWVzdC5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0oKSk7XG4gIH1cbn07XG5cbi8vIFByb2Nlc3NlcyBhIHJlc3BvbnNlIGZyb20gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLl9wcm9jZXNzUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgLy8gU3RvcmUgdGhlIHJlZGlyZWN0ZWQgcmVzcG9uc2VcbiAgdmFyIHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICBpZiAodGhpcy5fb3B0aW9ucy50cmFja1JlZGlyZWN0cykge1xuICAgIHRoaXMuX3JlZGlyZWN0cy5wdXNoKHtcbiAgICAgIHVybDogdGhpcy5fY3VycmVudFVybCxcbiAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gUkZDNzIzMcKnNi40OiBUaGUgM3h4IChSZWRpcmVjdGlvbikgY2xhc3Mgb2Ygc3RhdHVzIGNvZGUgaW5kaWNhdGVzXG4gIC8vIHRoYXQgZnVydGhlciBhY3Rpb24gbmVlZHMgdG8gYmUgdGFrZW4gYnkgdGhlIHVzZXIgYWdlbnQgaW4gb3JkZXIgdG9cbiAgLy8gZnVsZmlsbCB0aGUgcmVxdWVzdC4gSWYgYSBMb2NhdGlvbiBoZWFkZXIgZmllbGQgaXMgcHJvdmlkZWQsXG4gIC8vIHRoZSB1c2VyIGFnZW50IE1BWSBhdXRvbWF0aWNhbGx5IHJlZGlyZWN0IGl0cyByZXF1ZXN0IHRvIHRoZSBVUklcbiAgLy8gcmVmZXJlbmNlZCBieSB0aGUgTG9jYXRpb24gZmllbGQgdmFsdWUsXG4gIC8vIGV2ZW4gaWYgdGhlIHNwZWNpZmljIHN0YXR1cyBjb2RlIGlzIG5vdCB1bmRlcnN0b29kLlxuXG4gIC8vIElmIHRoZSByZXNwb25zZSBpcyBub3QgYSByZWRpcmVjdDsgcmV0dXJuIGl0IGFzLWlzXG4gIHZhciBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gIGlmICghbG9jYXRpb24gfHwgdGhpcy5fb3B0aW9ucy5mb2xsb3dSZWRpcmVjdHMgPT09IGZhbHNlIHx8XG4gICAgICBzdGF0dXNDb2RlIDwgMzAwIHx8IHN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgcmVzcG9uc2UucmVzcG9uc2VVcmwgPSB0aGlzLl9jdXJyZW50VXJsO1xuICAgIHJlc3BvbnNlLnJlZGlyZWN0cyA9IHRoaXMuX3JlZGlyZWN0cztcbiAgICB0aGlzLmVtaXQoXCJyZXNwb25zZVwiLCByZXNwb25zZSk7XG5cbiAgICAvLyBDbGVhbiB1cFxuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LCBzbyBhYm9ydCB0aGUgY3VycmVudCByZXF1ZXN0XG4gIGFib3J0UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCk7XG4gIC8vIERpc2NhcmQgdGhlIHJlbWFpbmRlciBvZiB0aGUgcmVzcG9uc2UgdG8gYXZvaWQgd2FpdGluZyBmb3IgZGF0YVxuICByZXNwb25zZS5kZXN0cm95KCk7XG5cbiAgLy8gUkZDNzIzMcKnNi40OiBBIGNsaWVudCBTSE9VTEQgZGV0ZWN0IGFuZCBpbnRlcnZlbmVcbiAgLy8gaW4gY3ljbGljYWwgcmVkaXJlY3Rpb25zIChpLmUuLCBcImluZmluaXRlXCIgcmVkaXJlY3Rpb24gbG9vcHMpLlxuICBpZiAoKyt0aGlzLl9yZWRpcmVjdENvdW50ID4gdGhpcy5fb3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgVG9vTWFueVJlZGlyZWN0c0Vycm9yKCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJGQzcyMzHCpzYuNDogQXV0b21hdGljIHJlZGlyZWN0aW9uIG5lZWRzIHRvIGRvbmUgd2l0aFxuICAvLyBjYXJlIGZvciBtZXRob2RzIG5vdCBrbm93biB0byBiZSBzYWZlLCBb4oCmXVxuICAvLyBSRkM3MjMxwqc2LjQuMuKAkzM6IEZvciBoaXN0b3JpY2FsIHJlYXNvbnMsIGEgdXNlciBhZ2VudCBNQVkgY2hhbmdlXG4gIC8vIHRoZSByZXF1ZXN0IG1ldGhvZCBmcm9tIFBPU1QgdG8gR0VUIGZvciB0aGUgc3Vic2VxdWVudCByZXF1ZXN0LlxuICBpZiAoKHN0YXR1c0NvZGUgPT09IDMwMSB8fCBzdGF0dXNDb2RlID09PSAzMDIpICYmIHRoaXMuX29wdGlvbnMubWV0aG9kID09PSBcIlBPU1RcIiB8fFxuICAgICAgLy8gUkZDNzIzMcKnNi40LjQ6IFRoZSAzMDMgKFNlZSBPdGhlcikgc3RhdHVzIGNvZGUgaW5kaWNhdGVzIHRoYXRcbiAgICAgIC8vIHRoZSBzZXJ2ZXIgaXMgcmVkaXJlY3RpbmcgdGhlIHVzZXIgYWdlbnQgdG8gYSBkaWZmZXJlbnQgcmVzb3VyY2UgW+KApl1cbiAgICAgIC8vIEEgdXNlciBhZ2VudCBjYW4gcGVyZm9ybSBhIHJldHJpZXZhbCByZXF1ZXN0IHRhcmdldGluZyB0aGF0IFVSSVxuICAgICAgLy8gKGEgR0VUIG9yIEhFQUQgcmVxdWVzdCBpZiB1c2luZyBIVFRQKSBb4oCmXVxuICAgICAgKHN0YXR1c0NvZGUgPT09IDMwMykgJiYgIS9eKD86R0VUfEhFQUQpJC8udGVzdCh0aGlzLl9vcHRpb25zLm1ldGhvZCkpIHtcbiAgICB0aGlzLl9vcHRpb25zLm1ldGhvZCA9IFwiR0VUXCI7XG4gICAgLy8gRHJvcCBhIHBvc3NpYmxlIGVudGl0eSBhbmQgaGVhZGVycyByZWxhdGVkIHRvIGl0XG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzID0gW107XG4gICAgcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKC9eY29udGVudC0vaSwgdGhpcy5fb3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIC8vIERyb3AgdGhlIEhvc3QgaGVhZGVyLCBhcyB0aGUgcmVkaXJlY3QgbWlnaHQgbGVhZCB0byBhIGRpZmZlcmVudCBob3N0XG4gIHZhciBjdXJyZW50SG9zdEhlYWRlciA9IHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmhvc3QkL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycyk7XG5cbiAgLy8gSWYgdGhlIHJlZGlyZWN0IGlzIHJlbGF0aXZlLCBjYXJyeSBvdmVyIHRoZSBob3N0IG9mIHRoZSBsYXN0IHJlcXVlc3RcbiAgdmFyIGN1cnJlbnRVcmxQYXJ0cyA9IHVybC5wYXJzZSh0aGlzLl9jdXJyZW50VXJsKTtcbiAgdmFyIGN1cnJlbnRIb3N0ID0gY3VycmVudEhvc3RIZWFkZXIgfHwgY3VycmVudFVybFBhcnRzLmhvc3Q7XG4gIHZhciBjdXJyZW50VXJsID0gL15cXHcrOi8udGVzdChsb2NhdGlvbikgPyB0aGlzLl9jdXJyZW50VXJsIDpcbiAgICB1cmwuZm9ybWF0KE9iamVjdC5hc3NpZ24oY3VycmVudFVybFBhcnRzLCB7IGhvc3Q6IGN1cnJlbnRIb3N0IH0pKTtcblxuICAvLyBEZXRlcm1pbmUgdGhlIFVSTCBvZiB0aGUgcmVkaXJlY3Rpb25cbiAgdmFyIHJlZGlyZWN0VXJsO1xuICB0cnkge1xuICAgIHJlZGlyZWN0VXJsID0gdXJsLnJlc29sdmUoY3VycmVudFVybCwgbG9jYXRpb24pO1xuICB9XG4gIGNhdGNoIChjYXVzZSkge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBSZWRpcmVjdGlvbkVycm9yKGNhdXNlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHRoZSByZWRpcmVjdGVkIHJlcXVlc3RcbiAgZGVidWcoXCJyZWRpcmVjdGluZyB0b1wiLCByZWRpcmVjdFVybCk7XG4gIHRoaXMuX2lzUmVkaXJlY3QgPSB0cnVlO1xuICB2YXIgcmVkaXJlY3RVcmxQYXJ0cyA9IHVybC5wYXJzZShyZWRpcmVjdFVybCk7XG4gIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgcmVkaXJlY3RVcmxQYXJ0cyk7XG5cbiAgLy8gRHJvcCBjb25maWRlbnRpYWwgaGVhZGVycyB3aGVuIHJlZGlyZWN0aW5nIHRvIGEgbGVzcyBzZWN1cmUgcHJvdG9jb2xcbiAgLy8gb3IgdG8gYSBkaWZmZXJlbnQgZG9tYWluIHRoYXQgaXMgbm90IGEgc3VwZXJkb21haW5cbiAgaWYgKHJlZGlyZWN0VXJsUGFydHMucHJvdG9jb2wgIT09IGN1cnJlbnRVcmxQYXJ0cy5wcm90b2NvbCAmJlxuICAgICByZWRpcmVjdFVybFBhcnRzLnByb3RvY29sICE9PSBcImh0dHBzOlwiIHx8XG4gICAgIHJlZGlyZWN0VXJsUGFydHMuaG9zdCAhPT0gY3VycmVudEhvc3QgJiZcbiAgICAgIWlzU3ViZG9tYWluKHJlZGlyZWN0VXJsUGFydHMuaG9zdCwgY3VycmVudEhvc3QpKSB7XG4gICAgcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKC9eKD86YXV0aG9yaXphdGlvbnxjb29raWUpJC9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gRXZhbHVhdGUgdGhlIGJlZm9yZVJlZGlyZWN0IGNhbGxiYWNrXG4gIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5iZWZvcmVSZWRpcmVjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIHJlc3BvbnNlRGV0YWlscyA9IHsgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyB9O1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9vcHRpb25zLmJlZm9yZVJlZGlyZWN0LmNhbGwobnVsbCwgdGhpcy5fb3B0aW9ucywgcmVzcG9uc2VEZXRhaWxzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fc2FuaXRpemVPcHRpb25zKHRoaXMuX29wdGlvbnMpO1xuICB9XG5cbiAgLy8gUGVyZm9ybSB0aGUgcmVkaXJlY3RlZCByZXF1ZXN0XG4gIHRyeSB7XG4gICAgdGhpcy5fcGVyZm9ybVJlcXVlc3QoKTtcbiAgfVxuICBjYXRjaCAoY2F1c2UpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgUmVkaXJlY3Rpb25FcnJvcihjYXVzZSkpO1xuICB9XG59O1xuXG4vLyBXcmFwcyB0aGUga2V5L3ZhbHVlIG9iamVjdCBvZiBwcm90b2NvbHMgd2l0aCByZWRpcmVjdCBmdW5jdGlvbmFsaXR5XG5mdW5jdGlvbiB3cmFwKHByb3RvY29scykge1xuICAvLyBEZWZhdWx0IHNldHRpbmdzXG4gIHZhciBleHBvcnRzID0ge1xuICAgIG1heFJlZGlyZWN0czogMjEsXG4gICAgbWF4Qm9keUxlbmd0aDogMTAgKiAxMDI0ICogMTAyNCxcbiAgfTtcblxuICAvLyBXcmFwIGVhY2ggcHJvdG9jb2xcbiAgdmFyIG5hdGl2ZVByb3RvY29scyA9IHt9O1xuICBPYmplY3Qua2V5cyhwcm90b2NvbHMpLmZvckVhY2goZnVuY3Rpb24gKHNjaGVtZSkge1xuICAgIHZhciBwcm90b2NvbCA9IHNjaGVtZSArIFwiOlwiO1xuICAgIHZhciBuYXRpdmVQcm90b2NvbCA9IG5hdGl2ZVByb3RvY29sc1twcm90b2NvbF0gPSBwcm90b2NvbHNbc2NoZW1lXTtcbiAgICB2YXIgd3JhcHBlZFByb3RvY29sID0gZXhwb3J0c1tzY2hlbWVdID0gT2JqZWN0LmNyZWF0ZShuYXRpdmVQcm90b2NvbCk7XG5cbiAgICAvLyBFeGVjdXRlcyBhIHJlcXVlc3QsIGZvbGxvd2luZyByZWRpcmVjdHNcbiAgICBmdW5jdGlvbiByZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgLy8gUGFyc2UgcGFyYW1ldGVyc1xuICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgdXJsU3RyID0gaW5wdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5wdXQgPSB1cmxUb09wdGlvbnMobmV3IFVSTCh1cmxTdHIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBpbnB1dCA9IHVybC5wYXJzZSh1cmxTdHIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChVUkwgJiYgKGlucHV0IGluc3RhbmNlb2YgVVJMKSkge1xuICAgICAgICBpbnB1dCA9IHVybFRvT3B0aW9ucyhpbnB1dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gaW5wdXQ7XG4gICAgICAgIGlucHV0ID0geyBwcm90b2NvbDogcHJvdG9jb2wgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBkZWZhdWx0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtYXhSZWRpcmVjdHM6IGV4cG9ydHMubWF4UmVkaXJlY3RzLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBleHBvcnRzLm1heEJvZHlMZW5ndGgsXG4gICAgICB9LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLm5hdGl2ZVByb3RvY29scyA9IG5hdGl2ZVByb3RvY29scztcblxuICAgICAgYXNzZXJ0LmVxdWFsKG9wdGlvbnMucHJvdG9jb2wsIHByb3RvY29sLCBcInByb3RvY29sIG1pc21hdGNoXCIpO1xuICAgICAgZGVidWcoXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG5ldyBSZWRpcmVjdGFibGVSZXF1ZXN0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlcyBhIEdFVCByZXF1ZXN0LCBmb2xsb3dpbmcgcmVkaXJlY3RzXG4gICAgZnVuY3Rpb24gZ2V0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHdyYXBwZWRSZXF1ZXN0ID0gd3JhcHBlZFByb3RvY29sLnJlcXVlc3QoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIHdyYXBwZWRSZXF1ZXN0LmVuZCgpO1xuICAgICAgcmV0dXJuIHdyYXBwZWRSZXF1ZXN0O1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSB0aGUgcHJvcGVydGllcyBvbiB0aGUgd3JhcHBlZCBwcm90b2NvbFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdyYXBwZWRQcm90b2NvbCwge1xuICAgICAgcmVxdWVzdDogeyB2YWx1ZTogcmVxdWVzdCwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgZ2V0OiB7IHZhbHVlOiBnZXQsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBleHBvcnRzO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gbm9vcCgpIHsgLyogZW1wdHkgKi8gfVxuXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL21hc3Rlci9saWIvaW50ZXJuYWwvdXJsLmpzXG5mdW5jdGlvbiB1cmxUb09wdGlvbnModXJsT2JqZWN0KSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIHByb3RvY29sOiB1cmxPYmplY3QucHJvdG9jb2wsXG4gICAgaG9zdG5hbWU6IHVybE9iamVjdC5ob3N0bmFtZS5zdGFydHNXaXRoKFwiW1wiKSA/XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdXJsT2JqZWN0Lmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6XG4gICAgICB1cmxPYmplY3QuaG9zdG5hbWUsXG4gICAgaGFzaDogdXJsT2JqZWN0Lmhhc2gsXG4gICAgc2VhcmNoOiB1cmxPYmplY3Quc2VhcmNoLFxuICAgIHBhdGhuYW1lOiB1cmxPYmplY3QucGF0aG5hbWUsXG4gICAgcGF0aDogdXJsT2JqZWN0LnBhdGhuYW1lICsgdXJsT2JqZWN0LnNlYXJjaCxcbiAgICBocmVmOiB1cmxPYmplY3QuaHJlZixcbiAgfTtcbiAgaWYgKHVybE9iamVjdC5wb3J0ICE9PSBcIlwiKSB7XG4gICAgb3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybE9iamVjdC5wb3J0KTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKHJlZ2V4LCBoZWFkZXJzKSB7XG4gIHZhciBsYXN0VmFsdWU7XG4gIGZvciAodmFyIGhlYWRlciBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKHJlZ2V4LnRlc3QoaGVhZGVyKSkge1xuICAgICAgbGFzdFZhbHVlID0gaGVhZGVyc1toZWFkZXJdO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChsYXN0VmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGxhc3RWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgP1xuICAgIHVuZGVmaW5lZCA6IFN0cmluZyhsYXN0VmFsdWUpLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIGRlZmF1bHRNZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIEN1c3RvbUVycm9yKGNhdXNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgaWYgKCFjYXVzZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gZGVmYXVsdE1lc3NhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5tZXNzYWdlID0gZGVmYXVsdE1lc3NhZ2UgKyBcIjogXCIgKyBjYXVzZS5tZXNzYWdlO1xuICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIH1cbiAgfVxuICBDdXN0b21FcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3VzdG9tRXJyb3I7XG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZS5uYW1lID0gXCJFcnJvciBbXCIgKyBjb2RlICsgXCJdXCI7XG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZS5jb2RlID0gY29kZTtcbiAgcmV0dXJuIEN1c3RvbUVycm9yO1xufVxuXG5mdW5jdGlvbiBhYm9ydFJlcXVlc3QocmVxdWVzdCkge1xuICBmb3IgKHZhciBlID0gMDsgZSA8IGV2ZW50cy5sZW5ndGg7IGUrKykge1xuICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoZXZlbnRzW2VdLCBldmVudEhhbmRsZXJzW2V2ZW50c1tlXV0pO1xuICB9XG4gIHJlcXVlc3Qub24oXCJlcnJvclwiLCBub29wKTtcbiAgcmVxdWVzdC5hYm9ydCgpO1xufVxuXG5mdW5jdGlvbiBpc1N1YmRvbWFpbihzdWJkb21haW4sIGRvbWFpbikge1xuICBjb25zdCBkb3QgPSBzdWJkb21haW4ubGVuZ3RoIC0gZG9tYWluLmxlbmd0aCAtIDE7XG4gIHJldHVybiBkb3QgPiAwICYmIHN1YmRvbWFpbltkb3RdID09PSBcIi5cIiAmJiBzdWJkb21haW4uZW5kc1dpdGgoZG9tYWluKTtcbn1cblxuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB3cmFwKHsgaHR0cDogaHR0cCwgaHR0cHM6IGh0dHBzIH0pO1xubW9kdWxlLmV4cG9ydHMud3JhcCA9IHdyYXA7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7IiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXHRjcmVhdGVEZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXHRcdGxldCBlbmFibGVPdmVycmlkZSA9IG51bGw7XG5cdFx0bGV0IG5hbWVzcGFjZXNDYWNoZTtcblx0XHRsZXQgZW5hYmxlZENhY2hlO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiAnJSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gY3JlYXRlRGVidWcuZGVzdHJveTsgLy8gWFhYIFRlbXBvcmFyeS4gV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVidWcsICdlbmFibGVkJywge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6ICgpID0+IHtcblx0XHRcdFx0aWYgKGVuYWJsZU92ZXJyaWRlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVuYWJsZU92ZXJyaWRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuYW1lc3BhY2VzQ2FjaGUgIT09IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMpIHtcblx0XHRcdFx0XHRuYW1lc3BhY2VzQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzO1xuXHRcdFx0XHRcdGVuYWJsZWRDYWNoZSA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbmFibGVkQ2FjaGU7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiB2ID0+IHtcblx0XHRcdFx0ZW5hYmxlT3ZlcnJpZGUgPSB2O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXHRcdGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0LyoqXG5cdCogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cblx0KiBYWFggSXQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cdCovXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxudmFyIEZPUkNFRCA9ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAn8KCutycuYXQoMCkgIT09ICfwoK63Jztcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIE1vY2sgRnVuY3Rpb25zXG5pbXBvcnQgd2VsY29tZSBmcm9tICcuLi9zcmMvY29tbWFuZHMvd2VsY29tZSc7XG5cbi8vIFJlYWwgRnVuY3Rpb25zXG5pbXBvcnQgZ2V0Rm9sZGVyQnlJZCBmcm9tICcuLi9zcmMvY29tbWFuZHMvZ2V0Rm9sZGVyQnlJZCc7XG5pbXBvcnQgY3JlYXRlRm9sZGVyIGZyb20gJy4uL3NyYy9jb21tYW5kcy9jcmVhdGVGb2xkZXInO1xuaW1wb3J0IHVwZGF0ZUZvbGRlck1ldGFkYXRhIGZyb20gJy4uL3NyYy9jb21tYW5kcy91cGRhdGVGb2xkZXJNZXRhZGF0YSc7XG5pbXBvcnQgZGVsZXRlRm9sZGVyIGZyb20gJy4uL3NyYy9jb21tYW5kcy9kZWxldGVGb2xkZXInO1xuaW1wb3J0IHVwbG9hZEZpbGVUb0ZvbGRlciBmcm9tICcuLi9zcmMvY29tbWFuZHMvdXBsb2FkRmlsZVRvRm9sZGVyJztcbmltcG9ydCBtb3ZlRm9sZGVyIGZyb20gJy4uL3NyYy9jb21tYW5kcy9tb3ZlRm9sZGVyJztcbmltcG9ydCBjcmVhdGVGaWxlIGZyb20gJy4uL3NyYy9jb21tYW5kcy9jcmVhdGVGaWxlJztcbmltcG9ydCBnZXRGaWxlQnlJZCBmcm9tICcuLi9zcmMvY29tbWFuZHMvZ2V0RmlsZUJ5SWQnO1xuaW1wb3J0IHVwZGF0ZUZpbGVNZXRhZGF0YSBmcm9tICcuLi9zcmMvY29tbWFuZHMvdXBkYXRlRmlsZU1ldGFkYXRhJztcbmltcG9ydCBtb3ZlRmlsZSBmcm9tICcuLi9zcmMvY29tbWFuZHMvbW92ZUZpbGUnO1xuaW1wb3J0IGRlbGV0ZUZpbGVGcm9tRm9sZGVyIGZyb20gJy4uL3NyYy9jb21tYW5kcy9kZWxldGVGaWxlRnJvbUZvbGRlcic7XG5pbXBvcnQgZGVsZXRlRmlsZUZyb21CdWNrZXQgZnJvbSAnLi4vc3JjL2NvbW1hbmRzL2RlbGV0ZUZpbGVGcm9tQnVja2V0JztcbmltcG9ydCBnZW5lcmF0ZVNoYXJlVG9rZW4gZnJvbSAnLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlU2hhcmVUb2tlbic7XG5pbXBvcnQgZG93bmxvYWRFbnRpdHlCeVRva2VuIGZyb20gJy4uL3NyYy9jb21tYW5kcy9kb3dubG9hZEVudGl0eUJ5VG9rZW4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlQ2xpZW50KGFwaUtleSA9ICduL2EnLCBzZWNyZXRBcGlLZXkgPSAnbi9hJykge1xuICBsZXQgY2xpZW50ID0ge307XG5cbiAgLy8gTW9jayBGdW5jdGlvbnNcbiAgY2xpZW50LndlbGNvbWUgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIHJldHVybiB3ZWxjb21lKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcblxuICAvLyBSZWFsIEZ1bmN0aW9uc1xuICBjbGllbnQuZ2V0Rm9sZGVyQnlJZCA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgcmV0dXJuIGdldEZvbGRlckJ5SWQoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpO1xuICB9O1xuICBjbGllbnQuY3JlYXRlRm9sZGVyID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gY3JlYXRlRm9sZGVyKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcbiAgY2xpZW50LnVwZGF0ZUZvbGRlck1ldGFkYXRhID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gdXBkYXRlRm9sZGVyTWV0YWRhdGEoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpO1xuICB9O1xuICBjbGllbnQuZGVsZXRlRm9sZGVyID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gZGVsZXRlRm9sZGVyKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcbiAgY2xpZW50LnVwbG9hZEZpbGVUb0ZvbGRlciA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgcmV0dXJuIHVwbG9hZEZpbGVUb0ZvbGRlcihhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSk7XG4gIH07XG4gIGNsaWVudC5tb3ZlRm9sZGVyID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gbW92ZUZvbGRlcihhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSk7XG4gIH07XG4gIGNsaWVudC5jcmVhdGVGaWxlID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gY3JlYXRlRmlsZShhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSk7XG4gIH07XG4gIGNsaWVudC5nZXRGaWxlQnlJZCA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgcmV0dXJuIGdldEZpbGVCeUlkKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcbiAgY2xpZW50LnVwZGF0ZUZpbGVNZXRhZGF0YSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgcmV0dXJuIHVwZGF0ZUZpbGVNZXRhZGF0YShhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSk7XG4gIH07XG4gIGNsaWVudC5tb3ZlRmlsZSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgcmV0dXJuIG1vdmVGaWxlKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcbiAgY2xpZW50LmRlbGV0ZUZpbGVGcm9tRm9sZGVyID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gZGVsZXRlRmlsZUZyb21Gb2xkZXIoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpO1xuICB9O1xuICBjbGllbnQuZGVsZXRlRmlsZUZyb21CdWNrZXQgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIHJldHVybiBkZWxldGVGaWxlRnJvbUJ1Y2tldChhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSk7XG4gIH07XG4gIGNsaWVudC5nZW5lcmF0ZVNoYXJlVG9rZW4gPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIHJldHVybiBnZW5lcmF0ZVNoYXJlVG9rZW4oYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpO1xuICB9O1xuICBjbGllbnQuZG93bmxvYWRFbnRpdHlCeVRva2VuID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICByZXR1cm4gZG93bmxvYWRFbnRpdHlCeVRva2VuKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KTtcbiAgfTtcbiAgcmV0dXJuIGNsaWVudDtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdlbGNvbWUoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpIHtcbiAgdmFsaWRhdGVBcGlLZXlzKGFwaUtleSwgc2VjcmV0QXBpS2V5KTtcblxuICB2YXIgY29uZmlnID0ge1xuICAgIG1ldGhvZDogJ2dldCcsXG4gICAgdXJsOiBgJHtiYXNlVXJsfS93ZWxjb21lYCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAneC1hcGktYWNjZXNzLWtleSc6IGJvZHkuYXBpQWNjZXNzS2V5LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBheGlvcyhjb25maWcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgdW5rbm93biBzZXJ2ZXIgcmVzcG9uc2Ugd2hpbGUgYXV0aGVudGljYXRpbmc6ICR7cmVzcG9uc2V9YCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICByZXN1bHQ6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRXJyb3IgPSBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIHJlamVjdChmb3JtYXR0ZWRFcnJvcik7XG4gICAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgY29uZmlnLnRyYW5zaXRpb25hbCAmJiBjb25maWcudHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG52YXIgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xudmFyIGh0dHBGb2xsb3cgPSByZXF1aXJlKCdmb2xsb3ctcmVkaXJlY3RzJykuaHR0cDtcbnZhciBodHRwc0ZvbGxvdyA9IHJlcXVpcmUoJ2ZvbGxvdy1yZWRpcmVjdHMnKS5odHRwcztcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcbnZhciB6bGliID0gcmVxdWlyZSgnemxpYicpO1xudmFyIHBrZyA9IHJlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIGlzSHR0cHMgPSAvaHR0cHM6Py87XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7aHR0cC5DbGllbnRSZXF1ZXN0QXJnc30gb3B0aW9uc1xuICogQHBhcmFtIHtBeGlvc1Byb3h5Q29uZmlnfSBwcm94eVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIHNldFByb3h5KG9wdGlvbnMsIHByb3h5LCBsb2NhdGlvbikge1xuICBvcHRpb25zLmhvc3RuYW1lID0gcHJveHkuaG9zdDtcbiAgb3B0aW9ucy5ob3N0ID0gcHJveHkuaG9zdDtcbiAgb3B0aW9ucy5wb3J0ID0gcHJveHkucG9ydDtcbiAgb3B0aW9ucy5wYXRoID0gbG9jYXRpb247XG5cbiAgLy8gQmFzaWMgcHJveHkgYXV0aG9yaXphdGlvblxuICBpZiAocHJveHkuYXV0aCkge1xuICAgIHZhciBiYXNlNjQgPSBCdWZmZXIuZnJvbShwcm94eS5hdXRoLnVzZXJuYW1lICsgJzonICsgcHJveHkuYXV0aC5wYXNzd29yZCwgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgb3B0aW9ucy5oZWFkZXJzWydQcm94eS1BdXRob3JpemF0aW9uJ10gPSAnQmFzaWMgJyArIGJhc2U2NDtcbiAgfVxuXG4gIC8vIElmIGEgcHJveHkgaXMgdXNlZCwgYW55IHJlZGlyZWN0cyBtdXN0IGFsc28gcGFzcyB0aHJvdWdoIHRoZSBwcm94eVxuICBvcHRpb25zLmJlZm9yZVJlZGlyZWN0ID0gZnVuY3Rpb24gYmVmb3JlUmVkaXJlY3QocmVkaXJlY3Rpb24pIHtcbiAgICByZWRpcmVjdGlvbi5oZWFkZXJzLmhvc3QgPSByZWRpcmVjdGlvbi5ob3N0O1xuICAgIHNldFByb3h5KHJlZGlyZWN0aW9uLCBwcm94eSwgcmVkaXJlY3Rpb24uaHJlZik7XG4gIH07XG59XG5cbi8qZXNsaW50IGNvbnNpc3RlbnQtcmV0dXJuOjAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBodHRwQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoSHR0cFJlcXVlc3QocmVzb2x2ZVByb21pc2UsIHJlamVjdFByb21pc2UpIHtcbiAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHZhbHVlKTtcbiAgICB9O1xuICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiByZWplY3QodmFsdWUpIHtcbiAgICAgIHJlamVjdFByb21pc2UodmFsdWUpO1xuICAgIH07XG4gICAgdmFyIGRhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgLy8gU2V0IFVzZXItQWdlbnQgKHJlcXVpcmVkIGJ5IHNvbWUgc2VydmVycylcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy82OVxuICAgIGlmICgnVXNlci1BZ2VudCcgaW4gaGVhZGVycyB8fCAndXNlci1hZ2VudCcgaW4gaGVhZGVycykge1xuICAgICAgLy8gVXNlci1BZ2VudCBpcyBzcGVjaWZpZWQ7IGhhbmRsZSBjYXNlIHdoZXJlIG5vIFVBIGhlYWRlciBpcyBkZXNpcmVkXG4gICAgICBpZiAoIWhlYWRlcnNbJ1VzZXItQWdlbnQnXSAmJiAhaGVhZGVyc1sndXNlci1hZ2VudCddKSB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzWydVc2VyLUFnZW50J107XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzWyd1c2VyLWFnZW50J107XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIHVzZSBzcGVjaWZpZWQgdmFsdWVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBzZXQgaGVhZGVyIGlmIGl0IGhhc24ndCBiZWVuIHNldCBpbiBjb25maWdcbiAgICAgIGhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9ICdheGlvcy8nICsgcGtnLnZlcnNpb247XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgIXV0aWxzLmlzU3RyZWFtKGRhdGEpKSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8uLi5cbiAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSkge1xuICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xuICAgICAgfSBlbHNlIGlmICh1dGlscy5pc1N0cmluZyhkYXRhKSkge1xuICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgJ3V0Zi04Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICAgICdEYXRhIGFmdGVyIHRyYW5zZm9ybWF0aW9uIG11c3QgYmUgYSBzdHJpbmcsIGFuIEFycmF5QnVmZmVyLCBhIEJ1ZmZlciwgb3IgYSBTdHJlYW0nLFxuICAgICAgICAgIGNvbmZpZ1xuICAgICAgICApKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIENvbnRlbnQtTGVuZ3RoIGhlYWRlciBpZiBkYXRhIGV4aXN0c1xuICAgICAgaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSA9IGRhdGEubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICB2YXIgYXV0aCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICBhdXRoID0gdXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZDtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSB1cmxcbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICB2YXIgcGFyc2VkID0gdXJsLnBhcnNlKGZ1bGxQYXRoKTtcbiAgICB2YXIgcHJvdG9jb2wgPSBwYXJzZWQucHJvdG9jb2wgfHwgJ2h0dHA6JztcblxuICAgIGlmICghYXV0aCAmJiBwYXJzZWQuYXV0aCkge1xuICAgICAgdmFyIHVybEF1dGggPSBwYXJzZWQuYXV0aC5zcGxpdCgnOicpO1xuICAgICAgdmFyIHVybFVzZXJuYW1lID0gdXJsQXV0aFswXSB8fCAnJztcbiAgICAgIHZhciB1cmxQYXNzd29yZCA9IHVybEF1dGhbMV0gfHwgJyc7XG4gICAgICBhdXRoID0gdXJsVXNlcm5hbWUgKyAnOicgKyB1cmxQYXNzd29yZDtcbiAgICB9XG5cbiAgICBpZiAoYXV0aCkge1xuICAgICAgZGVsZXRlIGhlYWRlcnMuQXV0aG9yaXphdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgaXNIdHRwc1JlcXVlc3QgPSBpc0h0dHBzLnRlc3QocHJvdG9jb2wpO1xuICAgIHZhciBhZ2VudCA9IGlzSHR0cHNSZXF1ZXN0ID8gY29uZmlnLmh0dHBzQWdlbnQgOiBjb25maWcuaHR0cEFnZW50O1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBidWlsZFVSTChwYXJzZWQucGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyksXG4gICAgICBtZXRob2Q6IGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBhZ2VudDogYWdlbnQsXG4gICAgICBhZ2VudHM6IHsgaHR0cDogY29uZmlnLmh0dHBBZ2VudCwgaHR0cHM6IGNvbmZpZy5odHRwc0FnZW50IH0sXG4gICAgICBhdXRoOiBhdXRoXG4gICAgfTtcblxuICAgIGlmIChjb25maWcuc29ja2V0UGF0aCkge1xuICAgICAgb3B0aW9ucy5zb2NrZXRQYXRoID0gY29uZmlnLnNvY2tldFBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBwYXJzZWQuaG9zdG5hbWU7XG4gICAgICBvcHRpb25zLnBvcnQgPSBwYXJzZWQucG9ydDtcbiAgICB9XG5cbiAgICB2YXIgcHJveHkgPSBjb25maWcucHJveHk7XG4gICAgaWYgKCFwcm94eSAmJiBwcm94eSAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBwcm94eUVudiA9IHByb3RvY29sLnNsaWNlKDAsIC0xKSArICdfcHJveHknO1xuICAgICAgdmFyIHByb3h5VXJsID0gcHJvY2Vzcy5lbnZbcHJveHlFbnZdIHx8IHByb2Nlc3MuZW52W3Byb3h5RW52LnRvVXBwZXJDYXNlKCldO1xuICAgICAgaWYgKHByb3h5VXJsKSB7XG4gICAgICAgIHZhciBwYXJzZWRQcm94eVVybCA9IHVybC5wYXJzZShwcm94eVVybCk7XG4gICAgICAgIHZhciBub1Byb3h5RW52ID0gcHJvY2Vzcy5lbnYubm9fcHJveHkgfHwgcHJvY2Vzcy5lbnYuTk9fUFJPWFk7XG4gICAgICAgIHZhciBzaG91bGRQcm94eSA9IHRydWU7XG5cbiAgICAgICAgaWYgKG5vUHJveHlFbnYpIHtcbiAgICAgICAgICB2YXIgbm9Qcm94eSA9IG5vUHJveHlFbnYuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gdHJpbShzKSB7XG4gICAgICAgICAgICByZXR1cm4gcy50cmltKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzaG91bGRQcm94eSA9ICFub1Byb3h5LnNvbWUoZnVuY3Rpb24gcHJveHlNYXRjaChwcm94eUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghcHJveHlFbGVtZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm94eUVsZW1lbnQgPT09ICcqJykge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm94eUVsZW1lbnRbMF0gPT09ICcuJyAmJlxuICAgICAgICAgICAgICAgIHBhcnNlZC5ob3N0bmFtZS5zdWJzdHIocGFyc2VkLmhvc3RuYW1lLmxlbmd0aCAtIHByb3h5RWxlbWVudC5sZW5ndGgpID09PSBwcm94eUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQuaG9zdG5hbWUgPT09IHByb3h5RWxlbWVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRQcm94eSkge1xuICAgICAgICAgIHByb3h5ID0ge1xuICAgICAgICAgICAgaG9zdDogcGFyc2VkUHJveHlVcmwuaG9zdG5hbWUsXG4gICAgICAgICAgICBwb3J0OiBwYXJzZWRQcm94eVVybC5wb3J0LFxuICAgICAgICAgICAgcHJvdG9jb2w6IHBhcnNlZFByb3h5VXJsLnByb3RvY29sXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChwYXJzZWRQcm94eVVybC5hdXRoKSB7XG4gICAgICAgICAgICB2YXIgcHJveHlVcmxBdXRoID0gcGFyc2VkUHJveHlVcmwuYXV0aC5zcGxpdCgnOicpO1xuICAgICAgICAgICAgcHJveHkuYXV0aCA9IHtcbiAgICAgICAgICAgICAgdXNlcm5hbWU6IHByb3h5VXJsQXV0aFswXSxcbiAgICAgICAgICAgICAgcGFzc3dvcmQ6IHByb3h5VXJsQXV0aFsxXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJveHkpIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycy5ob3N0ID0gcGFyc2VkLmhvc3RuYW1lICsgKHBhcnNlZC5wb3J0ID8gJzonICsgcGFyc2VkLnBvcnQgOiAnJyk7XG4gICAgICBzZXRQcm94eShvcHRpb25zLCBwcm94eSwgcHJvdG9jb2wgKyAnLy8nICsgcGFyc2VkLmhvc3RuYW1lICsgKHBhcnNlZC5wb3J0ID8gJzonICsgcGFyc2VkLnBvcnQgOiAnJykgKyBvcHRpb25zLnBhdGgpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc3BvcnQ7XG4gICAgdmFyIGlzSHR0cHNQcm94eSA9IGlzSHR0cHNSZXF1ZXN0ICYmIChwcm94eSA/IGlzSHR0cHMudGVzdChwcm94eS5wcm90b2NvbCkgOiB0cnVlKTtcbiAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCkge1xuICAgICAgdHJhbnNwb3J0ID0gY29uZmlnLnRyYW5zcG9ydDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMgPT09IDApIHtcbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNQcm94eSA/IGh0dHBzIDogaHR0cDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbmZpZy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgb3B0aW9ucy5tYXhSZWRpcmVjdHMgPSBjb25maWcubWF4UmVkaXJlY3RzO1xuICAgICAgfVxuICAgICAgdHJhbnNwb3J0ID0gaXNIdHRwc1Byb3h5ID8gaHR0cHNGb2xsb3cgOiBodHRwRm9sbG93O1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWF4Qm9keUxlbmd0aCA+IC0xKSB7XG4gICAgICBvcHRpb25zLm1heEJvZHlMZW5ndGggPSBjb25maWcubWF4Qm9keUxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIHJlcXVlc3RcbiAgICB2YXIgcmVxID0gdHJhbnNwb3J0LnJlcXVlc3Qob3B0aW9ucywgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzKSB7XG4gICAgICBpZiAocmVxLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgLy8gdW5jb21wcmVzcyB0aGUgcmVzcG9uc2UgYm9keSB0cmFuc3BhcmVudGx5IGlmIHJlcXVpcmVkXG4gICAgICB2YXIgc3RyZWFtID0gcmVzO1xuXG4gICAgICAvLyByZXR1cm4gdGhlIGxhc3QgcmVxdWVzdCBpbiBjYXNlIG9mIHJlZGlyZWN0c1xuICAgICAgdmFyIGxhc3RSZXF1ZXN0ID0gcmVzLnJlcSB8fCByZXE7XG5cblxuICAgICAgLy8gaWYgbm8gY29udGVudCwgaXMgSEVBRCByZXF1ZXN0IG9yIGRlY29tcHJlc3MgZGlzYWJsZWQgd2Ugc2hvdWxkIG5vdCBkZWNvbXByZXNzXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwNCAmJiBsYXN0UmVxdWVzdC5tZXRob2QgIT09ICdIRUFEJyAmJiBjb25maWcuZGVjb21wcmVzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgc3dpdGNoIChyZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSB7XG4gICAgICAgIC8qZXNsaW50IGRlZmF1bHQtY2FzZTowKi9cbiAgICAgICAgY2FzZSAnZ3ppcCc6XG4gICAgICAgIGNhc2UgJ2NvbXByZXNzJzpcbiAgICAgICAgY2FzZSAnZGVmbGF0ZSc6XG4gICAgICAgIC8vIGFkZCB0aGUgdW56aXBwZXIgdG8gdGhlIGJvZHkgc3RyZWFtIHByb2Nlc3NpbmcgcGlwZWxpbmVcbiAgICAgICAgICBzdHJlYW0gPSBzdHJlYW0ucGlwZSh6bGliLmNyZWF0ZVVuemlwKCkpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50LWVuY29kaW5nIGluIG9yZGVyIHRvIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG4gICAgICAgIGhlYWRlcnM6IHJlcy5oZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogbGFzdFJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICByZXNwb25zZS5kYXRhID0gc3RyZWFtO1xuICAgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzcG9uc2VCdWZmZXIgPSBbXTtcbiAgICAgICAgdmFyIHRvdGFsUmVzcG9uc2VCeXRlcyA9IDA7XG4gICAgICAgIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIGhhbmRsZVN0cmVhbURhdGEoY2h1bmspIHtcbiAgICAgICAgICByZXNwb25zZUJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgICAgICB0b3RhbFJlc3BvbnNlQnl0ZXMgKz0gY2h1bmsubGVuZ3RoO1xuXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBjb250ZW50IGxlbmd0aCBpcyBub3Qgb3ZlciB0aGUgbWF4Q29udGVudExlbmd0aCBpZiBzcGVjaWZpZWRcbiAgICAgICAgICBpZiAoY29uZmlnLm1heENvbnRlbnRMZW5ndGggPiAtMSAmJiB0b3RhbFJlc3BvbnNlQnl0ZXMgPiBjb25maWcubWF4Q29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJlamVjdChjcmVhdGVFcnJvcignbWF4Q29udGVudExlbmd0aCBzaXplIG9mICcgKyBjb25maWcubWF4Q29udGVudExlbmd0aCArICcgZXhjZWVkZWQnLFxuICAgICAgICAgICAgICBjb25maWcsIG51bGwsIGxhc3RSZXF1ZXN0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRXJyb3IoZXJyKSB7XG4gICAgICAgICAgaWYgKHJlcS5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgcmVqZWN0KGVuaGFuY2VFcnJvcihlcnIsIGNvbmZpZywgbnVsbCwgbGFzdFJlcXVlc3QpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FbmQoKSB7XG4gICAgICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9IEJ1ZmZlci5jb25jYXQocmVzcG9uc2VCdWZmZXIpO1xuICAgICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZURhdGEudG9TdHJpbmcoY29uZmlnLnJlc3BvbnNlRW5jb2RpbmcpO1xuICAgICAgICAgICAgaWYgKCFjb25maWcucmVzcG9uc2VFbmNvZGluZyB8fCBjb25maWcucmVzcG9uc2VFbmNvZGluZyA9PT0gJ3V0ZjgnKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IHV0aWxzLnN0cmlwQk9NKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlRGF0YTtcbiAgICAgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIGVycm9yc1xuICAgIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0RXJyb3IoZXJyKSB7XG4gICAgICBpZiAocmVxLmFib3J0ZWQgJiYgZXJyLmNvZGUgIT09ICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJykgcmV0dXJuO1xuICAgICAgcmVqZWN0KGVuaGFuY2VFcnJvcihlcnIsIGNvbmZpZywgbnVsbCwgcmVxKSk7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgcmVxdWVzdCB0aW1lb3V0XG4gICAgaWYgKGNvbmZpZy50aW1lb3V0KSB7XG4gICAgICAvLyBUaGlzIGlzIGZvcmNpbmcgYSBpbnQgdGltZW91dCB0byBhdm9pZCBwcm9ibGVtcyBpZiB0aGUgYHJlcWAgaW50ZXJmYWNlIGRvZXNuJ3QgaGFuZGxlIG90aGVyIHR5cGVzLlxuICAgICAgdmFyIHRpbWVvdXQgPSBwYXJzZUludChjb25maWcudGltZW91dCwgMTApO1xuXG4gICAgICBpZiAoaXNOYU4odGltZW91dCkpIHtcbiAgICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICAgICdlcnJvciB0cnlpbmcgdG8gcGFyc2UgYGNvbmZpZy50aW1lb3V0YCB0byBpbnQnLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAnRVJSX1BBUlNFX1RJTUVPVVQnLFxuICAgICAgICAgIHJlcVxuICAgICAgICApKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNvbWV0aW1lLCB0aGUgcmVzcG9uc2Ugd2lsbCBiZSB2ZXJ5IHNsb3csIGFuZCBkb2VzIG5vdCByZXNwb25kLCB0aGUgY29ubmVjdCBldmVudCB3aWxsIGJlIGJsb2NrIGJ5IGV2ZW50IGxvb3Agc3lzdGVtLlxuICAgICAgLy8gQW5kIHRpbWVyIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQsIGFuZCBhYm9ydCgpIHdpbGwgYmUgaW52b2tlZCBiZWZvcmUgY29ubmVjdGlvbiwgdGhlbiBnZXQgXCJzb2NrZXQgaGFuZyB1cFwiIGFuZCBjb2RlIEVDT05OUkVTRVQuXG4gICAgICAvLyBBdCB0aGlzIHRpbWUsIGlmIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgcmVxdWVzdCwgbm9kZWpzIHdpbGwgaGFuZyB1cCBzb21lIHNvY2tldCBvbiBiYWNrZ3JvdW5kLiBhbmQgdGhlIG51bWJlciB3aWxsIHVwIGFuZCB1cC5cbiAgICAgIC8vIEFuZCB0aGVuIHRoZXNlIHNvY2tldCB3aGljaCBiZSBoYW5nIHVwIHdpbGwgZGV2b3JpbmcgQ1BVIGxpdHRsZSBieSBsaXR0bGUuXG4gICAgICAvLyBDbGllbnRSZXF1ZXN0LnNldFRpbWVvdXQgd2lsbCBiZSBmaXJlZCBvbiB0aGUgc3BlY2lmeSBtaWxsaXNlY29uZHMsIGFuZCBjYW4gbWFrZSBzdXJlIHRoYXQgYWJvcnQoKSB3aWxsIGJlIGZpcmVkIGFmdGVyIGNvbm5lY3QuXG4gICAgICByZXEuc2V0VGltZW91dCh0aW1lb3V0LCBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0VGltZW91dCgpIHtcbiAgICAgICAgcmVxLmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgICAndGltZW91dCBvZiAnICsgdGltZW91dCArICdtcyBleGNlZWRlZCcsXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2l0aW9uYWwgJiYgY29uZmlnLnRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gJ0VUSU1FRE9VVCcgOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmIChyZXEuYWJvcnRlZCkgcmV0dXJuO1xuXG4gICAgICAgIHJlcS5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICBpZiAodXRpbHMuaXNTdHJlYW0oZGF0YSkpIHtcbiAgICAgIGRhdGEub24oJ2Vycm9yJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRXJyb3IoZXJyKSB7XG4gICAgICAgIHJlamVjdChlbmhhbmNlRXJyb3IoZXJyLCBjb25maWcsIG51bGwsIHJlcSkpO1xuICAgICAgfSkucGlwZShyZXEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXEuZW5kKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3RyZWFtXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFzc2VydFwiKTsiLCJ2YXIgZGVidWc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRlYnVnKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogb2ZmICovXG4gICAgICBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImZvbGxvdy1yZWRpcmVjdHNcIik7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyAvKiAqLyB9XG4gICAgaWYgKHR5cGVvZiBkZWJ1ZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHsgLyogKi8gfTtcbiAgICB9XG4gIH1cbiAgZGVidWcuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG4iLCIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZSB8fCBwcm9jZXNzLl9fbndqcykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCB0dHkgPSByZXF1aXJlKCd0dHknKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLmRlc3Ryb3kgPSB1dGlsLmRlcHJlY2F0ZShcblx0KCkgPT4ge30sXG5cdCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJ1xuKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbNiwgMiwgMywgNCwgNSwgMV07XG5cbnRyeSB7XG5cdC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgKGFzIGluLCBkb2Vzbid0IG5lZWQgdG8gYmUgaW5zdGFsbGVkLCBOT1QgbGlrZSBvcHRpb25hbERlcGVuZGVuY2llcyBpbiBwYWNrYWdlLmpzb24pXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcblx0Y29uc3Qgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cblx0aWYgKHN1cHBvcnRzQ29sb3IgJiYgKHN1cHBvcnRzQ29sb3Iuc3RkZXJyIHx8IHN1cHBvcnRzQ29sb3IpLmxldmVsID49IDIpIHtcblx0XHRleHBvcnRzLmNvbG9ycyA9IFtcblx0XHRcdDIwLFxuXHRcdFx0MjEsXG5cdFx0XHQyNixcblx0XHRcdDI3LFxuXHRcdFx0MzIsXG5cdFx0XHQzMyxcblx0XHRcdDM4LFxuXHRcdFx0MzksXG5cdFx0XHQ0MCxcblx0XHRcdDQxLFxuXHRcdFx0NDIsXG5cdFx0XHQ0Myxcblx0XHRcdDQ0LFxuXHRcdFx0NDUsXG5cdFx0XHQ1Nixcblx0XHRcdDU3LFxuXHRcdFx0NjIsXG5cdFx0XHQ2Myxcblx0XHRcdDY4LFxuXHRcdFx0NjksXG5cdFx0XHQ3NCxcblx0XHRcdDc1LFxuXHRcdFx0NzYsXG5cdFx0XHQ3Nyxcblx0XHRcdDc4LFxuXHRcdFx0NzksXG5cdFx0XHQ4MCxcblx0XHRcdDgxLFxuXHRcdFx0OTIsXG5cdFx0XHQ5Myxcblx0XHRcdDk4LFxuXHRcdFx0OTksXG5cdFx0XHQxMTIsXG5cdFx0XHQxMTMsXG5cdFx0XHQxMjgsXG5cdFx0XHQxMjksXG5cdFx0XHQxMzQsXG5cdFx0XHQxMzUsXG5cdFx0XHQxNDgsXG5cdFx0XHQxNDksXG5cdFx0XHQxNjAsXG5cdFx0XHQxNjEsXG5cdFx0XHQxNjIsXG5cdFx0XHQxNjMsXG5cdFx0XHQxNjQsXG5cdFx0XHQxNjUsXG5cdFx0XHQxNjYsXG5cdFx0XHQxNjcsXG5cdFx0XHQxNjgsXG5cdFx0XHQxNjksXG5cdFx0XHQxNzAsXG5cdFx0XHQxNzEsXG5cdFx0XHQxNzIsXG5cdFx0XHQxNzMsXG5cdFx0XHQxNzgsXG5cdFx0XHQxNzksXG5cdFx0XHQxODQsXG5cdFx0XHQxODUsXG5cdFx0XHQxOTYsXG5cdFx0XHQxOTcsXG5cdFx0XHQxOTgsXG5cdFx0XHQxOTksXG5cdFx0XHQyMDAsXG5cdFx0XHQyMDEsXG5cdFx0XHQyMDIsXG5cdFx0XHQyMDMsXG5cdFx0XHQyMDQsXG5cdFx0XHQyMDUsXG5cdFx0XHQyMDYsXG5cdFx0XHQyMDcsXG5cdFx0XHQyMDgsXG5cdFx0XHQyMDksXG5cdFx0XHQyMTQsXG5cdFx0XHQyMTUsXG5cdFx0XHQyMjAsXG5cdFx0XHQyMjFcblx0XHRdO1xuXHR9XG59IGNhdGNoIChlcnJvcikge1xuXHQvLyBTd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG59XG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGtleSA9PiB7XG5cdHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcblx0Ly8gQ2FtZWwtY2FzZVxuXHRjb25zdCBwcm9wID0ga2V5XG5cdFx0LnN1YnN0cmluZyg2KVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL18oW2Etel0pL2csIChfLCBrKSA9PiB7XG5cdFx0XHRyZXR1cm4gay50b1VwcGVyQ2FzZSgpO1xuXHRcdH0pO1xuXG5cdC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXHRsZXQgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcblx0aWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IHRydWU7XG5cdH0gZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHtcblx0XHR2YWwgPSBmYWxzZTtcblx0fSBlbHNlIGlmICh2YWwgPT09ICdudWxsJykge1xuXHRcdHZhbCA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0dmFsID0gTnVtYmVyKHZhbCk7XG5cdH1cblxuXHRvYmpbcHJvcF0gPSB2YWw7XG5cdHJldHVybiBvYmo7XG59LCB7fSk7XG5cbi8qKlxuICogSXMgc3Rkb3V0IGEgVFRZPyBDb2xvcmVkIG91dHB1dCBpcyBlbmFibGVkIHdoZW4gYHRydWVgLlxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0cmV0dXJuICdjb2xvcnMnIGluIGV4cG9ydHMuaW5zcGVjdE9wdHMgP1xuXHRcdEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDpcblx0XHR0dHkuaXNhdHR5KHByb2Nlc3Muc3RkZXJyLmZkKTtcbn1cblxuLyoqXG4gKiBBZGRzIEFOU0kgY29sb3IgZXNjYXBlIGNvZGVzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0Y29uc3Qge25hbWVzcGFjZTogbmFtZSwgdXNlQ29sb3JzfSA9IHRoaXM7XG5cblx0aWYgKHVzZUNvbG9ycykge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNvbG9yO1xuXHRcdGNvbnN0IGNvbG9yQ29kZSA9ICdcXHUwMDFCWzMnICsgKGMgPCA4ID8gYyA6ICc4OzU7JyArIGMpO1xuXHRcdGNvbnN0IHByZWZpeCA9IGAgICR7Y29sb3JDb2RlfTsxbSR7bmFtZX0gXFx1MDAxQlswbWA7XG5cblx0XHRhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG5cdFx0YXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgJ1xcdTAwMUJbMG0nKTtcblx0fSBlbHNlIHtcblx0XHRhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcblx0aWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICcgJztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdCguLi5hcmdzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHRpZiAobmFtZXNwYWNlcykge1xuXHRcdHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcblx0XHQvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuXHRcdGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG5cdGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuXHRcdC5zcGxpdCgnXFxuJylcblx0XHQubWFwKHN0ciA9PiBzdHIudHJpbSgpKVxuXHRcdC5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlTyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0dHlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXRpbFwiKTsiLCIndXNlIHN0cmljdCc7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBoYXNGbGFnID0gcmVxdWlyZSgnaGFzLWZsYWcnKTtcblxuY29uc3QgZW52ID0gcHJvY2Vzcy5lbnY7XG5cbmxldCBmb3JjZUNvbG9yO1xuaWYgKGhhc0ZsYWcoJ25vLWNvbG9yJykgfHxcblx0aGFzRmxhZygnbm8tY29sb3JzJykgfHxcblx0aGFzRmxhZygnY29sb3I9ZmFsc2UnKSkge1xuXHRmb3JjZUNvbG9yID0gZmFsc2U7XG59IGVsc2UgaWYgKGhhc0ZsYWcoJ2NvbG9yJykgfHxcblx0aGFzRmxhZygnY29sb3JzJykgfHxcblx0aGFzRmxhZygnY29sb3I9dHJ1ZScpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWFsd2F5cycpKSB7XG5cdGZvcmNlQ29sb3IgPSB0cnVlO1xufVxuaWYgKCdGT1JDRV9DT0xPUicgaW4gZW52KSB7XG5cdGZvcmNlQ29sb3IgPSBlbnYuRk9SQ0VfQ09MT1IubGVuZ3RoID09PSAwIHx8IHBhcnNlSW50KGVudi5GT1JDRV9DT0xPUiwgMTApICE9PSAwO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVMZXZlbChsZXZlbCkge1xuXHRpZiAobGV2ZWwgPT09IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGxldmVsLFxuXHRcdGhhc0Jhc2ljOiB0cnVlLFxuXHRcdGhhczI1NjogbGV2ZWwgPj0gMixcblx0XHRoYXMxNm06IGxldmVsID49IDNcblx0fTtcbn1cblxuZnVuY3Rpb24gc3VwcG9ydHNDb2xvcihzdHJlYW0pIHtcblx0aWYgKGZvcmNlQ29sb3IgPT09IGZhbHNlKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3I9MTZtJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj1mdWxsJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj10cnVlY29sb3InKSkge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTI1NicpKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoc3RyZWFtICYmICFzdHJlYW0uaXNUVFkgJiYgZm9yY2VDb2xvciAhPT0gdHJ1ZSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Y29uc3QgbWluID0gZm9yY2VDb2xvciA/IDEgOiAwO1xuXG5cdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG5cdFx0Ly8gTm9kZS5qcyA3LjUuMCBpcyB0aGUgZmlyc3QgdmVyc2lvbiBvZiBOb2RlLmpzIHRvIGluY2x1ZGUgYSBwYXRjaCB0b1xuXHRcdC8vIGxpYnV2IHRoYXQgZW5hYmxlcyAyNTYgY29sb3Igb3V0cHV0IG9uIFdpbmRvd3MuIEFueXRoaW5nIGVhcmxpZXIgYW5kIGl0XG5cdFx0Ly8gd29uJ3Qgd29yay4gSG93ZXZlciwgaGVyZSB3ZSB0YXJnZXQgTm9kZS5qcyA4IGF0IG1pbmltdW0gYXMgaXQgaXMgYW4gTFRTXG5cdFx0Ly8gcmVsZWFzZSwgYW5kIE5vZGUuanMgNyBpcyBub3QuIFdpbmRvd3MgMTAgYnVpbGQgMTA1ODYgaXMgdGhlIGZpcnN0IFdpbmRvd3Ncblx0XHQvLyByZWxlYXNlIHRoYXQgc3VwcG9ydHMgMjU2IGNvbG9ycy4gV2luZG93cyAxMCBidWlsZCAxNDkzMSBpcyB0aGUgZmlyc3QgcmVsZWFzZVxuXHRcdC8vIHRoYXQgc3VwcG9ydHMgMTZtL1RydWVDb2xvci5cblx0XHRjb25zdCBvc1JlbGVhc2UgPSBvcy5yZWxlYXNlKCkuc3BsaXQoJy4nKTtcblx0XHRpZiAoXG5cdFx0XHROdW1iZXIocHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJylbMF0pID49IDggJiZcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMF0pID49IDEwICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxMDU4NlxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDE0OTMxID8gMyA6IDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NJJyBpbiBlbnYpIHtcblx0XHRpZiAoWydUUkFWSVMnLCAnQ0lSQ0xFQ0knLCAnQVBQVkVZT1InLCAnR0lUTEFCX0NJJ10uc29tZShzaWduID0+IHNpZ24gaW4gZW52KSB8fCBlbnYuQ0lfTkFNRSA9PT0gJ2NvZGVzaGlwJykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1pbjtcblx0fVxuXG5cdGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gZW52KSB7XG5cdFx0cmV0dXJuIC9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KGVudi5URUFNQ0lUWV9WRVJTSU9OKSA/IDEgOiAwO1xuXHR9XG5cblx0aWYgKGVudi5DT0xPUlRFUk0gPT09ICd0cnVlY29sb3InKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoJ1RFUk1fUFJPR1JBTScgaW4gZW52KSB7XG5cdFx0Y29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KChlbnYuVEVSTV9QUk9HUkFNX1ZFUlNJT04gfHwgJycpLnNwbGl0KCcuJylbMF0sIDEwKTtcblxuXHRcdHN3aXRjaCAoZW52LlRFUk1fUFJPR1JBTSkge1xuXHRcdFx0Y2FzZSAnaVRlcm0uYXBwJzpcblx0XHRcdFx0cmV0dXJuIHZlcnNpb24gPj0gMyA/IDMgOiAyO1xuXHRcdFx0Y2FzZSAnQXBwbGVfVGVybWluYWwnOlxuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdC8vIE5vIGRlZmF1bHRcblx0XHR9XG5cdH1cblxuXHRpZiAoLy0yNTYoY29sb3IpPyQvaS50ZXN0KGVudi5URVJNKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKC9ec2NyZWVufF54dGVybXxednQxMDB8XnZ0MjIwfF5yeHZ0fGNvbG9yfGFuc2l8Y3lnd2lufGxpbnV4L2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ09MT1JURVJNJyBpbiBlbnYpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmIChlbnYuVEVSTSA9PT0gJ2R1bWInKSB7XG5cdFx0cmV0dXJuIG1pbjtcblx0fVxuXG5cdHJldHVybiBtaW47XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnRMZXZlbChzdHJlYW0pIHtcblx0Y29uc3QgbGV2ZWwgPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSk7XG5cdHJldHVybiB0cmFuc2xhdGVMZXZlbChsZXZlbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG5cdHN0ZG91dDogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3Rkb3V0KSxcblx0c3RkZXJyOiBnZXRTdXBwb3J0TGV2ZWwocHJvY2Vzcy5zdGRlcnIpXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSAoZmxhZywgYXJndikgPT4ge1xuXHRhcmd2ID0gYXJndiB8fCBwcm9jZXNzLmFyZ3Y7XG5cdGNvbnN0IHByZWZpeCA9IGZsYWcuc3RhcnRzV2l0aCgnLScpID8gJycgOiAoZmxhZy5sZW5ndGggPT09IDEgPyAnLScgOiAnLS0nKTtcblx0Y29uc3QgcG9zID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXHRjb25zdCB0ZXJtaW5hdG9yUG9zID0gYXJndi5pbmRleE9mKCctLScpO1xuXHRyZXR1cm4gcG9zICE9PSAtMSAmJiAodGVybWluYXRvclBvcyA9PT0gLTEgPyB0cnVlIDogcG9zIDwgdGVybWluYXRvclBvcyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiemxpYlwiKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBwa2cgPSByZXF1aXJlKCcuLy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xudmFyIGN1cnJlbnRWZXJBcnIgPSBwa2cudmVyc2lvbi5zcGxpdCgnLicpO1xuXG4vKipcbiAqIENvbXBhcmUgcGFja2FnZSB2ZXJzaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gdGhhblZlcnNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc09sZGVyVmVyc2lvbih2ZXJzaW9uLCB0aGFuVmVyc2lvbikge1xuICB2YXIgcGtnVmVyc2lvbkFyciA9IHRoYW5WZXJzaW9uID8gdGhhblZlcnNpb24uc3BsaXQoJy4nKSA6IGN1cnJlbnRWZXJBcnI7XG4gIHZhciBkZXN0VmVyID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIGlmIChwa2dWZXJzaW9uQXJyW2ldID4gZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChwa2dWZXJzaW9uQXJyW2ldIDwgZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvclxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgdmFyIGlzRGVwcmVjYXRlZCA9IHZlcnNpb24gJiYgaXNPbGRlclZlcnNpb24odmVyc2lvbik7XG5cbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIHBrZy52ZXJzaW9uICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkIGluICcgKyB2ZXJzaW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVwcmVjYXRlZCAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPbGRlclZlcnNpb246IGlzT2xkZXJWZXJzaW9uLFxuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZvbGRlckJ5SWQoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpIHtcbiAgdmFsaWRhdGVBcGlLZXlzKGFwaUtleSwgc2VjcmV0QXBpS2V5KTtcblxuICBsZXQgdXJsID0gYCR7YmFzZVVybH0vc3RvcmFnZS9mb2xkZXIvJHtib2R5LmZvbGRlcklkfWA7XG5cbiAgaWYgKGJvZHkudGVhbUlkKSB7XG4gICAgdXJsID0gdXJsICsgYC8ke2JvZHkudGVhbUlkfWA7XG4gIH1cblxuICB2YXIgY29uZmlnID0ge1xuICAgIG1ldGhvZDogJ2dldCcsXG4gICAgdXJsOiB1cmwsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYXBpLWFjY2Vzcy1rZXknOiBib2R5LmFwaUFjY2Vzc0tleSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3MoY29uZmlnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVcmwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBcGlLZXlzIH0gZnJvbSAnLi4vdXRpbC92YWxpZGF0b3JzJztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9lcnJvclJlc3BvbnNlJztcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVGb2xkZXIoYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpIHtcbiAgdmFsaWRhdGVBcGlLZXlzKGFwaUtleSwgc2VjcmV0QXBpS2V5KTtcblxuICB2YXIgZGF0YSA9IHFzLnN0cmluZ2lmeSh7XG4gICAgZm9sZGVyTmFtZTogYm9keS5mb2xkZXJOYW1lLFxuICAgIHBhcmVudEZvbGRlcklkOiBib2R5LnBhcmVudEZvbGRlcklkLFxuICAgIHRlYW1JZDogYm9keS50ZWFtSWQgfHwgJycsXG4gIH0pO1xuXG4gIHZhciBjb25maWcgPSB7XG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsOiBgJHtiYXNlVXJsfS9zdG9yYWdlL2ZvbGRlcmAsXG4gICAgZGF0YTogZGF0YSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAneC1hcGktYWNjZXNzLWtleSc6IGJvZHkuYXBpQWNjZXNzS2V5LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBheGlvcyhjb25maWcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+IDM5OSkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBzdHIgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCB4ID0+IGAlJHt4LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoc3RyaW5nLCBzZXBhcmF0b3IpID0+IHtcblx0aWYgKCEodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlcGFyYXRvciA9PT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIGFyZ3VtZW50cyB0byBiZSBvZiB0eXBlIGBzdHJpbmdgJyk7XG5cdH1cblxuXHRpZiAoc2VwYXJhdG9yID09PSAnJykge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdGNvbnN0IHNlcGFyYXRvckluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc2VwYXJhdG9yKTtcblxuXHRpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XG5cdFx0cmV0dXJuIFtzdHJpbmddO1xuXHR9XG5cblx0cmV0dXJuIFtcblx0XHRzdHJpbmcuc2xpY2UoMCwgc2VwYXJhdG9ySW5kZXgpLFxuXHRcdHN0cmluZy5zbGljZShzZXBhcmF0b3JJbmRleCArIHNlcGFyYXRvci5sZW5ndGgpXG5cdF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBwcmVkaWNhdGUpIHtcblx0dmFyIHJldCA9IHt9O1xuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdHZhciBpc0FyciA9IEFycmF5LmlzQXJyYXkocHJlZGljYXRlKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHR2YXIgdmFsID0gb2JqW2tleV07XG5cblx0XHRpZiAoaXNBcnIgPyBwcmVkaWNhdGUuaW5kZXhPZihrZXkpICE9PSAtMSA6IHByZWRpY2F0ZShrZXksIHZhbCwgb2JqKSkge1xuXHRcdFx0cmV0W2tleV0gPSB2YWw7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgYmFzZVVybCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUFwaUtleXMgfSBmcm9tICcuLi91dGlsL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgaGFuZGxlRXJyb3IgfSBmcm9tICcuLi91dGlsL2Vycm9yUmVzcG9uc2UnO1xuaW1wb3J0IHFzIGZyb20gJ3F1ZXJ5LXN0cmluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUZvbGRlck1ldGFkYXRhKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGRhdGEgPSBxcy5zdHJpbmdpZnkoe1xuICAgIG1ldGFkYXRhOiBib2R5Lm1ldGFkYXRhLFxuICB9KTtcblxuICB2YXIgY29uZmlnID0ge1xuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHVybDogYCR7YmFzZVVybH0vc3RvcmFnZS9mb2xkZXIvJHtib2R5LmZvbGRlcklkfS9tZXRhYCxcbiAgICBkYXRhOiBkYXRhLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICd4LWFwaS1hY2Nlc3Mta2V5JzogYm9keS5hcGlBY2Nlc3NLZXksXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGF4aW9zKGNvbmZpZylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGB1bmtub3duIHNlcnZlciByZXNwb25zZSB3aGlsZSBhdXRoZW50aWNhdGluZzogJHtyZXNwb25zZX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgcmVqZWN0KGZvcm1hdHRlZEVycm9yKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlbGV0ZUZvbGRlcihhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSkge1xuICB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpO1xuXG4gIHZhciBjb25maWcgPSB7XG4gICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICB1cmw6IGAke2Jhc2VVcmx9L3N0b3JhZ2UvZm9sZGVyLyR7Ym9keS5mb2xkZXJJZH1gLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICd4LWFwaS1hY2Nlc3Mta2V5JzogYm9keS5hcGlBY2Nlc3NLZXksXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGF4aW9zKGNvbmZpZylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGB1bmtub3duIHNlcnZlciByZXNwb25zZSB3aGlsZSBhdXRoZW50aWNhdGluZzogJHtyZXNwb25zZX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgcmVqZWN0KGZvcm1hdHRlZEVycm9yKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5pbXBvcnQgcXMgZnJvbSAncXVlcnktc3RyaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBsb2FkRmlsZVRvRm9sZGVyKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGRhdGEgPSBib2R5LmRhdGE7XG4gIHZhciBjb25maWcgPSB7XG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsOiBgJHtiYXNlVXJsfS9zdG9yYWdlL2ZvbGRlci8ke2JvZHkuZm9sZGVySWR9L3VwbG9hZGAsXG4gICAgZGF0YTogZGF0YSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogYG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7ZGF0YS5fYm91bmRhcnl9YCxcbiAgICAgICd4LWFwaS1hY2Nlc3Mta2V5JzogYm9keS5hcGlBY2Nlc3NLZXksXG4gICAgICAnc3RvcngtbW5lbW9uaWMnOiBib2R5Lm1uZW1vbmljLFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBheGlvcyhjb25maWcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+IDM5OSkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVcmwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBcGlLZXlzIH0gZnJvbSAnLi4vdXRpbC92YWxpZGF0b3JzJztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9lcnJvclJlc3BvbnNlJztcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlRm9sZGVyKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGRhdGEgPSBxcy5zdHJpbmdpZnkoe1xuICAgIGZvbGRlcklkOiBib2R5LmZvbGRlcklkLFxuICAgIGRlc3RpbmF0aW9uOiBib2R5LmRlc3RpbmF0aW9uLFxuICB9KTtcblxuICBsZXQgdXJsID0gYCR7YmFzZVVybH0vc3RvcmFnZS9tb3ZlRm9sZGVyYDtcblxuICB2YXIgY29uZmlnID0ge1xuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHVybDogdXJsLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYXBpLWFjY2Vzcy1rZXknOiBib2R5LmFwaUFjY2Vzc0tleSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3MoY29uZmlnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVcmwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBcGlLZXlzIH0gZnJvbSAnLi4vdXRpbC92YWxpZGF0b3JzJztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9lcnJvclJlc3BvbnNlJztcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVGaWxlKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGRhdGEgPSBxcy5zdHJpbmdpZnkoe1xuICAgIGZpbGU6IGJvZHkuZmlsZSxcbiAgfSk7XG5cbiAgdmFyIGNvbmZpZyA9IHtcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICB1cmw6IGAke2Jhc2VVcmx9L3N0b3JhZ2UvZmlsZWAsXG4gICAgZGF0YTogZGF0YSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAneC1hcGktYWNjZXNzLWtleSc6IGJvZHkuYXBpQWNjZXNzS2V5LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBheGlvcyhjb25maWcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgdW5rbm93biBzZXJ2ZXIgcmVzcG9uc2Ugd2hpbGUgYXV0aGVudGljYXRpbmc6ICR7cmVzcG9uc2V9YCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICByZXN1bHQ6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRXJyb3IgPSBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIHJlamVjdChmb3JtYXR0ZWRFcnJvcik7XG4gICAgICB9KTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgYmFzZVVybCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUFwaUtleXMgfSBmcm9tICcuLi91dGlsL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgaGFuZGxlRXJyb3IgfSBmcm9tICcuLi91dGlsL2Vycm9yUmVzcG9uc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGaWxlQnlJZChhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSkge1xuICB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB7fSxcbiAgfTtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5pbXBvcnQgcXMgZnJvbSAncXVlcnktc3RyaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlRmlsZU1ldGFkYXRhKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGRhdGEgPSBxcy5zdHJpbmdpZnkoe1xuICAgIG1ldGFkYXRhOiBib2R5Lm1ldGFkYXRhLFxuICB9KTtcblxuICB2YXIgY29uZmlnID0ge1xuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHVybDogYCR7YmFzZVVybH0vc3RvcmFnZS9maWxlLyR7Ym9keS5maWxlSWR9L21ldGFgLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYXBpLWFjY2Vzcy1rZXknOiBib2R5LmFwaUFjY2Vzc0tleSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3MoY29uZmlnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVcmwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBcGlLZXlzIH0gZnJvbSAnLi4vdXRpbC92YWxpZGF0b3JzJztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9lcnJvclJlc3BvbnNlJztcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlRmlsZShhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSkge1xuICB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpO1xuXG4gIHZhciBkYXRhID0gcXMuc3RyaW5naWZ5KHtcbiAgICBmaWxlSWQ6IGJvZHkuZmlsZUlkLFxuICAgIGRlc3RpbmF0aW9uOiBib2R5LmRlc3RpbmF0aW9uLFxuICB9KTtcblxuICBsZXQgdXJsID0gYCR7YmFzZVVybH0vc3RvcmFnZS9tb3ZlRmlsZWA7XG5cbiAgdmFyIGNvbmZpZyA9IHtcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICB1cmw6IHVybCxcbiAgICBkYXRhOiBkYXRhLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICd4LWFwaS1hY2Nlc3Mta2V5JzogYm9keS5hcGlBY2Nlc3NLZXksXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGF4aW9zKGNvbmZpZylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGB1bmtub3duIHNlcnZlciByZXNwb25zZSB3aGlsZSBhdXRoZW50aWNhdGluZzogJHtyZXNwb25zZX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgcmVqZWN0KGZvcm1hdHRlZEVycm9yKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlbGV0ZUZpbGVGcm9tRm9sZGVyKGFwaUtleSwgc2VjcmV0QXBpS2V5LCBib2R5KSB7XG4gIHZhbGlkYXRlQXBpS2V5cyhhcGlLZXksIHNlY3JldEFwaUtleSk7XG5cbiAgdmFyIGNvbmZpZyA9IHtcbiAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgIHVybDogYCR7YmFzZVVybH0vc3RvcmFnZS9mb2xkZXIvJHtib2R5LmZvbGRlcklkfS9maWxlLyR7Ym9keS5maWxlSWR9YCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAneC1hcGktYWNjZXNzLWtleSc6IGJvZHkuYXBpQWNjZXNzS2V5LFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBheGlvcyhjb25maWcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgdW5rbm93biBzZXJ2ZXIgcmVzcG9uc2Ugd2hpbGUgYXV0aGVudGljYXRpbmc6ICR7cmVzcG9uc2V9YCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICByZXN1bHQ6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRXJyb3IgPSBoYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIHJlamVjdChmb3JtYXR0ZWRFcnJvcik7XG4gICAgICB9KTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgYmFzZVVybCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUFwaUtleXMgfSBmcm9tICcuLi91dGlsL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgaGFuZGxlRXJyb3IgfSBmcm9tICcuLi91dGlsL2Vycm9yUmVzcG9uc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWxldGVGaWxlRnJvbUJ1Y2tldChhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSkge1xuICB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpO1xuXG4gIHZhciBjb25maWcgPSB7XG4gICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICB1cmw6IGAke2Jhc2VVcmx9L3N0b3JhZ2UvYnVja2V0LyR7Ym9keS5idWNrZXRJZH0vZmlsZS8ke2JvZHkuZmlsZUlkfWAsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYXBpLWFjY2Vzcy1rZXknOiBib2R5LmFwaUFjY2Vzc0tleSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3MoY29uZmlnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHVua25vd24gc2VydmVyIHJlc3BvbnNlIHdoaWxlIGF1dGhlbnRpY2F0aW5nOiAke3Jlc3BvbnNlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgcmVzdWx0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZEVycm9yID0gaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICByZWplY3QoZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVcmwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBcGlLZXlzIH0gZnJvbSAnLi4vdXRpbC92YWxpZGF0b3JzJztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9lcnJvclJlc3BvbnNlJztcbmltcG9ydCBxcyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVNoYXJlVG9rZW4oYXBpS2V5LCBzZWNyZXRBcGlLZXksIGJvZHkpIHtcbiAgdmFsaWRhdGVBcGlLZXlzKGFwaUtleSwgc2VjcmV0QXBpS2V5KTtcblxuICB2YXIgZGF0YSA9IHFzLnN0cmluZ2lmeSh7XG4gICAgaXNGb2xkZXI6IGJvZHkuaXNGb2xkZXIsXG4gICAgdmlld3M6IGJvZHkudmlld3MsXG4gIH0pO1xuXG4gIHZhciBjb25maWcgPSB7XG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsOiBgJHtiYXNlVXJsfS9zdG9yYWdlL3NoYXJlL2ZpbGUvJHtib2R5Lml0ZW1JZH1gLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYXBpLWFjY2Vzcy1rZXknOiBib2R5LmFwaUFjY2Vzc0tleSxcbiAgICAgICdzdG9yeC1tbmVtb25pYyc6IGJvZHkubW5lbW9uaWMsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGF4aW9zKGNvbmZpZylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGB1bmtub3duIHNlcnZlciByZXNwb25zZSB3aGlsZSBhdXRoZW50aWNhdGluZzogJHtyZXNwb25zZX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IGhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgcmVqZWN0KGZvcm1hdHRlZEVycm9yKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHZhbGlkYXRlQXBpS2V5cyB9IGZyb20gJy4uL3V0aWwvdmFsaWRhdG9ycyc7XG5pbXBvcnQgeyBoYW5kbGVFcnJvciB9IGZyb20gJy4uL3V0aWwvZXJyb3JSZXNwb25zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRvd25sb2FkRW50aXR5QnlUb2tlbihhcGlLZXksIHNlY3JldEFwaUtleSwgYm9keSkge1xuICB2YWxpZGF0ZUFwaUtleXMoYXBpS2V5LCBzZWNyZXRBcGlLZXkpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB7fSxcbiAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=